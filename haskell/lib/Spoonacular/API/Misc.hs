{-
   spoonacular API

   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   OpenAPI Version: 3.0.0
   spoonacular API API version: 1.1
   Contact: mail@spoonacular.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Spoonacular.API.Misc
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Spoonacular.API.Misc where

import Spoonacular.Core
import Spoonacular.MimeTypes
import Spoonacular.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Misc

-- *** detectFoodInText

-- | @POST \/food\/detect@
-- 
-- Detect Food in Text
-- 
-- Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
detectFoodInText
  :: (Consumes DetectFoodInText MimeFormUrlEncoded)
  => ParamText -- ^ "text"
  -> SpoonacularRequest DetectFoodInText MimeFormUrlEncoded DetectFoodInText200Response MimeJSON
detectFoodInText (ParamText text) =
  _mkRequest "POST" ["/food/detect"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addForm` toForm ("text", text)

data DetectFoodInText  

-- | @application/x-www-form-urlencoded@
instance Consumes DetectFoodInText MimeFormUrlEncoded

-- | @application/json@
instance Produces DetectFoodInText MimeJSON


-- *** getARandomFoodJoke

-- | @GET \/food\/jokes\/random@
-- 
-- Random Food Joke
-- 
-- Get a random joke that is related to food. Caution: this is an endpoint for adults!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getARandomFoodJoke
  :: SpoonacularRequest GetARandomFoodJoke MimeNoContent GetARandomFoodJoke200Response MimeJSON
getARandomFoodJoke =
  _mkRequest "GET" ["/food/jokes/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetARandomFoodJoke  
-- | @application/json@
instance Produces GetARandomFoodJoke MimeJSON


-- *** getConversationSuggests

-- | @GET \/food\/converse\/suggest@
-- 
-- Conversation Suggests
-- 
-- This endpoint returns suggestions for things the user can say or ask the chatbot.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getConversationSuggests
  :: Query -- ^ "query" -  A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
  -> SpoonacularRequest GetConversationSuggests MimeNoContent GetConversationSuggests200Response MimeJSON
getConversationSuggests (Query query) =
  _mkRequest "GET" ["/food/converse/suggest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("query", Just query)

data GetConversationSuggests  

-- | /Optional Param/ "number" - The number of suggestions to return (between 1 and 25).
instance HasOptionalParam GetConversationSuggests NumberDouble where
  applyOptionalParam req (NumberDouble xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetConversationSuggests MimeJSON


-- *** getRandomFoodTrivia

-- | @GET \/food\/trivia\/random@
-- 
-- Random Food Trivia
-- 
-- Returns random food trivia.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRandomFoodTrivia
  :: SpoonacularRequest GetRandomFoodTrivia MimeNoContent GetRandomFoodTrivia200Response MimeJSON
getRandomFoodTrivia =
  _mkRequest "GET" ["/food/trivia/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRandomFoodTrivia  
-- | @application/json@
instance Produces GetRandomFoodTrivia MimeJSON


-- *** imageAnalysisByURL

-- | @GET \/food\/images\/analyze@
-- 
-- Image Analysis by URL
-- 
-- Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
imageAnalysisByURL
  :: ImageUrl -- ^ "imageUrl" -  The URL of the image to be analyzed.
  -> SpoonacularRequest ImageAnalysisByURL MimeNoContent ImageAnalysisByURL200Response MimeJSON
imageAnalysisByURL (ImageUrl imageUrl) =
  _mkRequest "GET" ["/food/images/analyze"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("imageUrl", Just imageUrl)

data ImageAnalysisByURL  
-- | @application/json@
instance Produces ImageAnalysisByURL MimeJSON


-- *** imageClassificationByURL

-- | @GET \/food\/images\/classify@
-- 
-- Image Classification by URL
-- 
-- Classify a food image.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
imageClassificationByURL
  :: ImageUrl -- ^ "imageUrl" -  The URL of the image to be classified.
  -> SpoonacularRequest ImageClassificationByURL MimeNoContent ImageClassificationByURL200Response MimeJSON
imageClassificationByURL (ImageUrl imageUrl) =
  _mkRequest "GET" ["/food/images/classify"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("imageUrl", Just imageUrl)

data ImageClassificationByURL  
-- | @application/json@
instance Produces ImageClassificationByURL MimeJSON


-- *** searchAllFood

-- | @GET \/food\/search@
-- 
-- Search All Food
-- 
-- Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchAllFood
  :: Query -- ^ "query" -  The search query.
  -> SpoonacularRequest SearchAllFood MimeNoContent SearchAllFood200Response MimeJSON
searchAllFood (Query query) =
  _mkRequest "GET" ["/food/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("query", Just query)

data SearchAllFood  

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchAllFood Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchAllFood Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchAllFood MimeJSON


-- *** searchCustomFoods

-- | @GET \/food\/customFoods\/search@
-- 
-- Search Custom Foods
-- 
-- Search custom foods in a user's account.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchCustomFoods
  :: Username -- ^ "username" -  The username.
  -> Hash -- ^ "hash" -  The private hash for the username.
  -> SpoonacularRequest SearchCustomFoods MimeNoContent SearchCustomFoods200Response MimeJSON
searchCustomFoods (Username username) (Hash hash) =
  _mkRequest "GET" ["/food/customFoods/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("username", Just username)
    `addQuery` toQuery ("hash", Just hash)

data SearchCustomFoods  

-- | /Optional Param/ "query" - The (natural language) search query.
instance HasOptionalParam SearchCustomFoods Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchCustomFoods Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchCustomFoods Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchCustomFoods MimeJSON


-- *** searchFoodVideos

-- | @GET \/food\/videos\/search@
-- 
-- Search Food Videos
-- 
-- Find recipe and other food related videos.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchFoodVideos
  :: SpoonacularRequest SearchFoodVideos MimeNoContent SearchFoodVideos200Response MimeJSON
searchFoodVideos =
  _mkRequest "GET" ["/food/videos/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchFoodVideos  

-- | /Optional Param/ "query" - The (natural language) search query.
instance HasOptionalParam SearchFoodVideos Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "type" - The type of the recipes. See a full list of supported meal types.
instance HasOptionalParam SearchFoodVideos ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
instance HasOptionalParam SearchFoodVideos Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `addQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "diet" - The diet for which the recipes must be suitable. See a full list of supported diets.
instance HasOptionalParam SearchFoodVideos Diet where
  applyOptionalParam req (Diet xs) =
    req `addQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "includeIngredients" - A comma-separated list of ingredients that the recipes should contain.
instance HasOptionalParam SearchFoodVideos IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `addQuery` toQuery ("includeIngredients", Just xs)

-- | /Optional Param/ "excludeIngredients" - A comma-separated list of ingredients or ingredient types that the recipes must not contain.
instance HasOptionalParam SearchFoodVideos ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `addQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "minLength" - Minimum video length in seconds.
instance HasOptionalParam SearchFoodVideos MinLength where
  applyOptionalParam req (MinLength xs) =
    req `addQuery` toQuery ("minLength", Just xs)

-- | /Optional Param/ "maxLength" - Maximum video length in seconds.
instance HasOptionalParam SearchFoodVideos MaxLength where
  applyOptionalParam req (MaxLength xs) =
    req `addQuery` toQuery ("maxLength", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchFoodVideos Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchFoodVideos Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchFoodVideos MimeJSON


-- *** searchSiteContent

-- | @GET \/food\/site\/search@
-- 
-- Search Site Content
-- 
-- Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchSiteContent
  :: Query -- ^ "query" -  The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
  -> SpoonacularRequest SearchSiteContent MimeNoContent SearchSiteContent200Response MimeJSON
searchSiteContent (Query query) =
  _mkRequest "GET" ["/food/site/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("query", Just query)

data SearchSiteContent  
-- | @application/json@
instance Produces SearchSiteContent MimeJSON


-- *** talkToChatbot

-- | @GET \/food\/converse@
-- 
-- Talk to Chatbot
-- 
-- This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
talkToChatbot
  :: ParamText -- ^ "text" -  The request / question / answer from the user to the chatbot.
  -> SpoonacularRequest TalkToChatbot MimeNoContent TalkToChatbot200Response MimeJSON
talkToChatbot (ParamText text) =
  _mkRequest "GET" ["/food/converse"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("text", Just text)

data TalkToChatbot  

-- | /Optional Param/ "contextId" - An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
instance HasOptionalParam TalkToChatbot ContextId where
  applyOptionalParam req (ContextId xs) =
    req `addQuery` toQuery ("contextId", Just xs)
-- | @application/json@
instance Produces TalkToChatbot MimeJSON

