{-
   spoonacular API

   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   OpenAPI Version: 3.0.0
   spoonacular API API version: 1.1
   Contact: mail@spoonacular.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Spoonacular.API.Recipes
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Spoonacular.API.Recipes where

import Spoonacular.Core
import Spoonacular.MimeTypes
import Spoonacular.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Recipes

-- *** analyzeARecipeSearchQuery

-- | @GET \/recipes\/queries\/analyze@
-- 
-- Analyze a Recipe Search Query
-- 
-- Parse a recipe search query to find out its intention.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
analyzeARecipeSearchQuery
  :: Q -- ^ "q" -  The recipe search query.
  -> SpoonacularRequest AnalyzeARecipeSearchQuery MimeNoContent AnalyzeARecipeSearchQuery200Response MimeJSON
analyzeARecipeSearchQuery (Q q) =
  _mkRequest "GET" ["/recipes/queries/analyze"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("q", Just q)

data AnalyzeARecipeSearchQuery  
-- | @application/json@
instance Produces AnalyzeARecipeSearchQuery MimeJSON


-- *** analyzeRecipeInstructions

-- | @POST \/recipes\/analyzeInstructions@
-- 
-- Analyze Recipe Instructions
-- 
-- This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
analyzeRecipeInstructions
  :: SpoonacularRequest AnalyzeRecipeInstructions MimeNoContent AnalyzeRecipeInstructions200Response MimeJSON
analyzeRecipeInstructions =
  _mkRequest "POST" ["/recipes/analyzeInstructions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data AnalyzeRecipeInstructions  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam AnalyzeRecipeInstructions ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes AnalyzeRecipeInstructions MimeFormUrlEncoded

-- | @application/json@
instance Produces AnalyzeRecipeInstructions MimeJSON


-- *** autocompleteRecipeSearch

-- | @GET \/recipes\/autocomplete@
-- 
-- Autocomplete Recipe Search
-- 
-- Autocomplete a partial input to suggest possible recipe names.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
autocompleteRecipeSearch
  :: SpoonacularRequest AutocompleteRecipeSearch MimeNoContent [AutocompleteRecipeSearch200ResponseInner] MimeJSON
autocompleteRecipeSearch =
  _mkRequest "GET" ["/recipes/autocomplete"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data AutocompleteRecipeSearch  

-- | /Optional Param/ "query" - The (natural language) search query.
instance HasOptionalParam AutocompleteRecipeSearch Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam AutocompleteRecipeSearch Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteRecipeSearch MimeJSON


-- *** classifyCuisine

-- | @POST \/recipes\/cuisine@
-- 
-- Classify Cuisine
-- 
-- Classify the recipe's cuisine.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
classifyCuisine
  :: SpoonacularRequest ClassifyCuisine MimeNoContent ClassifyCuisine200Response MimeJSON
classifyCuisine =
  _mkRequest "POST" ["/recipes/cuisine"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data ClassifyCuisine  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam ClassifyCuisine ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes ClassifyCuisine MimeFormUrlEncoded

-- | @application/json@
instance Produces ClassifyCuisine MimeJSON


-- *** computeGlycemicLoad

-- | @POST \/food\/ingredients\/glycemicLoad@
-- 
-- Compute Glycemic Load
-- 
-- Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
computeGlycemicLoad
  :: (Consumes ComputeGlycemicLoad MimeJSON, MimeRender MimeJSON ComputeGlycemicLoadRequest)
  => ComputeGlycemicLoadRequest -- ^ "computeGlycemicLoadRequest"
  -> SpoonacularRequest ComputeGlycemicLoad MimeJSON ComputeGlycemicLoad200Response MimeJSON
computeGlycemicLoad computeGlycemicLoadRequest =
  _mkRequest "POST" ["/food/ingredients/glycemicLoad"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `setBodyParam` computeGlycemicLoadRequest

data ComputeGlycemicLoad 
instance HasBodyParam ComputeGlycemicLoad ComputeGlycemicLoadRequest 

-- | /Optional Param/ "language" - The language of the input. Either 'en' or 'de'.
instance HasOptionalParam ComputeGlycemicLoad Language where
  applyOptionalParam req (Language xs) =
    req `addQuery` toQuery ("language", Just xs)

-- | @application/json@
instance Consumes ComputeGlycemicLoad MimeJSON

-- | @application/json@
instance Produces ComputeGlycemicLoad MimeJSON


-- *** convertAmounts

-- | @GET \/recipes\/convert@
-- 
-- Convert Amounts
-- 
-- Convert amounts like \"2 cups of flour to grams\".
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
convertAmounts
  :: IngredientName -- ^ "ingredientName" -  The ingredient which you want to convert.
  -> SourceAmount -- ^ "sourceAmount" -  The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
  -> SourceUnit -- ^ "sourceUnit" -  The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  -> TargetUnit -- ^ "targetUnit" -  The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  -> SpoonacularRequest ConvertAmounts MimeNoContent ConvertAmounts200Response MimeJSON
convertAmounts (IngredientName ingredientName) (SourceAmount sourceAmount) (SourceUnit sourceUnit) (TargetUnit targetUnit) =
  _mkRequest "GET" ["/recipes/convert"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("ingredientName", Just ingredientName)
    `addQuery` toQuery ("sourceAmount", Just sourceAmount)
    `addQuery` toQuery ("sourceUnit", Just sourceUnit)
    `addQuery` toQuery ("targetUnit", Just targetUnit)

data ConvertAmounts  
-- | @application/json@
instance Produces ConvertAmounts MimeJSON


-- *** createRecipeCard

-- | @POST \/recipes\/visualizeRecipe@
-- 
-- Create Recipe Card
-- 
-- Generate a recipe card for a recipe.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
createRecipeCard
  :: SpoonacularRequest CreateRecipeCard MimeNoContent CreateRecipeCard200Response MimeJSON
createRecipeCard =
  _mkRequest "POST" ["/recipes/visualizeRecipe"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data CreateRecipeCard  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam CreateRecipeCard ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | @multipart/form-data@
instance Consumes CreateRecipeCard MimeMultipartFormData

-- | @application/json@
instance Produces CreateRecipeCard MimeJSON


-- *** equipmentByIDImage

-- | @GET \/recipes\/{id}\/equipmentWidget.png@
-- 
-- Equipment by ID Image
-- 
-- Visualize a recipe's equipment list as an image.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
equipmentByIDImage
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest EquipmentByIDImage MimeNoContent A.Value MimeImagePng
equipmentByIDImage (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data EquipmentByIDImage  
-- | @image/png@
instance Produces EquipmentByIDImage MimeImagePng


-- *** extractRecipeFromWebsite

-- | @GET \/recipes\/extract@
-- 
-- Extract Recipe from Website
-- 
-- This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
extractRecipeFromWebsite
  :: Url -- ^ "url" -  The URL of the recipe page.
  -> SpoonacularRequest ExtractRecipeFromWebsite MimeNoContent GetRecipeInformation200Response MimeJSON
extractRecipeFromWebsite (Url url) =
  _mkRequest "GET" ["/recipes/extract"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("url", Just url)

data ExtractRecipeFromWebsite  

-- | /Optional Param/ "forceExtraction" - If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
instance HasOptionalParam ExtractRecipeFromWebsite ForceExtraction where
  applyOptionalParam req (ForceExtraction xs) =
    req `addQuery` toQuery ("forceExtraction", Just xs)

-- | /Optional Param/ "analyze" - If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
instance HasOptionalParam ExtractRecipeFromWebsite Analyze where
  applyOptionalParam req (Analyze xs) =
    req `addQuery` toQuery ("analyze", Just xs)

-- | /Optional Param/ "includeNutrition" - Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam ExtractRecipeFromWebsite IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `addQuery` toQuery ("includeNutrition", Just xs)

-- | /Optional Param/ "includeTaste" - Whether taste data should be added to correctly parsed ingredients.
instance HasOptionalParam ExtractRecipeFromWebsite IncludeTaste where
  applyOptionalParam req (IncludeTaste xs) =
    req `addQuery` toQuery ("includeTaste", Just xs)
-- | @application/json@
instance Produces ExtractRecipeFromWebsite MimeJSON


-- *** getAnalyzedRecipeInstructions

-- | @GET \/recipes\/{id}\/analyzedInstructions@
-- 
-- Get Analyzed Recipe Instructions
-- 
-- Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getAnalyzedRecipeInstructions
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetAnalyzedRecipeInstructions MimeNoContent GetAnalyzedRecipeInstructions200Response MimeJSON
getAnalyzedRecipeInstructions (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/analyzedInstructions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetAnalyzedRecipeInstructions  

-- | /Optional Param/ "stepBreakdown" - Whether to break down the recipe steps even more.
instance HasOptionalParam GetAnalyzedRecipeInstructions StepBreakdown where
  applyOptionalParam req (StepBreakdown xs) =
    req `addQuery` toQuery ("stepBreakdown", Just xs)
-- | @application/json@
instance Produces GetAnalyzedRecipeInstructions MimeJSON


-- *** getRandomRecipes

-- | @GET \/recipes\/random@
-- 
-- Get Random Recipes
-- 
-- Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRandomRecipes
  :: SpoonacularRequest GetRandomRecipes MimeNoContent GetRandomRecipes200Response MimeJSON
getRandomRecipes =
  _mkRequest "GET" ["/recipes/random"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRandomRecipes  

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam GetRandomRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `addQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "tags" - The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
instance HasOptionalParam GetRandomRecipes Tags where
  applyOptionalParam req (Tags xs) =
    req `addQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam GetRandomRecipes Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces GetRandomRecipes MimeJSON


-- *** getRecipeEquipmentByID

-- | @GET \/recipes\/{id}\/equipmentWidget.json@
-- 
-- Equipment by ID
-- 
-- Get a recipe's equipment list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeEquipmentByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetRecipeEquipmentByID MimeNoContent GetRecipeEquipmentByID200Response MimeJSON
getRecipeEquipmentByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeEquipmentByID  
-- | @application/json@
instance Produces GetRecipeEquipmentByID MimeJSON


-- *** getRecipeInformation

-- | @GET \/recipes\/{id}\/information@
-- 
-- Get Recipe Information
-- 
-- Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeInformation
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetRecipeInformation MimeNoContent GetRecipeInformation200Response MimeJSON
getRecipeInformation (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/information"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeInformation  

-- | /Optional Param/ "includeNutrition" - Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam GetRecipeInformation IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `addQuery` toQuery ("includeNutrition", Just xs)
-- | @application/json@
instance Produces GetRecipeInformation MimeJSON


-- *** getRecipeInformationBulk

-- | @GET \/recipes\/informationBulk@
-- 
-- Get Recipe Information Bulk
-- 
-- Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeInformationBulk
  :: Ids -- ^ "ids" -  A comma-separated list of recipe ids.
  -> SpoonacularRequest GetRecipeInformationBulk MimeNoContent [GetRecipeInformationBulk200ResponseInner] MimeJSON
getRecipeInformationBulk (Ids ids) =
  _mkRequest "GET" ["/recipes/informationBulk"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("ids", Just ids)

data GetRecipeInformationBulk  

-- | /Optional Param/ "includeNutrition" - Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
instance HasOptionalParam GetRecipeInformationBulk IncludeNutrition where
  applyOptionalParam req (IncludeNutrition xs) =
    req `addQuery` toQuery ("includeNutrition", Just xs)
-- | @application/json@
instance Produces GetRecipeInformationBulk MimeJSON


-- *** getRecipeIngredientsByID

-- | @GET \/recipes\/{id}\/ingredientWidget.json@
-- 
-- Ingredients by ID
-- 
-- Get a recipe's ingredient list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeIngredientsByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetRecipeIngredientsByID MimeNoContent GetRecipeIngredientsByID200Response MimeJSON
getRecipeIngredientsByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeIngredientsByID  
-- | @application/json@
instance Produces GetRecipeIngredientsByID MimeJSON


-- *** getRecipeNutritionWidgetByID

-- | @GET \/recipes\/{id}\/nutritionWidget.json@
-- 
-- Nutrition by ID
-- 
-- Get a recipe's nutrition data.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeNutritionWidgetByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetRecipeNutritionWidgetByID MimeNoContent GetRecipeNutritionWidgetByID200Response MimeJSON
getRecipeNutritionWidgetByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeNutritionWidgetByID  
-- | @application/json@
instance Produces GetRecipeNutritionWidgetByID MimeJSON


-- *** getRecipePriceBreakdownByID

-- | @GET \/recipes\/{id}\/priceBreakdownWidget.json@
-- 
-- Price Breakdown by ID
-- 
-- Get a recipe's price breakdown data.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipePriceBreakdownByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetRecipePriceBreakdownByID MimeNoContent GetRecipePriceBreakdownByID200Response MimeJSON
getRecipePriceBreakdownByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipePriceBreakdownByID  
-- | @application/json@
instance Produces GetRecipePriceBreakdownByID MimeJSON


-- *** getRecipeTasteByID

-- | @GET \/recipes\/{id}\/tasteWidget.json@
-- 
-- Taste by ID
-- 
-- Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getRecipeTasteByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetRecipeTasteByID MimeNoContent GetRecipeTasteByID200Response MimeJSON
getRecipeTasteByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/tasteWidget.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetRecipeTasteByID  

-- | /Optional Param/ "normalize" - Normalize to the strongest taste.
instance HasOptionalParam GetRecipeTasteByID Normalize where
  applyOptionalParam req (Normalize xs) =
    req `addQuery` toQuery ("normalize", Just xs)
-- | @application/json@
instance Produces GetRecipeTasteByID MimeJSON


-- *** getSimilarRecipes

-- | @GET \/recipes\/{id}\/similar@
-- 
-- Get Similar Recipes
-- 
-- Find recipes which are similar to the given one.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getSimilarRecipes
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetSimilarRecipes MimeNoContent [GetSimilarRecipes200ResponseInner] MimeJSON
getSimilarRecipes (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/similar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetSimilarRecipes  

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam GetSimilarRecipes Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam GetSimilarRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `addQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces GetSimilarRecipes MimeJSON


-- *** guessNutritionByDishName

-- | @GET \/recipes\/guessNutrition@
-- 
-- Guess Nutrition by Dish Name
-- 
-- Estimate the macronutrients of a dish based on its title.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
guessNutritionByDishName
  :: Title -- ^ "title" -  The title of the dish.
  -> SpoonacularRequest GuessNutritionByDishName MimeNoContent GuessNutritionByDishName200Response MimeJSON
guessNutritionByDishName (Title title) =
  _mkRequest "GET" ["/recipes/guessNutrition"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("title", Just title)

data GuessNutritionByDishName  
-- | @application/json@
instance Produces GuessNutritionByDishName MimeJSON


-- *** ingredientsByIDImage0

-- | @GET \/recipes\/{id}\/ingredientWidget.png@
-- 
-- Ingredients by ID Image
-- 
-- Visualize a recipe's ingredient list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
ingredientsByIDImage0
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest IngredientsByIDImage0 MimeNoContent A.Value MimeImagePng
ingredientsByIDImage0 (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data IngredientsByIDImage0  

-- | /Optional Param/ "measure" - Whether the the measures should be 'us' or 'metric'.
instance HasOptionalParam IngredientsByIDImage0 Measure where
  applyOptionalParam req (Measure xs) =
    req `addQuery` toQuery ("measure", Just xs)
-- | @image/png@
instance Produces IngredientsByIDImage0 MimeImagePng


-- *** parseIngredients

-- | @POST \/recipes\/parseIngredients@
-- 
-- Parse Ingredients
-- 
-- Extract an ingredient from plain text.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
parseIngredients
  :: SpoonacularRequest ParseIngredients MimeNoContent [ParseIngredients200ResponseInner] MimeJSON
parseIngredients =
  _mkRequest "POST" ["/recipes/parseIngredients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data ParseIngredients  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam ParseIngredients ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | /Optional Param/ "language" - The language of the input. Either 'en' or 'de'.
instance HasOptionalParam ParseIngredients Language where
  applyOptionalParam req (Language xs) =
    req `addQuery` toQuery ("language", Just xs)

-- | @application/x-www-form-urlencoded@
instance Consumes ParseIngredients MimeFormUrlEncoded

-- | @application/json@
instance Produces ParseIngredients MimeJSON


-- *** priceBreakdownByIDImage

-- | @GET \/recipes\/{id}\/priceBreakdownWidget.png@
-- 
-- Price Breakdown by ID Image
-- 
-- Visualize a recipe's price breakdown.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
priceBreakdownByIDImage
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest PriceBreakdownByIDImage MimeNoContent A.Value MimeImagePng
priceBreakdownByIDImage (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data PriceBreakdownByIDImage  
-- | @image/png@
instance Produces PriceBreakdownByIDImage MimeImagePng


-- *** quickAnswer

-- | @GET \/recipes\/quickAnswer@
-- 
-- Quick Answer
-- 
-- Answer a nutrition related natural language question.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
quickAnswer
  :: Q -- ^ "q" -  The nutrition related question.
  -> SpoonacularRequest QuickAnswer MimeNoContent QuickAnswer200Response MimeJSON
quickAnswer (Q q) =
  _mkRequest "GET" ["/recipes/quickAnswer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("q", Just q)

data QuickAnswer  
-- | @application/json@
instance Produces QuickAnswer MimeJSON


-- *** recipeNutritionByIDImage

-- | @GET \/recipes\/{id}\/nutritionWidget.png@
-- 
-- Recipe Nutrition by ID Image
-- 
-- Visualize a recipe's nutritional information as an image.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
recipeNutritionByIDImage
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest RecipeNutritionByIDImage MimeNoContent A.Value MimeImagePng
recipeNutritionByIDImage (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data RecipeNutritionByIDImage  
-- | @image/png@
instance Produces RecipeNutritionByIDImage MimeImagePng


-- *** recipeNutritionLabelImage

-- | @GET \/recipes\/{id}\/nutritionLabel.png@
-- 
-- Recipe Nutrition Label Image
-- 
-- Get a recipe's nutrition label as an image.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
recipeNutritionLabelImage
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest RecipeNutritionLabelImage MimeNoContent A.Value MimeImagePng
recipeNutritionLabelImage (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionLabel.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data RecipeNutritionLabelImage  

-- | /Optional Param/ "showOptionalNutrients" - Whether to show optional nutrients.
instance HasOptionalParam RecipeNutritionLabelImage ShowOptionalNutrients where
  applyOptionalParam req (ShowOptionalNutrients xs) =
    req `addQuery` toQuery ("showOptionalNutrients", Just xs)

-- | /Optional Param/ "showZeroValues" - Whether to show zero values.
instance HasOptionalParam RecipeNutritionLabelImage ShowZeroValues where
  applyOptionalParam req (ShowZeroValues xs) =
    req `addQuery` toQuery ("showZeroValues", Just xs)

-- | /Optional Param/ "showIngredients" - Whether to show a list of ingredients.
instance HasOptionalParam RecipeNutritionLabelImage ShowIngredients where
  applyOptionalParam req (ShowIngredients xs) =
    req `addQuery` toQuery ("showIngredients", Just xs)
-- | @image/png@
instance Produces RecipeNutritionLabelImage MimeImagePng


-- *** recipeNutritionLabelWidget

-- | @GET \/recipes\/{id}\/nutritionLabel@
-- 
-- Recipe Nutrition Label Widget
-- 
-- Get a recipe's nutrition label as an HTML widget.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
recipeNutritionLabelWidget
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest RecipeNutritionLabelWidget MimeNoContent Text MimeTextHtml
recipeNutritionLabelWidget (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionLabel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data RecipeNutritionLabelWidget  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam RecipeNutritionLabelWidget DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)

-- | /Optional Param/ "showOptionalNutrients" - Whether to show optional nutrients.
instance HasOptionalParam RecipeNutritionLabelWidget ShowOptionalNutrients where
  applyOptionalParam req (ShowOptionalNutrients xs) =
    req `addQuery` toQuery ("showOptionalNutrients", Just xs)

-- | /Optional Param/ "showZeroValues" - Whether to show zero values.
instance HasOptionalParam RecipeNutritionLabelWidget ShowZeroValues where
  applyOptionalParam req (ShowZeroValues xs) =
    req `addQuery` toQuery ("showZeroValues", Just xs)

-- | /Optional Param/ "showIngredients" - Whether to show a list of ingredients.
instance HasOptionalParam RecipeNutritionLabelWidget ShowIngredients where
  applyOptionalParam req (ShowIngredients xs) =
    req `addQuery` toQuery ("showIngredients", Just xs)
-- | @text/html@
instance Produces RecipeNutritionLabelWidget MimeTextHtml


-- *** recipeTasteByIDImage

-- | @GET \/recipes\/{id}\/tasteWidget.png@
-- 
-- Recipe Taste by ID Image
-- 
-- Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
recipeTasteByIDImage
  :: IdDouble -- ^ "id" -  The recipe id.
  -> SpoonacularRequest RecipeTasteByIDImage MimeNoContent A.Value MimeImagePng
recipeTasteByIDImage (IdDouble id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/tasteWidget.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data RecipeTasteByIDImage  

-- | /Optional Param/ "normalize" - Normalize to the strongest taste.
instance HasOptionalParam RecipeTasteByIDImage Normalize where
  applyOptionalParam req (Normalize xs) =
    req `addQuery` toQuery ("normalize", Just xs)

-- | /Optional Param/ "rgb" - Red, green, blue values for the chart color.
instance HasOptionalParam RecipeTasteByIDImage Rgb where
  applyOptionalParam req (Rgb xs) =
    req `addQuery` toQuery ("rgb", Just xs)
-- | @image/png@
instance Produces RecipeTasteByIDImage MimeImagePng


-- *** searchRecipes

-- | @GET \/recipes\/complexSearch@
-- 
-- Search Recipes
-- 
-- Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchRecipes
  :: SpoonacularRequest SearchRecipes MimeNoContent SearchRecipes200Response MimeJSON
searchRecipes =
  _mkRequest "GET" ["/recipes/complexSearch"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchRecipes  

-- | /Optional Param/ "query" - The (natural language) search query.
instance HasOptionalParam SearchRecipes Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "cuisine" - The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
instance HasOptionalParam SearchRecipes Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `addQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "excludeCuisine" - The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
instance HasOptionalParam SearchRecipes ExcludeCuisine where
  applyOptionalParam req (ExcludeCuisine xs) =
    req `addQuery` toQuery ("excludeCuisine", Just xs)

-- | /Optional Param/ "diet" - The diet for which the recipes must be suitable. See a full list of supported diets.
instance HasOptionalParam SearchRecipes Diet where
  applyOptionalParam req (Diet xs) =
    req `addQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
instance HasOptionalParam SearchRecipes Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `addQuery` toQuery ("intolerances", Just xs)

-- | /Optional Param/ "equipment" - The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
instance HasOptionalParam SearchRecipes Equipment where
  applyOptionalParam req (Equipment xs) =
    req `addQuery` toQuery ("equipment", Just xs)

-- | /Optional Param/ "includeIngredients" - A comma-separated list of ingredients that should/must be used in the recipes.
instance HasOptionalParam SearchRecipes IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `addQuery` toQuery ("includeIngredients", Just xs)

-- | /Optional Param/ "excludeIngredients" - A comma-separated list of ingredients or ingredient types that the recipes must not contain.
instance HasOptionalParam SearchRecipes ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `addQuery` toQuery ("excludeIngredients", Just xs)

-- | /Optional Param/ "type" - The type of recipe. See a full list of supported meal types.
instance HasOptionalParam SearchRecipes ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "instructionsRequired" - Whether the recipes must have instructions.
instance HasOptionalParam SearchRecipes InstructionsRequired where
  applyOptionalParam req (InstructionsRequired xs) =
    req `addQuery` toQuery ("instructionsRequired", Just xs)

-- | /Optional Param/ "fillIngredients" - Add information about the ingredients and whether they are used or missing in relation to the query.
instance HasOptionalParam SearchRecipes FillIngredients where
  applyOptionalParam req (FillIngredients xs) =
    req `addQuery` toQuery ("fillIngredients", Just xs)

-- | /Optional Param/ "addRecipeInformation" - If set to true, you get more information about the recipes returned.
instance HasOptionalParam SearchRecipes AddRecipeInformation where
  applyOptionalParam req (AddRecipeInformation xs) =
    req `addQuery` toQuery ("addRecipeInformation", Just xs)

-- | /Optional Param/ "addRecipeNutrition" - If set to true, you get nutritional information about each recipes returned.
instance HasOptionalParam SearchRecipes AddRecipeNutrition where
  applyOptionalParam req (AddRecipeNutrition xs) =
    req `addQuery` toQuery ("addRecipeNutrition", Just xs)

-- | /Optional Param/ "author" - The username of the recipe author.
instance HasOptionalParam SearchRecipes Author where
  applyOptionalParam req (Author xs) =
    req `addQuery` toQuery ("author", Just xs)

-- | /Optional Param/ "tags" - The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
instance HasOptionalParam SearchRecipes Tags where
  applyOptionalParam req (Tags xs) =
    req `addQuery` toQuery ("tags", Just xs)

-- | /Optional Param/ "recipeBoxId" - The id of the recipe box to which the search should be limited to.
instance HasOptionalParam SearchRecipes RecipeBoxId where
  applyOptionalParam req (RecipeBoxId xs) =
    req `addQuery` toQuery ("recipeBoxId", Just xs)

-- | /Optional Param/ "titleMatch" - Enter text that must be found in the title of the recipes.
instance HasOptionalParam SearchRecipes TitleMatch where
  applyOptionalParam req (TitleMatch xs) =
    req `addQuery` toQuery ("titleMatch", Just xs)

-- | /Optional Param/ "maxReadyTime" - The maximum time in minutes it should take to prepare and cook the recipe.
instance HasOptionalParam SearchRecipes MaxReadyTime where
  applyOptionalParam req (MaxReadyTime xs) =
    req `addQuery` toQuery ("maxReadyTime", Just xs)

-- | /Optional Param/ "ignorePantry" - Whether to ignore typical pantry items, such as water, salt, flour, etc.
instance HasOptionalParam SearchRecipes IgnorePantry where
  applyOptionalParam req (IgnorePantry xs) =
    req `addQuery` toQuery ("ignorePantry", Just xs)

-- | /Optional Param/ "sort" - The strategy to sort recipes by. See a full list of supported sorting options.
instance HasOptionalParam SearchRecipes Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "sortDirection" - The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
instance HasOptionalParam SearchRecipes SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `addQuery` toQuery ("sortDirection", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `addQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `addQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `addQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `addQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minCalories" - The minimum amount of calories the recipe must have.
instance HasOptionalParam SearchRecipes MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `addQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the recipe can have.
instance HasOptionalParam SearchRecipes MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `addQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinFat where
  applyOptionalParam req (MinFat xs) =
    req `addQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `addQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "minAlcohol" - The minimum amount of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `addQuery` toQuery ("minAlcohol", Just xs)

-- | /Optional Param/ "maxAlcohol" - The maximum amount of alcohol in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `addQuery` toQuery ("maxAlcohol", Just xs)

-- | /Optional Param/ "minCaffeine" - The minimum amount of caffeine in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `addQuery` toQuery ("minCaffeine", Just xs)

-- | /Optional Param/ "maxCaffeine" - The maximum amount of caffeine in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `addQuery` toQuery ("maxCaffeine", Just xs)

-- | /Optional Param/ "minCopper" - The minimum amount of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `addQuery` toQuery ("minCopper", Just xs)

-- | /Optional Param/ "maxCopper" - The maximum amount of copper in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `addQuery` toQuery ("maxCopper", Just xs)

-- | /Optional Param/ "minCalcium" - The minimum amount of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `addQuery` toQuery ("minCalcium", Just xs)

-- | /Optional Param/ "maxCalcium" - The maximum amount of calcium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `addQuery` toQuery ("maxCalcium", Just xs)

-- | /Optional Param/ "minCholine" - The minimum amount of choline in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `addQuery` toQuery ("minCholine", Just xs)

-- | /Optional Param/ "maxCholine" - The maximum amount of choline in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `addQuery` toQuery ("maxCholine", Just xs)

-- | /Optional Param/ "minCholesterol" - The minimum amount of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `addQuery` toQuery ("minCholesterol", Just xs)

-- | /Optional Param/ "maxCholesterol" - The maximum amount of cholesterol in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `addQuery` toQuery ("maxCholesterol", Just xs)

-- | /Optional Param/ "minFluoride" - The minimum amount of fluoride in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `addQuery` toQuery ("minFluoride", Just xs)

-- | /Optional Param/ "maxFluoride" - The maximum amount of fluoride in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `addQuery` toQuery ("maxFluoride", Just xs)

-- | /Optional Param/ "minSaturatedFat" - The minimum amount of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `addQuery` toQuery ("minSaturatedFat", Just xs)

-- | /Optional Param/ "maxSaturatedFat" - The maximum amount of saturated fat in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `addQuery` toQuery ("maxSaturatedFat", Just xs)

-- | /Optional Param/ "minVitaminA" - The minimum amount of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `addQuery` toQuery ("minVitaminA", Just xs)

-- | /Optional Param/ "maxVitaminA" - The maximum amount of Vitamin A in IU the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `addQuery` toQuery ("maxVitaminA", Just xs)

-- | /Optional Param/ "minVitaminC" - The minimum amount of Vitamin C milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `addQuery` toQuery ("minVitaminC", Just xs)

-- | /Optional Param/ "maxVitaminC" - The maximum amount of Vitamin C in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `addQuery` toQuery ("maxVitaminC", Just xs)

-- | /Optional Param/ "minVitaminD" - The minimum amount of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `addQuery` toQuery ("minVitaminD", Just xs)

-- | /Optional Param/ "maxVitaminD" - The maximum amount of Vitamin D in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `addQuery` toQuery ("maxVitaminD", Just xs)

-- | /Optional Param/ "minVitaminE" - The minimum amount of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `addQuery` toQuery ("minVitaminE", Just xs)

-- | /Optional Param/ "maxVitaminE" - The maximum amount of Vitamin E in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `addQuery` toQuery ("maxVitaminE", Just xs)

-- | /Optional Param/ "minVitaminK" - The minimum amount of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `addQuery` toQuery ("minVitaminK", Just xs)

-- | /Optional Param/ "maxVitaminK" - The maximum amount of Vitamin K in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `addQuery` toQuery ("maxVitaminK", Just xs)

-- | /Optional Param/ "minVitaminB1" - The minimum amount of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `addQuery` toQuery ("minVitaminB1", Just xs)

-- | /Optional Param/ "maxVitaminB1" - The maximum amount of Vitamin B1 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `addQuery` toQuery ("maxVitaminB1", Just xs)

-- | /Optional Param/ "minVitaminB2" - The minimum amount of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `addQuery` toQuery ("minVitaminB2", Just xs)

-- | /Optional Param/ "maxVitaminB2" - The maximum amount of Vitamin B2 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `addQuery` toQuery ("maxVitaminB2", Just xs)

-- | /Optional Param/ "minVitaminB5" - The minimum amount of Vitamin B5 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `addQuery` toQuery ("minVitaminB5", Just xs)

-- | /Optional Param/ "maxVitaminB5" - The maximum amount of Vitamin B5 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `addQuery` toQuery ("maxVitaminB5", Just xs)

-- | /Optional Param/ "minVitaminB3" - The minimum amount of Vitamin B3 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `addQuery` toQuery ("minVitaminB3", Just xs)

-- | /Optional Param/ "maxVitaminB3" - The maximum amount of Vitamin B3 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `addQuery` toQuery ("maxVitaminB3", Just xs)

-- | /Optional Param/ "minVitaminB6" - The minimum amount of Vitamin B6 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `addQuery` toQuery ("minVitaminB6", Just xs)

-- | /Optional Param/ "maxVitaminB6" - The maximum amount of Vitamin B6 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `addQuery` toQuery ("maxVitaminB6", Just xs)

-- | /Optional Param/ "minVitaminB12" - The minimum amount of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `addQuery` toQuery ("minVitaminB12", Just xs)

-- | /Optional Param/ "maxVitaminB12" - The maximum amount of Vitamin B12 in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `addQuery` toQuery ("maxVitaminB12", Just xs)

-- | /Optional Param/ "minFiber" - The minimum amount of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `addQuery` toQuery ("minFiber", Just xs)

-- | /Optional Param/ "maxFiber" - The maximum amount of fiber in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `addQuery` toQuery ("maxFiber", Just xs)

-- | /Optional Param/ "minFolate" - The minimum amount of folate in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `addQuery` toQuery ("minFolate", Just xs)

-- | /Optional Param/ "maxFolate" - The maximum amount of folate in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `addQuery` toQuery ("maxFolate", Just xs)

-- | /Optional Param/ "minFolicAcid" - The minimum amount of folic acid in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `addQuery` toQuery ("minFolicAcid", Just xs)

-- | /Optional Param/ "maxFolicAcid" - The maximum amount of folic acid in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `addQuery` toQuery ("maxFolicAcid", Just xs)

-- | /Optional Param/ "minIodine" - The minimum amount of iodine in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `addQuery` toQuery ("minIodine", Just xs)

-- | /Optional Param/ "maxIodine" - The maximum amount of iodine in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `addQuery` toQuery ("maxIodine", Just xs)

-- | /Optional Param/ "minIron" - The minimum amount of iron in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinIron where
  applyOptionalParam req (MinIron xs) =
    req `addQuery` toQuery ("minIron", Just xs)

-- | /Optional Param/ "maxIron" - The maximum amount of iron in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `addQuery` toQuery ("maxIron", Just xs)

-- | /Optional Param/ "minMagnesium" - The minimum amount of magnesium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `addQuery` toQuery ("minMagnesium", Just xs)

-- | /Optional Param/ "maxMagnesium" - The maximum amount of magnesium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `addQuery` toQuery ("maxMagnesium", Just xs)

-- | /Optional Param/ "minManganese" - The minimum amount of manganese in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `addQuery` toQuery ("minManganese", Just xs)

-- | /Optional Param/ "maxManganese" - The maximum amount of manganese in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `addQuery` toQuery ("maxManganese", Just xs)

-- | /Optional Param/ "minPhosphorus" - The minimum amount of phosphorus in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `addQuery` toQuery ("minPhosphorus", Just xs)

-- | /Optional Param/ "maxPhosphorus" - The maximum amount of phosphorus in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `addQuery` toQuery ("maxPhosphorus", Just xs)

-- | /Optional Param/ "minPotassium" - The minimum amount of potassium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `addQuery` toQuery ("minPotassium", Just xs)

-- | /Optional Param/ "maxPotassium" - The maximum amount of potassium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `addQuery` toQuery ("maxPotassium", Just xs)

-- | /Optional Param/ "minSelenium" - The minimum amount of selenium in micrograms the recipe must have.
instance HasOptionalParam SearchRecipes MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `addQuery` toQuery ("minSelenium", Just xs)

-- | /Optional Param/ "maxSelenium" - The maximum amount of selenium in micrograms the recipe can have.
instance HasOptionalParam SearchRecipes MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `addQuery` toQuery ("maxSelenium", Just xs)

-- | /Optional Param/ "minSodium" - The minimum amount of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `addQuery` toQuery ("minSodium", Just xs)

-- | /Optional Param/ "maxSodium" - The maximum amount of sodium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `addQuery` toQuery ("maxSodium", Just xs)

-- | /Optional Param/ "minSugar" - The minimum amount of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipes MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `addQuery` toQuery ("minSugar", Just xs)

-- | /Optional Param/ "maxSugar" - The maximum amount of sugar in grams the recipe can have.
instance HasOptionalParam SearchRecipes MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `addQuery` toQuery ("maxSugar", Just xs)

-- | /Optional Param/ "minZinc" - The minimum amount of zinc in milligrams the recipe must have.
instance HasOptionalParam SearchRecipes MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `addQuery` toQuery ("minZinc", Just xs)

-- | /Optional Param/ "maxZinc" - The maximum amount of zinc in milligrams the recipe can have.
instance HasOptionalParam SearchRecipes MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `addQuery` toQuery ("maxZinc", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchRecipes Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchRecipes Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam SearchRecipes LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `addQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces SearchRecipes MimeJSON


-- *** searchRecipesByIngredients

-- | @GET \/recipes\/findByIngredients@
-- 
-- Search Recipes by Ingredients
-- 
--  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchRecipesByIngredients
  :: SpoonacularRequest SearchRecipesByIngredients MimeNoContent [SearchRecipesByIngredients200ResponseInner] MimeJSON
searchRecipesByIngredients =
  _mkRequest "GET" ["/recipes/findByIngredients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchRecipesByIngredients  

-- | /Optional Param/ "ingredients" - A comma-separated list of ingredients that the recipes should contain.
instance HasOptionalParam SearchRecipesByIngredients Ingredients where
  applyOptionalParam req (Ingredients xs) =
    req `addQuery` toQuery ("ingredients", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchRecipesByIngredients Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam SearchRecipesByIngredients LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `addQuery` toQuery ("limitLicense", Just xs)

-- | /Optional Param/ "ranking" - Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
instance HasOptionalParam SearchRecipesByIngredients Ranking where
  applyOptionalParam req (Ranking xs) =
    req `addQuery` toQuery ("ranking", Just xs)

-- | /Optional Param/ "ignorePantry" - Whether to ignore typical pantry items, such as water, salt, flour, etc.
instance HasOptionalParam SearchRecipesByIngredients IgnorePantry where
  applyOptionalParam req (IgnorePantry xs) =
    req `addQuery` toQuery ("ignorePantry", Just xs)
-- | @application/json@
instance Produces SearchRecipesByIngredients MimeJSON


-- *** searchRecipesByNutrients

-- | @GET \/recipes\/findByNutrients@
-- 
-- Search Recipes by Nutrients
-- 
-- Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchRecipesByNutrients
  :: SpoonacularRequest SearchRecipesByNutrients MimeNoContent [SearchRecipesByNutrients200ResponseInner] MimeJSON
searchRecipesByNutrients =
  _mkRequest "GET" ["/recipes/findByNutrients"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchRecipesByNutrients  

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `addQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `addQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `addQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `addQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minCalories" - The minimum amount of calories the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `addQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `addQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFat where
  applyOptionalParam req (MinFat xs) =
    req `addQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `addQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "minAlcohol" - The minimum amount of alcohol in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `addQuery` toQuery ("minAlcohol", Just xs)

-- | /Optional Param/ "maxAlcohol" - The maximum amount of alcohol in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `addQuery` toQuery ("maxAlcohol", Just xs)

-- | /Optional Param/ "minCaffeine" - The minimum amount of caffeine in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `addQuery` toQuery ("minCaffeine", Just xs)

-- | /Optional Param/ "maxCaffeine" - The maximum amount of caffeine in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `addQuery` toQuery ("maxCaffeine", Just xs)

-- | /Optional Param/ "minCopper" - The minimum amount of copper in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `addQuery` toQuery ("minCopper", Just xs)

-- | /Optional Param/ "maxCopper" - The maximum amount of copper in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `addQuery` toQuery ("maxCopper", Just xs)

-- | /Optional Param/ "minCalcium" - The minimum amount of calcium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `addQuery` toQuery ("minCalcium", Just xs)

-- | /Optional Param/ "maxCalcium" - The maximum amount of calcium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `addQuery` toQuery ("maxCalcium", Just xs)

-- | /Optional Param/ "minCholine" - The minimum amount of choline in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `addQuery` toQuery ("minCholine", Just xs)

-- | /Optional Param/ "maxCholine" - The maximum amount of choline in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `addQuery` toQuery ("maxCholine", Just xs)

-- | /Optional Param/ "minCholesterol" - The minimum amount of cholesterol in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `addQuery` toQuery ("minCholesterol", Just xs)

-- | /Optional Param/ "maxCholesterol" - The maximum amount of cholesterol in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `addQuery` toQuery ("maxCholesterol", Just xs)

-- | /Optional Param/ "minFluoride" - The minimum amount of fluoride in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `addQuery` toQuery ("minFluoride", Just xs)

-- | /Optional Param/ "maxFluoride" - The maximum amount of fluoride in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `addQuery` toQuery ("maxFluoride", Just xs)

-- | /Optional Param/ "minSaturatedFat" - The minimum amount of saturated fat in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `addQuery` toQuery ("minSaturatedFat", Just xs)

-- | /Optional Param/ "maxSaturatedFat" - The maximum amount of saturated fat in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `addQuery` toQuery ("maxSaturatedFat", Just xs)

-- | /Optional Param/ "minVitaminA" - The minimum amount of Vitamin A in IU the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `addQuery` toQuery ("minVitaminA", Just xs)

-- | /Optional Param/ "maxVitaminA" - The maximum amount of Vitamin A in IU the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `addQuery` toQuery ("maxVitaminA", Just xs)

-- | /Optional Param/ "minVitaminC" - The minimum amount of Vitamin C in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `addQuery` toQuery ("minVitaminC", Just xs)

-- | /Optional Param/ "maxVitaminC" - The maximum amount of Vitamin C in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `addQuery` toQuery ("maxVitaminC", Just xs)

-- | /Optional Param/ "minVitaminD" - The minimum amount of Vitamin D in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `addQuery` toQuery ("minVitaminD", Just xs)

-- | /Optional Param/ "maxVitaminD" - The maximum amount of Vitamin D in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `addQuery` toQuery ("maxVitaminD", Just xs)

-- | /Optional Param/ "minVitaminE" - The minimum amount of Vitamin E in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `addQuery` toQuery ("minVitaminE", Just xs)

-- | /Optional Param/ "maxVitaminE" - The maximum amount of Vitamin E in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `addQuery` toQuery ("maxVitaminE", Just xs)

-- | /Optional Param/ "minVitaminK" - The minimum amount of Vitamin K in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `addQuery` toQuery ("minVitaminK", Just xs)

-- | /Optional Param/ "maxVitaminK" - The maximum amount of Vitamin K in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `addQuery` toQuery ("maxVitaminK", Just xs)

-- | /Optional Param/ "minVitaminB1" - The minimum amount of Vitamin B1 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `addQuery` toQuery ("minVitaminB1", Just xs)

-- | /Optional Param/ "maxVitaminB1" - The maximum amount of Vitamin B1 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `addQuery` toQuery ("maxVitaminB1", Just xs)

-- | /Optional Param/ "minVitaminB2" - The minimum amount of Vitamin B2 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `addQuery` toQuery ("minVitaminB2", Just xs)

-- | /Optional Param/ "maxVitaminB2" - The maximum amount of Vitamin B2 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `addQuery` toQuery ("maxVitaminB2", Just xs)

-- | /Optional Param/ "minVitaminB5" - The minimum amount of Vitamin B5 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `addQuery` toQuery ("minVitaminB5", Just xs)

-- | /Optional Param/ "maxVitaminB5" - The maximum amount of Vitamin B5 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `addQuery` toQuery ("maxVitaminB5", Just xs)

-- | /Optional Param/ "minVitaminB3" - The minimum amount of Vitamin B3 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `addQuery` toQuery ("minVitaminB3", Just xs)

-- | /Optional Param/ "maxVitaminB3" - The maximum amount of Vitamin B3 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `addQuery` toQuery ("maxVitaminB3", Just xs)

-- | /Optional Param/ "minVitaminB6" - The minimum amount of Vitamin B6 in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `addQuery` toQuery ("minVitaminB6", Just xs)

-- | /Optional Param/ "maxVitaminB6" - The maximum amount of Vitamin B6 in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `addQuery` toQuery ("maxVitaminB6", Just xs)

-- | /Optional Param/ "minVitaminB12" - The minimum amount of Vitamin B12 in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `addQuery` toQuery ("minVitaminB12", Just xs)

-- | /Optional Param/ "maxVitaminB12" - The maximum amount of Vitamin B12 in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `addQuery` toQuery ("maxVitaminB12", Just xs)

-- | /Optional Param/ "minFiber" - The minimum amount of fiber in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `addQuery` toQuery ("minFiber", Just xs)

-- | /Optional Param/ "maxFiber" - The maximum amount of fiber in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `addQuery` toQuery ("maxFiber", Just xs)

-- | /Optional Param/ "minFolate" - The minimum amount of folate in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `addQuery` toQuery ("minFolate", Just xs)

-- | /Optional Param/ "maxFolate" - The maximum amount of folate in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `addQuery` toQuery ("maxFolate", Just xs)

-- | /Optional Param/ "minFolicAcid" - The minimum amount of folic acid in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `addQuery` toQuery ("minFolicAcid", Just xs)

-- | /Optional Param/ "maxFolicAcid" - The maximum amount of folic acid in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `addQuery` toQuery ("maxFolicAcid", Just xs)

-- | /Optional Param/ "minIodine" - The minimum amount of iodine in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `addQuery` toQuery ("minIodine", Just xs)

-- | /Optional Param/ "maxIodine" - The maximum amount of iodine in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `addQuery` toQuery ("maxIodine", Just xs)

-- | /Optional Param/ "minIron" - The minimum amount of iron in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinIron where
  applyOptionalParam req (MinIron xs) =
    req `addQuery` toQuery ("minIron", Just xs)

-- | /Optional Param/ "maxIron" - The maximum amount of iron in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `addQuery` toQuery ("maxIron", Just xs)

-- | /Optional Param/ "minMagnesium" - The minimum amount of magnesium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `addQuery` toQuery ("minMagnesium", Just xs)

-- | /Optional Param/ "maxMagnesium" - The maximum amount of magnesium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `addQuery` toQuery ("maxMagnesium", Just xs)

-- | /Optional Param/ "minManganese" - The minimum amount of manganese in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `addQuery` toQuery ("minManganese", Just xs)

-- | /Optional Param/ "maxManganese" - The maximum amount of manganese in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `addQuery` toQuery ("maxManganese", Just xs)

-- | /Optional Param/ "minPhosphorus" - The minimum amount of phosphorus in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `addQuery` toQuery ("minPhosphorus", Just xs)

-- | /Optional Param/ "maxPhosphorus" - The maximum amount of phosphorus in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `addQuery` toQuery ("maxPhosphorus", Just xs)

-- | /Optional Param/ "minPotassium" - The minimum amount of potassium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `addQuery` toQuery ("minPotassium", Just xs)

-- | /Optional Param/ "maxPotassium" - The maximum amount of potassium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `addQuery` toQuery ("maxPotassium", Just xs)

-- | /Optional Param/ "minSelenium" - The minimum amount of selenium in micrograms the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `addQuery` toQuery ("minSelenium", Just xs)

-- | /Optional Param/ "maxSelenium" - The maximum amount of selenium in micrograms the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `addQuery` toQuery ("maxSelenium", Just xs)

-- | /Optional Param/ "minSodium" - The minimum amount of sodium in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `addQuery` toQuery ("minSodium", Just xs)

-- | /Optional Param/ "maxSodium" - The maximum amount of sodium in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `addQuery` toQuery ("maxSodium", Just xs)

-- | /Optional Param/ "minSugar" - The minimum amount of sugar in grams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `addQuery` toQuery ("minSugar", Just xs)

-- | /Optional Param/ "maxSugar" - The maximum amount of sugar in grams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `addQuery` toQuery ("maxSugar", Just xs)

-- | /Optional Param/ "minZinc" - The minimum amount of zinc in milligrams the recipe must have.
instance HasOptionalParam SearchRecipesByNutrients MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `addQuery` toQuery ("minZinc", Just xs)

-- | /Optional Param/ "maxZinc" - The maximum amount of zinc in milligrams the recipe can have.
instance HasOptionalParam SearchRecipesByNutrients MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `addQuery` toQuery ("maxZinc", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchRecipesByNutrients Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchRecipesByNutrients Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)

-- | /Optional Param/ "random" - If true, every request will give you a random set of recipes within the requested limits.
instance HasOptionalParam SearchRecipesByNutrients Random where
  applyOptionalParam req (Random xs) =
    req `addQuery` toQuery ("random", Just xs)

-- | /Optional Param/ "limitLicense" - Whether the recipes should have an open license that allows display with proper attribution.
instance HasOptionalParam SearchRecipesByNutrients LimitLicense where
  applyOptionalParam req (LimitLicense xs) =
    req `addQuery` toQuery ("limitLicense", Just xs)
-- | @application/json@
instance Produces SearchRecipesByNutrients MimeJSON


-- *** summarizeRecipe

-- | @GET \/recipes\/{id}\/summary@
-- 
-- Summarize Recipe
-- 
-- Automatically generate a short description that summarizes key information about the recipe.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
summarizeRecipe
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest SummarizeRecipe MimeNoContent SummarizeRecipe200Response MimeJSON
summarizeRecipe (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/summary"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SummarizeRecipe  
-- | @application/json@
instance Produces SummarizeRecipe MimeJSON


-- *** visualizeEquipment

-- | @POST \/recipes\/visualizeEquipment@
-- 
-- Equipment Widget
-- 
-- Visualize the equipment used to make a recipe.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeEquipment
  :: SpoonacularRequest VisualizeEquipment MimeNoContent Text MimeTextHtml
visualizeEquipment =
  _mkRequest "POST" ["/recipes/visualizeEquipment"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeEquipment  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam VisualizeEquipment ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | /Optional Param/ "Accept" - Accept header.
instance HasOptionalParam VisualizeEquipment ParamAccept where
  applyOptionalParam req (ParamAccept xs) =
    req `addHeader` toHeader ("Accept", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeEquipment MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeEquipment MimeTextHtml


-- *** visualizePriceBreakdown

-- | @POST \/recipes\/visualizePriceEstimator@
-- 
-- Price Breakdown Widget
-- 
-- Visualize the price breakdown of a recipe.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizePriceBreakdown
  :: SpoonacularRequest VisualizePriceBreakdown MimeNoContent Text MimeTextHtml
visualizePriceBreakdown =
  _mkRequest "POST" ["/recipes/visualizePriceEstimator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizePriceBreakdown  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam VisualizePriceBreakdown ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | /Optional Param/ "Accept" - Accept header.
instance HasOptionalParam VisualizePriceBreakdown ParamAccept where
  applyOptionalParam req (ParamAccept xs) =
    req `addHeader` toHeader ("Accept", xs)

-- | /Optional Param/ "language" - The language of the input. Either 'en' or 'de'.
instance HasOptionalParam VisualizePriceBreakdown Language where
  applyOptionalParam req (Language xs) =
    req `addQuery` toQuery ("language", Just xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizePriceBreakdown MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizePriceBreakdown MimeTextHtml


-- *** visualizeRecipeEquipmentByID

-- | @GET \/recipes\/{id}\/equipmentWidget@
-- 
-- Equipment by ID Widget
-- 
-- Visualize a recipe's equipment list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeEquipmentByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest VisualizeRecipeEquipmentByID MimeNoContent Text MimeTextHtml
visualizeRecipeEquipmentByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/equipmentWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeEquipmentByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeEquipmentByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeEquipmentByID MimeTextHtml


-- *** visualizeRecipeIngredientsByID

-- | @GET \/recipes\/{id}\/ingredientWidget@
-- 
-- Ingredients by ID Widget
-- 
-- Visualize a recipe's ingredient list.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeIngredientsByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest VisualizeRecipeIngredientsByID MimeNoContent Text MimeTextHtml
visualizeRecipeIngredientsByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/ingredientWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeIngredientsByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeIngredientsByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)

-- | /Optional Param/ "measure" - Whether the the measures should be 'us' or 'metric'.
instance HasOptionalParam VisualizeRecipeIngredientsByID Measure where
  applyOptionalParam req (Measure xs) =
    req `addQuery` toQuery ("measure", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeIngredientsByID MimeTextHtml


-- *** visualizeRecipeNutrition

-- | @POST \/recipes\/visualizeNutrition@
-- 
-- Recipe Nutrition Widget
-- 
-- Visualize a recipe's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeNutrition
  :: SpoonacularRequest VisualizeRecipeNutrition MimeNoContent Text MimeTextHtml
visualizeRecipeNutrition =
  _mkRequest "POST" ["/recipes/visualizeNutrition"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeNutrition  

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam VisualizeRecipeNutrition ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | /Optional Param/ "Accept" - Accept header.
instance HasOptionalParam VisualizeRecipeNutrition ParamAccept where
  applyOptionalParam req (ParamAccept xs) =
    req `addHeader` toHeader ("Accept", xs)

-- | /Optional Param/ "language" - The language of the input. Either 'en' or 'de'.
instance HasOptionalParam VisualizeRecipeNutrition Language where
  applyOptionalParam req (Language xs) =
    req `addQuery` toQuery ("language", Just xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeRecipeNutrition MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeRecipeNutrition MimeTextHtml


-- *** visualizeRecipeNutritionByID

-- | @GET \/recipes\/{id}\/nutritionWidget@
-- 
-- Recipe Nutrition by ID Widget
-- 
-- Visualize a recipe's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeNutritionByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest VisualizeRecipeNutritionByID MimeNoContent Text MimeTextHtml
visualizeRecipeNutritionByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/nutritionWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipeNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)

-- | /Optional Param/ "Accept" - Accept header.
instance HasOptionalParam VisualizeRecipeNutritionByID ParamAccept where
  applyOptionalParam req (ParamAccept xs) =
    req `addHeader` toHeader ("Accept", xs)
-- | @text/html@
instance Produces VisualizeRecipeNutritionByID MimeTextHtml


-- *** visualizeRecipePriceBreakdownByID

-- | @GET \/recipes\/{id}\/priceBreakdownWidget@
-- 
-- Price Breakdown by ID Widget
-- 
-- Visualize a recipe's price breakdown.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipePriceBreakdownByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest VisualizeRecipePriceBreakdownByID MimeNoContent Text MimeTextHtml
visualizeRecipePriceBreakdownByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/priceBreakdownWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipePriceBreakdownByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeRecipePriceBreakdownByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeRecipePriceBreakdownByID MimeTextHtml


-- *** visualizeRecipeTaste

-- | @POST \/recipes\/visualizeTaste@
-- 
-- Recipe Taste Widget
-- 
-- Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeTaste
  :: SpoonacularRequest VisualizeRecipeTaste MimeNoContent Text MimeTextHtml
visualizeRecipeTaste =
  _mkRequest "POST" ["/recipes/visualizeTaste"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeTaste  

-- | /Optional Param/ "language" - The language of the input. Either 'en' or 'de'.
instance HasOptionalParam VisualizeRecipeTaste Language where
  applyOptionalParam req (Language xs) =
    req `addQuery` toQuery ("language", Just xs)

-- | /Optional Param/ "Content-Type" - The content type.
instance HasOptionalParam VisualizeRecipeTaste ParamContentType where
  applyOptionalParam req (ParamContentType xs) =
    req `addHeader` toHeader ("Content-Type", xs)

-- | /Optional Param/ "Accept" - Accept header.
instance HasOptionalParam VisualizeRecipeTaste ParamAccept where
  applyOptionalParam req (ParamAccept xs) =
    req `addHeader` toHeader ("Accept", xs)

-- | /Optional Param/ "normalize" - Whether to normalize to the strongest taste.
instance HasOptionalParam VisualizeRecipeTaste Normalize where
  applyOptionalParam req (Normalize xs) =
    req `addQuery` toQuery ("normalize", Just xs)

-- | /Optional Param/ "rgb" - Red, green, blue values for the chart color.
instance HasOptionalParam VisualizeRecipeTaste Rgb where
  applyOptionalParam req (Rgb xs) =
    req `addQuery` toQuery ("rgb", Just xs)

-- | @application/x-www-form-urlencoded@
instance Consumes VisualizeRecipeTaste MimeFormUrlEncoded

-- | @text/html@
instance Produces VisualizeRecipeTaste MimeTextHtml


-- *** visualizeRecipeTasteByID

-- | @GET \/recipes\/{id}\/tasteWidget@
-- 
-- Recipe Taste by ID Widget
-- 
-- Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeRecipeTasteByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest VisualizeRecipeTasteByID MimeNoContent Text MimeTextHtml
visualizeRecipeTasteByID (Id id) =
  _mkRequest "GET" ["/recipes/",toPath id,"/tasteWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeRecipeTasteByID  

-- | /Optional Param/ "normalize" - Whether to normalize to the strongest taste.
instance HasOptionalParam VisualizeRecipeTasteByID Normalize where
  applyOptionalParam req (Normalize xs) =
    req `addQuery` toQuery ("normalize", Just xs)

-- | /Optional Param/ "rgb" - Red, green, blue values for the chart color.
instance HasOptionalParam VisualizeRecipeTasteByID Rgb where
  applyOptionalParam req (Rgb xs) =
    req `addQuery` toQuery ("rgb", Just xs)
-- | @text/html@
instance Produces VisualizeRecipeTasteByID MimeTextHtml

