{-
   spoonacular API

   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   OpenAPI Version: 3.0.0
   spoonacular API API version: 1.1
   Contact: mail@spoonacular.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Spoonacular.API.MenuItems
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Spoonacular.API.MenuItems where

import Spoonacular.Core
import Spoonacular.MimeTypes
import Spoonacular.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** MenuItems

-- *** autocompleteMenuItemSearch

-- | @GET \/food\/menuItems\/suggest@
-- 
-- Autocomplete Menu Item Search
-- 
-- Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
autocompleteMenuItemSearch
  :: Query -- ^ "query" -  The (partial) search query.
  -> SpoonacularRequest AutocompleteMenuItemSearch MimeNoContent AutocompleteMenuItemSearch200Response MimeJSON
autocompleteMenuItemSearch (Query query) =
  _mkRequest "GET" ["/food/menuItems/suggest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)
    `addQuery` toQuery ("query", Just query)

data AutocompleteMenuItemSearch  

-- | /Optional Param/ "number" - The number of results to return (between 1 and 25).
instance HasOptionalParam AutocompleteMenuItemSearch NumberDouble where
  applyOptionalParam req (NumberDouble xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces AutocompleteMenuItemSearch MimeJSON


-- *** getMenuItemInformation

-- | @GET \/food\/menuItems\/{id}@
-- 
-- Get Menu Item Information
-- 
-- Use a menu item id to get all available information about a menu item, such as nutrition.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
getMenuItemInformation
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest GetMenuItemInformation MimeNoContent GetMenuItemInformation200Response MimeJSON
getMenuItemInformation (Id id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data GetMenuItemInformation  
-- | @application/json@
instance Produces GetMenuItemInformation MimeJSON


-- *** menuItemNutritionByIDImage

-- | @GET \/food\/menuItems\/{id}\/nutritionWidget.png@
-- 
-- Menu Item Nutrition by ID Image
-- 
-- Visualize a menu item's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
menuItemNutritionByIDImage
  :: IdDouble -- ^ "id" -  The menu item id.
  -> SpoonacularRequest MenuItemNutritionByIDImage MimeNoContent FilePath MimeImagePng
menuItemNutritionByIDImage (IdDouble id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id,"/nutritionWidget.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data MenuItemNutritionByIDImage  
-- | @image/png@
instance Produces MenuItemNutritionByIDImage MimeImagePng


-- *** menuItemNutritionLabelImage

-- | @GET \/food\/menuItems\/{id}\/nutritionLabel.png@
-- 
-- Menu Item Nutrition Label Image
-- 
-- Visualize a menu item's nutritional label information as an image.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
menuItemNutritionLabelImage
  :: IdDouble -- ^ "id" -  The menu item id.
  -> SpoonacularRequest MenuItemNutritionLabelImage MimeNoContent FilePath MimeImagePng
menuItemNutritionLabelImage (IdDouble id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id,"/nutritionLabel.png"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data MenuItemNutritionLabelImage  

-- | /Optional Param/ "showOptionalNutrients" - Whether to show optional nutrients.
instance HasOptionalParam MenuItemNutritionLabelImage ShowOptionalNutrients where
  applyOptionalParam req (ShowOptionalNutrients xs) =
    req `addQuery` toQuery ("showOptionalNutrients", Just xs)

-- | /Optional Param/ "showZeroValues" - Whether to show zero values.
instance HasOptionalParam MenuItemNutritionLabelImage ShowZeroValues where
  applyOptionalParam req (ShowZeroValues xs) =
    req `addQuery` toQuery ("showZeroValues", Just xs)

-- | /Optional Param/ "showIngredients" - Whether to show a list of ingredients.
instance HasOptionalParam MenuItemNutritionLabelImage ShowIngredients where
  applyOptionalParam req (ShowIngredients xs) =
    req `addQuery` toQuery ("showIngredients", Just xs)
-- | @image/png@
instance Produces MenuItemNutritionLabelImage MimeImagePng


-- *** menuItemNutritionLabelWidget

-- | @GET \/food\/menuItems\/{id}\/nutritionLabel@
-- 
-- Menu Item Nutrition Label Widget
-- 
-- Visualize a menu item's nutritional label information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
menuItemNutritionLabelWidget
  :: IdDouble -- ^ "id" -  The menu item id.
  -> SpoonacularRequest MenuItemNutritionLabelWidget MimeNoContent Text MimeTextHtml
menuItemNutritionLabelWidget (IdDouble id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id,"/nutritionLabel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data MenuItemNutritionLabelWidget  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam MenuItemNutritionLabelWidget DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)

-- | /Optional Param/ "showOptionalNutrients" - Whether to show optional nutrients.
instance HasOptionalParam MenuItemNutritionLabelWidget ShowOptionalNutrients where
  applyOptionalParam req (ShowOptionalNutrients xs) =
    req `addQuery` toQuery ("showOptionalNutrients", Just xs)

-- | /Optional Param/ "showZeroValues" - Whether to show zero values.
instance HasOptionalParam MenuItemNutritionLabelWidget ShowZeroValues where
  applyOptionalParam req (ShowZeroValues xs) =
    req `addQuery` toQuery ("showZeroValues", Just xs)

-- | /Optional Param/ "showIngredients" - Whether to show a list of ingredients.
instance HasOptionalParam MenuItemNutritionLabelWidget ShowIngredients where
  applyOptionalParam req (ShowIngredients xs) =
    req `addQuery` toQuery ("showIngredients", Just xs)
-- | @text/html@
instance Produces MenuItemNutritionLabelWidget MimeTextHtml


-- *** searchMenuItems

-- | @GET \/food\/menuItems\/search@
-- 
-- Search Menu Items
-- 
-- Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
searchMenuItems
  :: SpoonacularRequest SearchMenuItems MimeNoContent SearchMenuItems200Response MimeJSON
searchMenuItems =
  _mkRequest "GET" ["/food/menuItems/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data SearchMenuItems  

-- | /Optional Param/ "query" - The (natural language) search query.
instance HasOptionalParam SearchMenuItems Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "minCalories" - The minimum amount of calories the menu item must have.
instance HasOptionalParam SearchMenuItems MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `addQuery` toQuery ("minCalories", Just xs)

-- | /Optional Param/ "maxCalories" - The maximum amount of calories the menu item can have.
instance HasOptionalParam SearchMenuItems MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `addQuery` toQuery ("maxCalories", Just xs)

-- | /Optional Param/ "minCarbs" - The minimum amount of carbohydrates in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `addQuery` toQuery ("minCarbs", Just xs)

-- | /Optional Param/ "maxCarbs" - The maximum amount of carbohydrates in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `addQuery` toQuery ("maxCarbs", Just xs)

-- | /Optional Param/ "minProtein" - The minimum amount of protein in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `addQuery` toQuery ("minProtein", Just xs)

-- | /Optional Param/ "maxProtein" - The maximum amount of protein in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `addQuery` toQuery ("maxProtein", Just xs)

-- | /Optional Param/ "minFat" - The minimum amount of fat in grams the menu item must have.
instance HasOptionalParam SearchMenuItems MinFat where
  applyOptionalParam req (MinFat xs) =
    req `addQuery` toQuery ("minFat", Just xs)

-- | /Optional Param/ "maxFat" - The maximum amount of fat in grams the menu item can have.
instance HasOptionalParam SearchMenuItems MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `addQuery` toQuery ("maxFat", Just xs)

-- | /Optional Param/ "addMenuItemInformation" - If set to true, you get more information about the menu items returned.
instance HasOptionalParam SearchMenuItems AddMenuItemInformation where
  applyOptionalParam req (AddMenuItemInformation xs) =
    req `addQuery` toQuery ("addMenuItemInformation", Just xs)

-- | /Optional Param/ "offset" - The number of results to skip (between 0 and 900).
instance HasOptionalParam SearchMenuItems Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The maximum number of items to return (between 1 and 100). Defaults to 10.
instance HasOptionalParam SearchMenuItems Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchMenuItems MimeJSON


-- *** visualizeMenuItemNutritionByID

-- | @GET \/food\/menuItems\/{id}\/nutritionWidget@
-- 
-- Menu Item Nutrition by ID Widget
-- 
-- Visualize a menu item's nutritional information as HTML including CSS.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyScheme'
-- 
visualizeMenuItemNutritionByID
  :: Id -- ^ "id" -  The item's id.
  -> SpoonacularRequest VisualizeMenuItemNutritionByID MimeNoContent Text MimeTextHtml
visualizeMenuItemNutritionByID (Id id) =
  _mkRequest "GET" ["/food/menuItems/",toPath id,"/nutritionWidget"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyScheme)

data VisualizeMenuItemNutritionByID  

-- | /Optional Param/ "defaultCss" - Whether the default CSS should be added to the response.
instance HasOptionalParam VisualizeMenuItemNutritionByID DefaultCss where
  applyOptionalParam req (DefaultCss xs) =
    req `addQuery` toQuery ("defaultCss", Just xs)
-- | @text/html@
instance Produces VisualizeMenuItemNutritionByID MimeTextHtml

