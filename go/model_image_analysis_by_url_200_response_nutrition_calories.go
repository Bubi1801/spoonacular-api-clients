/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImageAnalysisByURL200ResponseNutritionCalories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageAnalysisByURL200ResponseNutritionCalories{}

// ImageAnalysisByURL200ResponseNutritionCalories struct for ImageAnalysisByURL200ResponseNutritionCalories
type ImageAnalysisByURL200ResponseNutritionCalories struct {
	Value float32 `json:"value"`
	Unit string `json:"unit"`
	ConfidenceRange95Percent ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent `json:"confidenceRange95Percent"`
	StandardDeviation float32 `json:"standardDeviation"`
}

type _ImageAnalysisByURL200ResponseNutritionCalories ImageAnalysisByURL200ResponseNutritionCalories

// NewImageAnalysisByURL200ResponseNutritionCalories instantiates a new ImageAnalysisByURL200ResponseNutritionCalories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageAnalysisByURL200ResponseNutritionCalories(value float32, unit string, confidenceRange95Percent ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent, standardDeviation float32) *ImageAnalysisByURL200ResponseNutritionCalories {
	this := ImageAnalysisByURL200ResponseNutritionCalories{}
	this.Value = value
	this.Unit = unit
	this.ConfidenceRange95Percent = confidenceRange95Percent
	this.StandardDeviation = standardDeviation
	return &this
}

// NewImageAnalysisByURL200ResponseNutritionCaloriesWithDefaults instantiates a new ImageAnalysisByURL200ResponseNutritionCalories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageAnalysisByURL200ResponseNutritionCaloriesWithDefaults() *ImageAnalysisByURL200ResponseNutritionCalories {
	this := ImageAnalysisByURL200ResponseNutritionCalories{}
	return &this
}

// GetValue returns the Value field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) SetValue(v float32) {
	o.Value = v
}

// GetUnit returns the Unit field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) SetUnit(v string) {
	o.Unit = v
}

// GetConfidenceRange95Percent returns the ConfidenceRange95Percent field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetConfidenceRange95Percent() ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent {
	if o == nil {
		var ret ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
		return ret
	}

	return o.ConfidenceRange95Percent
}

// GetConfidenceRange95PercentOk returns a tuple with the ConfidenceRange95Percent field value
// and a boolean to check if the value has been set.
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetConfidenceRange95PercentOk() (*ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfidenceRange95Percent, true
}

// SetConfidenceRange95Percent sets field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) SetConfidenceRange95Percent(v ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent) {
	o.ConfidenceRange95Percent = v
}

// GetStandardDeviation returns the StandardDeviation field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetStandardDeviation() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StandardDeviation
}

// GetStandardDeviationOk returns a tuple with the StandardDeviation field value
// and a boolean to check if the value has been set.
func (o *ImageAnalysisByURL200ResponseNutritionCalories) GetStandardDeviationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StandardDeviation, true
}

// SetStandardDeviation sets field value
func (o *ImageAnalysisByURL200ResponseNutritionCalories) SetStandardDeviation(v float32) {
	o.StandardDeviation = v
}

func (o ImageAnalysisByURL200ResponseNutritionCalories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageAnalysisByURL200ResponseNutritionCalories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["unit"] = o.Unit
	toSerialize["confidenceRange95Percent"] = o.ConfidenceRange95Percent
	toSerialize["standardDeviation"] = o.StandardDeviation
	return toSerialize, nil
}

func (o *ImageAnalysisByURL200ResponseNutritionCalories) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"unit",
		"confidenceRange95Percent",
		"standardDeviation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageAnalysisByURL200ResponseNutritionCalories := _ImageAnalysisByURL200ResponseNutritionCalories{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageAnalysisByURL200ResponseNutritionCalories)

	if err != nil {
		return err
	}

	*o = ImageAnalysisByURL200ResponseNutritionCalories(varImageAnalysisByURL200ResponseNutritionCalories)

	return err
}

type NullableImageAnalysisByURL200ResponseNutritionCalories struct {
	value *ImageAnalysisByURL200ResponseNutritionCalories
	isSet bool
}

func (v NullableImageAnalysisByURL200ResponseNutritionCalories) Get() *ImageAnalysisByURL200ResponseNutritionCalories {
	return v.value
}

func (v *NullableImageAnalysisByURL200ResponseNutritionCalories) Set(val *ImageAnalysisByURL200ResponseNutritionCalories) {
	v.value = val
	v.isSet = true
}

func (v NullableImageAnalysisByURL200ResponseNutritionCalories) IsSet() bool {
	return v.isSet
}

func (v *NullableImageAnalysisByURL200ResponseNutritionCalories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageAnalysisByURL200ResponseNutritionCalories(val *ImageAnalysisByURL200ResponseNutritionCalories) *NullableImageAnalysisByURL200ResponseNutritionCalories {
	return &NullableImageAnalysisByURL200ResponseNutritionCalories{value: val, isSet: true}
}

func (v NullableImageAnalysisByURL200ResponseNutritionCalories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageAnalysisByURL200ResponseNutritionCalories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


