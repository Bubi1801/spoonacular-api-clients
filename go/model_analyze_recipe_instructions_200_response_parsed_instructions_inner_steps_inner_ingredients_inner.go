/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner{}

// AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner struct for AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
type AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner struct {
	Id float32 `json:"id"`
	Name string `json:"name"`
	LocalizedName string `json:"localizedName"`
	Image string `json:"image"`
}

type _AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner

// NewAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner instantiates a new AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner(id float32, name string, localizedName string, image string) *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner {
	this := AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner{}
	this.Id = id
	this.Name = name
	this.LocalizedName = localizedName
	this.Image = image
	return &this
}

// NewAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerWithDefaults instantiates a new AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerWithDefaults() *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner {
	this := AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner{}
	return &this
}

// GetId returns the Id field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) SetName(v string) {
	o.Name = v
}

// GetLocalizedName returns the LocalizedName field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetLocalizedName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalizedName
}

// GetLocalizedNameOk returns a tuple with the LocalizedName field value
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetLocalizedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalizedName, true
}

// SetLocalizedName sets field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) SetLocalizedName(v string) {
	o.LocalizedName = v
}

// GetImage returns the Image field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) SetImage(v string) {
	o.Image = v
}

func (o AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["localizedName"] = o.LocalizedName
	toSerialize["image"] = o.Image
	return toSerialize, nil
}

func (o *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"localizedName",
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner := _AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner)

	if err != nil {
		return err
	}

	*o = AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner(varAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner)

	return err
}

type NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner struct {
	value *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
	isSet bool
}

func (v NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) Get() *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner {
	return v.value
}

func (v *NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) Set(val *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner(val *AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) *NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner {
	return &NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner{value: val, isSet: true}
}

func (v NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


