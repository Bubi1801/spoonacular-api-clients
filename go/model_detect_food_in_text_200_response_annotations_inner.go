/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetectFoodInText200ResponseAnnotationsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetectFoodInText200ResponseAnnotationsInner{}

// DetectFoodInText200ResponseAnnotationsInner struct for DetectFoodInText200ResponseAnnotationsInner
type DetectFoodInText200ResponseAnnotationsInner struct {
	Annotation string `json:"annotation"`
	Image string `json:"image"`
	Tag string `json:"tag"`
}

type _DetectFoodInText200ResponseAnnotationsInner DetectFoodInText200ResponseAnnotationsInner

// NewDetectFoodInText200ResponseAnnotationsInner instantiates a new DetectFoodInText200ResponseAnnotationsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetectFoodInText200ResponseAnnotationsInner(annotation string, image string, tag string) *DetectFoodInText200ResponseAnnotationsInner {
	this := DetectFoodInText200ResponseAnnotationsInner{}
	this.Annotation = annotation
	this.Image = image
	this.Tag = tag
	return &this
}

// NewDetectFoodInText200ResponseAnnotationsInnerWithDefaults instantiates a new DetectFoodInText200ResponseAnnotationsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetectFoodInText200ResponseAnnotationsInnerWithDefaults() *DetectFoodInText200ResponseAnnotationsInner {
	this := DetectFoodInText200ResponseAnnotationsInner{}
	return &this
}

// GetAnnotation returns the Annotation field value
func (o *DetectFoodInText200ResponseAnnotationsInner) GetAnnotation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Annotation
}

// GetAnnotationOk returns a tuple with the Annotation field value
// and a boolean to check if the value has been set.
func (o *DetectFoodInText200ResponseAnnotationsInner) GetAnnotationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Annotation, true
}

// SetAnnotation sets field value
func (o *DetectFoodInText200ResponseAnnotationsInner) SetAnnotation(v string) {
	o.Annotation = v
}

// GetImage returns the Image field value
func (o *DetectFoodInText200ResponseAnnotationsInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *DetectFoodInText200ResponseAnnotationsInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *DetectFoodInText200ResponseAnnotationsInner) SetImage(v string) {
	o.Image = v
}

// GetTag returns the Tag field value
func (o *DetectFoodInText200ResponseAnnotationsInner) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *DetectFoodInText200ResponseAnnotationsInner) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *DetectFoodInText200ResponseAnnotationsInner) SetTag(v string) {
	o.Tag = v
}

func (o DetectFoodInText200ResponseAnnotationsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetectFoodInText200ResponseAnnotationsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["annotation"] = o.Annotation
	toSerialize["image"] = o.Image
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *DetectFoodInText200ResponseAnnotationsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"annotation",
		"image",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetectFoodInText200ResponseAnnotationsInner := _DetectFoodInText200ResponseAnnotationsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetectFoodInText200ResponseAnnotationsInner)

	if err != nil {
		return err
	}

	*o = DetectFoodInText200ResponseAnnotationsInner(varDetectFoodInText200ResponseAnnotationsInner)

	return err
}

type NullableDetectFoodInText200ResponseAnnotationsInner struct {
	value *DetectFoodInText200ResponseAnnotationsInner
	isSet bool
}

func (v NullableDetectFoodInText200ResponseAnnotationsInner) Get() *DetectFoodInText200ResponseAnnotationsInner {
	return v.value
}

func (v *NullableDetectFoodInText200ResponseAnnotationsInner) Set(val *DetectFoodInText200ResponseAnnotationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectFoodInText200ResponseAnnotationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectFoodInText200ResponseAnnotationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectFoodInText200ResponseAnnotationsInner(val *DetectFoodInText200ResponseAnnotationsInner) *NullableDetectFoodInText200ResponseAnnotationsInner {
	return &NullableDetectFoodInText200ResponseAnnotationsInner{value: val, isSet: true}
}

func (v NullableDetectFoodInText200ResponseAnnotationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectFoodInText200ResponseAnnotationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


