/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// RecipesAPIService RecipesAPI service
type RecipesAPIService service

type ApiAnalyzeARecipeSearchQueryRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	q *string
}

// The recipe search query.
func (r ApiAnalyzeARecipeSearchQueryRequest) Q(q string) ApiAnalyzeARecipeSearchQueryRequest {
	r.q = &q
	return r
}

func (r ApiAnalyzeARecipeSearchQueryRequest) Execute() (*AnalyzeARecipeSearchQuery200Response, *http.Response, error) {
	return r.ApiService.AnalyzeARecipeSearchQueryExecute(r)
}

/*
AnalyzeARecipeSearchQuery Analyze a Recipe Search Query

Parse a recipe search query to find out its intention.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAnalyzeARecipeSearchQueryRequest
*/
func (a *RecipesAPIService) AnalyzeARecipeSearchQuery(ctx context.Context) ApiAnalyzeARecipeSearchQueryRequest {
	return ApiAnalyzeARecipeSearchQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnalyzeARecipeSearchQuery200Response
func (a *RecipesAPIService) AnalyzeARecipeSearchQueryExecute(r ApiAnalyzeARecipeSearchQueryRequest) (*AnalyzeARecipeSearchQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnalyzeARecipeSearchQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.AnalyzeARecipeSearchQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/queries/analyze"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAnalyzeRecipeInstructionsRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	instructions *string
}

// The recipe&#39;s instructions.
func (r ApiAnalyzeRecipeInstructionsRequest) Instructions(instructions string) ApiAnalyzeRecipeInstructionsRequest {
	r.instructions = &instructions
	return r
}

func (r ApiAnalyzeRecipeInstructionsRequest) Execute() (*AnalyzeRecipeInstructions200Response, *http.Response, error) {
	return r.ApiService.AnalyzeRecipeInstructionsExecute(r)
}

/*
AnalyzeRecipeInstructions Analyze Recipe Instructions

This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAnalyzeRecipeInstructionsRequest
*/
func (a *RecipesAPIService) AnalyzeRecipeInstructions(ctx context.Context) ApiAnalyzeRecipeInstructionsRequest {
	return ApiAnalyzeRecipeInstructionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnalyzeRecipeInstructions200Response
func (a *RecipesAPIService) AnalyzeRecipeInstructionsExecute(r ApiAnalyzeRecipeInstructionsRequest) (*AnalyzeRecipeInstructions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AnalyzeRecipeInstructions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.AnalyzeRecipeInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/analyzeInstructions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instructions == nil {
		return localVarReturnValue, nil, reportError("instructions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "instructions", r.instructions, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAutocompleteRecipeSearchRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	query *string
	number *int32
}

// The (natural language) search query.
func (r ApiAutocompleteRecipeSearchRequest) Query(query string) ApiAutocompleteRecipeSearchRequest {
	r.query = &query
	return r
}

// The maximum number of items to return (between 1 and 100). Defaults to 10.
func (r ApiAutocompleteRecipeSearchRequest) Number(number int32) ApiAutocompleteRecipeSearchRequest {
	r.number = &number
	return r
}

func (r ApiAutocompleteRecipeSearchRequest) Execute() ([]AutocompleteRecipeSearch200ResponseInner, *http.Response, error) {
	return r.ApiService.AutocompleteRecipeSearchExecute(r)
}

/*
AutocompleteRecipeSearch Autocomplete Recipe Search

Autocomplete a partial input to suggest possible recipe names.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAutocompleteRecipeSearchRequest
*/
func (a *RecipesAPIService) AutocompleteRecipeSearch(ctx context.Context) ApiAutocompleteRecipeSearchRequest {
	return ApiAutocompleteRecipeSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AutocompleteRecipeSearch200ResponseInner
func (a *RecipesAPIService) AutocompleteRecipeSearchExecute(r ApiAutocompleteRecipeSearchRequest) ([]AutocompleteRecipeSearch200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AutocompleteRecipeSearch200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.AutocompleteRecipeSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/autocomplete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	} else {
		var defaultValue int32 = 10
		r.number = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClassifyCuisineRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	title *string
	ingredientList *string
	language *string
}

// The title of the recipe.
func (r ApiClassifyCuisineRequest) Title(title string) ApiClassifyCuisineRequest {
	r.title = &title
	return r
}

// The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
func (r ApiClassifyCuisineRequest) IngredientList(ingredientList string) ApiClassifyCuisineRequest {
	r.ingredientList = &ingredientList
	return r
}

// The language of the input. Either &#39;en&#39; or &#39;de&#39;.
func (r ApiClassifyCuisineRequest) Language(language string) ApiClassifyCuisineRequest {
	r.language = &language
	return r
}

func (r ApiClassifyCuisineRequest) Execute() (*ClassifyCuisine200Response, *http.Response, error) {
	return r.ApiService.ClassifyCuisineExecute(r)
}

/*
ClassifyCuisine Classify Cuisine

Classify the recipe's cuisine.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiClassifyCuisineRequest
*/
func (a *RecipesAPIService) ClassifyCuisine(ctx context.Context) ApiClassifyCuisineRequest {
	return ApiClassifyCuisineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClassifyCuisine200Response
func (a *RecipesAPIService) ClassifyCuisineExecute(r ApiClassifyCuisineRequest) (*ClassifyCuisine200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClassifyCuisine200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.ClassifyCuisine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/cuisine"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.ingredientList == nil {
		return localVarReturnValue, nil, reportError("ingredientList is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "ingredientList", r.ingredientList, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiComputeGlycemicLoadRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	computeGlycemicLoadRequest *ComputeGlycemicLoadRequest
	language *string
}

func (r ApiComputeGlycemicLoadRequest) ComputeGlycemicLoadRequest(computeGlycemicLoadRequest ComputeGlycemicLoadRequest) ApiComputeGlycemicLoadRequest {
	r.computeGlycemicLoadRequest = &computeGlycemicLoadRequest
	return r
}

// The language of the input. Either &#39;en&#39; or &#39;de&#39;.
func (r ApiComputeGlycemicLoadRequest) Language(language string) ApiComputeGlycemicLoadRequest {
	r.language = &language
	return r
}

func (r ApiComputeGlycemicLoadRequest) Execute() (*ComputeGlycemicLoad200Response, *http.Response, error) {
	return r.ApiService.ComputeGlycemicLoadExecute(r)
}

/*
ComputeGlycemicLoad Compute Glycemic Load

Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiComputeGlycemicLoadRequest
*/
func (a *RecipesAPIService) ComputeGlycemicLoad(ctx context.Context) ApiComputeGlycemicLoadRequest {
	return ApiComputeGlycemicLoadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputeGlycemicLoad200Response
func (a *RecipesAPIService) ComputeGlycemicLoadExecute(r ApiComputeGlycemicLoadRequest) (*ComputeGlycemicLoad200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputeGlycemicLoad200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.ComputeGlycemicLoad")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/food/ingredients/glycemicLoad"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computeGlycemicLoadRequest == nil {
		return localVarReturnValue, nil, reportError("computeGlycemicLoadRequest is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computeGlycemicLoadRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConvertAmountsRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ingredientName *string
	sourceAmount *float32
	sourceUnit *string
	targetUnit *string
}

// The ingredient which you want to convert.
func (r ApiConvertAmountsRequest) IngredientName(ingredientName string) ApiConvertAmountsRequest {
	r.ingredientName = &ingredientName
	return r
}

// The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
func (r ApiConvertAmountsRequest) SourceAmount(sourceAmount float32) ApiConvertAmountsRequest {
	r.sourceAmount = &sourceAmount
	return r
}

// The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
func (r ApiConvertAmountsRequest) SourceUnit(sourceUnit string) ApiConvertAmountsRequest {
	r.sourceUnit = &sourceUnit
	return r
}

// The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
func (r ApiConvertAmountsRequest) TargetUnit(targetUnit string) ApiConvertAmountsRequest {
	r.targetUnit = &targetUnit
	return r
}

func (r ApiConvertAmountsRequest) Execute() (*ConvertAmounts200Response, *http.Response, error) {
	return r.ApiService.ConvertAmountsExecute(r)
}

/*
ConvertAmounts Convert Amounts

Convert amounts like "2 cups of flour to grams".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConvertAmountsRequest
*/
func (a *RecipesAPIService) ConvertAmounts(ctx context.Context) ApiConvertAmountsRequest {
	return ApiConvertAmountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConvertAmounts200Response
func (a *RecipesAPIService) ConvertAmountsExecute(r ApiConvertAmountsRequest) (*ConvertAmounts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertAmounts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.ConvertAmounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/convert"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ingredientName == nil {
		return localVarReturnValue, nil, reportError("ingredientName is required and must be specified")
	}
	if r.sourceAmount == nil {
		return localVarReturnValue, nil, reportError("sourceAmount is required and must be specified")
	}
	if r.sourceUnit == nil {
		return localVarReturnValue, nil, reportError("sourceUnit is required and must be specified")
	}
	if r.targetUnit == nil {
		return localVarReturnValue, nil, reportError("targetUnit is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ingredientName", r.ingredientName, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "sourceAmount", r.sourceAmount, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "sourceUnit", r.sourceUnit, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "targetUnit", r.targetUnit, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRecipeCardRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	title *string
	ingredients *string
	instructions *string
	readyInMinutes *float32
	servings *float32
	mask *string
	backgroundImage *string
	image *os.File
	imageUrl *string
	author *string
	backgroundColor *string
	fontColor *string
	source *string
}

// The title of the recipe.
func (r ApiCreateRecipeCardRequest) Title(title string) ApiCreateRecipeCardRequest {
	r.title = &title
	return r
}

// The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
func (r ApiCreateRecipeCardRequest) Ingredients(ingredients string) ApiCreateRecipeCardRequest {
	r.ingredients = &ingredients
	return r
}

// The instructions to make the recipe. One step per line (separate lines with \\\\n).
func (r ApiCreateRecipeCardRequest) Instructions(instructions string) ApiCreateRecipeCardRequest {
	r.instructions = &instructions
	return r
}

// The number of minutes it takes to get the recipe on the table.
func (r ApiCreateRecipeCardRequest) ReadyInMinutes(readyInMinutes float32) ApiCreateRecipeCardRequest {
	r.readyInMinutes = &readyInMinutes
	return r
}

// The number of servings the recipe makes.
func (r ApiCreateRecipeCardRequest) Servings(servings float32) ApiCreateRecipeCardRequest {
	r.servings = &servings
	return r
}

// The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).
func (r ApiCreateRecipeCardRequest) Mask(mask string) ApiCreateRecipeCardRequest {
	r.mask = &mask
	return r
}

// The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).
func (r ApiCreateRecipeCardRequest) BackgroundImage(backgroundImage string) ApiCreateRecipeCardRequest {
	r.backgroundImage = &backgroundImage
	return r
}

// The binary image of the recipe as jpg.
func (r ApiCreateRecipeCardRequest) Image(image *os.File) ApiCreateRecipeCardRequest {
	r.image = image
	return r
}

// If you do not sent a binary image you can also pass the image URL.
func (r ApiCreateRecipeCardRequest) ImageUrl(imageUrl string) ApiCreateRecipeCardRequest {
	r.imageUrl = &imageUrl
	return r
}

// The author of the recipe.
func (r ApiCreateRecipeCardRequest) Author(author string) ApiCreateRecipeCardRequest {
	r.author = &author
	return r
}

// The background color for the recipe card as a hex-string.
func (r ApiCreateRecipeCardRequest) BackgroundColor(backgroundColor string) ApiCreateRecipeCardRequest {
	r.backgroundColor = &backgroundColor
	return r
}

// The font color for the recipe card as a hex-string.
func (r ApiCreateRecipeCardRequest) FontColor(fontColor string) ApiCreateRecipeCardRequest {
	r.fontColor = &fontColor
	return r
}

// The source of the recipe.
func (r ApiCreateRecipeCardRequest) Source(source string) ApiCreateRecipeCardRequest {
	r.source = &source
	return r
}

func (r ApiCreateRecipeCardRequest) Execute() (*CreateRecipeCard200Response, *http.Response, error) {
	return r.ApiService.CreateRecipeCardExecute(r)
}

/*
CreateRecipeCard Create Recipe Card

Generate a recipe card for a recipe.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRecipeCardRequest
*/
func (a *RecipesAPIService) CreateRecipeCard(ctx context.Context) ApiCreateRecipeCardRequest {
	return ApiCreateRecipeCardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateRecipeCard200Response
func (a *RecipesAPIService) CreateRecipeCardExecute(r ApiCreateRecipeCardRequest) (*CreateRecipeCard200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateRecipeCard200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.CreateRecipeCard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/visualizeRecipe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.ingredients == nil {
		return localVarReturnValue, nil, reportError("ingredients is required and must be specified")
	}
	if r.instructions == nil {
		return localVarReturnValue, nil, reportError("instructions is required and must be specified")
	}
	if r.readyInMinutes == nil {
		return localVarReturnValue, nil, reportError("readyInMinutes is required and must be specified")
	}
	if r.servings == nil {
		return localVarReturnValue, nil, reportError("servings is required and must be specified")
	}
	if r.mask == nil {
		return localVarReturnValue, nil, reportError("mask is required and must be specified")
	}
	if r.backgroundImage == nil {
		return localVarReturnValue, nil, reportError("backgroundImage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "ingredients", r.ingredients, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "instructions", r.instructions, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "readyInMinutes", r.readyInMinutes, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "servings", r.servings, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "mask", r.mask, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "backgroundImage", r.backgroundImage, "")
	var imageLocalVarFormFileName string
	var imageLocalVarFileName     string
	var imageLocalVarFileBytes    []byte

	imageLocalVarFormFileName = "image"
	imageLocalVarFile := r.image

	if imageLocalVarFile != nil {
		fbs, _ := io.ReadAll(imageLocalVarFile)

		imageLocalVarFileBytes = fbs
		imageLocalVarFileName = imageLocalVarFile.Name()
		imageLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: imageLocalVarFileBytes, fileName: imageLocalVarFileName, formFileName: imageLocalVarFormFileName})
	}
	if r.imageUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "imageUrl", r.imageUrl, "")
	}
	if r.author != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "author", r.author, "")
	}
	if r.backgroundColor != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "backgroundColor", r.backgroundColor, "")
	}
	if r.fontColor != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "fontColor", r.fontColor, "")
	}
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "source", r.source, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEquipmentByIDImageRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id float32
}

func (r ApiEquipmentByIDImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.EquipmentByIDImageExecute(r)
}

/*
EquipmentByIDImage Equipment by ID Image

Visualize a recipe's equipment list as an image.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The recipe id.
 @return ApiEquipmentByIDImageRequest
*/
func (a *RecipesAPIService) EquipmentByIDImage(ctx context.Context, id float32) ApiEquipmentByIDImageRequest {
	return ApiEquipmentByIDImageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *RecipesAPIService) EquipmentByIDImageExecute(r ApiEquipmentByIDImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.EquipmentByIDImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/equipmentWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtractRecipeFromWebsiteRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	url *string
	forceExtraction *bool
	analyze *bool
	includeNutrition *bool
	includeTaste *bool
}

// The URL of the recipe page.
func (r ApiExtractRecipeFromWebsiteRequest) Url(url string) ApiExtractRecipeFromWebsiteRequest {
	r.url = &url
	return r
}

// If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
func (r ApiExtractRecipeFromWebsiteRequest) ForceExtraction(forceExtraction bool) ApiExtractRecipeFromWebsiteRequest {
	r.forceExtraction = &forceExtraction
	return r
}

// If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
func (r ApiExtractRecipeFromWebsiteRequest) Analyze(analyze bool) ApiExtractRecipeFromWebsiteRequest {
	r.analyze = &analyze
	return r
}

// Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
func (r ApiExtractRecipeFromWebsiteRequest) IncludeNutrition(includeNutrition bool) ApiExtractRecipeFromWebsiteRequest {
	r.includeNutrition = &includeNutrition
	return r
}

// Whether taste data should be added to correctly parsed ingredients.
func (r ApiExtractRecipeFromWebsiteRequest) IncludeTaste(includeTaste bool) ApiExtractRecipeFromWebsiteRequest {
	r.includeTaste = &includeTaste
	return r
}

func (r ApiExtractRecipeFromWebsiteRequest) Execute() (*GetRecipeInformation200Response, *http.Response, error) {
	return r.ApiService.ExtractRecipeFromWebsiteExecute(r)
}

/*
ExtractRecipeFromWebsite Extract Recipe from Website

This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtractRecipeFromWebsiteRequest
*/
func (a *RecipesAPIService) ExtractRecipeFromWebsite(ctx context.Context) ApiExtractRecipeFromWebsiteRequest {
	return ApiExtractRecipeFromWebsiteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRecipeInformation200Response
func (a *RecipesAPIService) ExtractRecipeFromWebsiteExecute(r ApiExtractRecipeFromWebsiteRequest) (*GetRecipeInformation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipeInformation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.ExtractRecipeFromWebsite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/extract"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "")
	if r.forceExtraction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forceExtraction", r.forceExtraction, "")
	}
	if r.analyze != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "analyze", r.analyze, "")
	}
	if r.includeNutrition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNutrition", r.includeNutrition, "")
	} else {
		var defaultValue bool = false
		r.includeNutrition = &defaultValue
	}
	if r.includeTaste != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTaste", r.includeTaste, "")
	} else {
		var defaultValue bool = false
		r.includeTaste = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAnalyzedRecipeInstructionsRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	stepBreakdown *bool
}

// Whether to break down the recipe steps even more.
func (r ApiGetAnalyzedRecipeInstructionsRequest) StepBreakdown(stepBreakdown bool) ApiGetAnalyzedRecipeInstructionsRequest {
	r.stepBreakdown = &stepBreakdown
	return r
}

func (r ApiGetAnalyzedRecipeInstructionsRequest) Execute() (*GetAnalyzedRecipeInstructions200Response, *http.Response, error) {
	return r.ApiService.GetAnalyzedRecipeInstructionsExecute(r)
}

/*
GetAnalyzedRecipeInstructions Get Analyzed Recipe Instructions

Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetAnalyzedRecipeInstructionsRequest
*/
func (a *RecipesAPIService) GetAnalyzedRecipeInstructions(ctx context.Context, id int32) ApiGetAnalyzedRecipeInstructionsRequest {
	return ApiGetAnalyzedRecipeInstructionsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetAnalyzedRecipeInstructions200Response
func (a *RecipesAPIService) GetAnalyzedRecipeInstructionsExecute(r ApiGetAnalyzedRecipeInstructionsRequest) (*GetAnalyzedRecipeInstructions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAnalyzedRecipeInstructions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetAnalyzedRecipeInstructions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/analyzedInstructions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.stepBreakdown != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stepBreakdown", r.stepBreakdown, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRandomRecipesRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	limitLicense *bool
	includeNutrition *bool
	includeTags *string
	excludeTags *string
	number *int32
}

// Whether the recipes should have an open license that allows display with proper attribution.
func (r ApiGetRandomRecipesRequest) LimitLicense(limitLicense bool) ApiGetRandomRecipesRequest {
	r.limitLicense = &limitLicense
	return r
}

// Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
func (r ApiGetRandomRecipesRequest) IncludeNutrition(includeNutrition bool) ApiGetRandomRecipesRequest {
	r.includeNutrition = &includeNutrition
	return r
}

// A comma-separated list of tags that the random recipe(s) must adhere to.
func (r ApiGetRandomRecipesRequest) IncludeTags(includeTags string) ApiGetRandomRecipesRequest {
	r.includeTags = &includeTags
	return r
}

// A comma-separated list of tags that the random recipe(s) must not adhere to.
func (r ApiGetRandomRecipesRequest) ExcludeTags(excludeTags string) ApiGetRandomRecipesRequest {
	r.excludeTags = &excludeTags
	return r
}

// The maximum number of items to return (between 1 and 100). Defaults to 10.
func (r ApiGetRandomRecipesRequest) Number(number int32) ApiGetRandomRecipesRequest {
	r.number = &number
	return r
}

func (r ApiGetRandomRecipesRequest) Execute() (*GetRandomRecipes200Response, *http.Response, error) {
	return r.ApiService.GetRandomRecipesExecute(r)
}

/*
GetRandomRecipes Get Random Recipes

Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRandomRecipesRequest
*/
func (a *RecipesAPIService) GetRandomRecipes(ctx context.Context) ApiGetRandomRecipesRequest {
	return ApiGetRandomRecipesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRandomRecipes200Response
func (a *RecipesAPIService) GetRandomRecipesExecute(r ApiGetRandomRecipesRequest) (*GetRandomRecipes200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRandomRecipes200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRandomRecipes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/random"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limitLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limitLicense", r.limitLicense, "")
	} else {
		var defaultValue bool = true
		r.limitLicense = &defaultValue
	}
	if r.includeNutrition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNutrition", r.includeNutrition, "")
	} else {
		var defaultValue bool = false
		r.includeNutrition = &defaultValue
	}
	if r.includeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include-tags", r.includeTags, "")
	}
	if r.excludeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-tags", r.excludeTags, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	} else {
		var defaultValue int32 = 10
		r.number = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipeEquipmentByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
}

func (r ApiGetRecipeEquipmentByIDRequest) Execute() (*GetRecipeEquipmentByID200Response, *http.Response, error) {
	return r.ApiService.GetRecipeEquipmentByIDExecute(r)
}

/*
GetRecipeEquipmentByID Equipment by ID

Get a recipe's equipment list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetRecipeEquipmentByIDRequest
*/
func (a *RecipesAPIService) GetRecipeEquipmentByID(ctx context.Context, id int32) ApiGetRecipeEquipmentByIDRequest {
	return ApiGetRecipeEquipmentByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetRecipeEquipmentByID200Response
func (a *RecipesAPIService) GetRecipeEquipmentByIDExecute(r ApiGetRecipeEquipmentByIDRequest) (*GetRecipeEquipmentByID200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipeEquipmentByID200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipeEquipmentByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/equipmentWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipeInformationRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	includeNutrition *bool
}

// Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
func (r ApiGetRecipeInformationRequest) IncludeNutrition(includeNutrition bool) ApiGetRecipeInformationRequest {
	r.includeNutrition = &includeNutrition
	return r
}

func (r ApiGetRecipeInformationRequest) Execute() (*GetRecipeInformation200Response, *http.Response, error) {
	return r.ApiService.GetRecipeInformationExecute(r)
}

/*
GetRecipeInformation Get Recipe Information

Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetRecipeInformationRequest
*/
func (a *RecipesAPIService) GetRecipeInformation(ctx context.Context, id int32) ApiGetRecipeInformationRequest {
	return ApiGetRecipeInformationRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetRecipeInformation200Response
func (a *RecipesAPIService) GetRecipeInformationExecute(r ApiGetRecipeInformationRequest) (*GetRecipeInformation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipeInformation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipeInformation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/information"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeNutrition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNutrition", r.includeNutrition, "")
	} else {
		var defaultValue bool = false
		r.includeNutrition = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipeInformationBulkRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ids *string
	includeNutrition *bool
}

// A comma-separated list of recipe ids.
func (r ApiGetRecipeInformationBulkRequest) Ids(ids string) ApiGetRecipeInformationBulkRequest {
	r.ids = &ids
	return r
}

// Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
func (r ApiGetRecipeInformationBulkRequest) IncludeNutrition(includeNutrition bool) ApiGetRecipeInformationBulkRequest {
	r.includeNutrition = &includeNutrition
	return r
}

func (r ApiGetRecipeInformationBulkRequest) Execute() ([]GetRecipeInformationBulk200ResponseInner, *http.Response, error) {
	return r.ApiService.GetRecipeInformationBulkExecute(r)
}

/*
GetRecipeInformationBulk Get Recipe Information Bulk

Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRecipeInformationBulkRequest
*/
func (a *RecipesAPIService) GetRecipeInformationBulk(ctx context.Context) ApiGetRecipeInformationBulkRequest {
	return ApiGetRecipeInformationBulkRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetRecipeInformationBulk200ResponseInner
func (a *RecipesAPIService) GetRecipeInformationBulkExecute(r ApiGetRecipeInformationBulkRequest) ([]GetRecipeInformationBulk200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetRecipeInformationBulk200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipeInformationBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/informationBulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return localVarReturnValue, nil, reportError("ids is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "")
	if r.includeNutrition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNutrition", r.includeNutrition, "")
	} else {
		var defaultValue bool = false
		r.includeNutrition = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipeIngredientsByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
}

func (r ApiGetRecipeIngredientsByIDRequest) Execute() (*GetRecipeIngredientsByID200Response, *http.Response, error) {
	return r.ApiService.GetRecipeIngredientsByIDExecute(r)
}

/*
GetRecipeIngredientsByID Ingredients by ID

Get a recipe's ingredient list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetRecipeIngredientsByIDRequest
*/
func (a *RecipesAPIService) GetRecipeIngredientsByID(ctx context.Context, id int32) ApiGetRecipeIngredientsByIDRequest {
	return ApiGetRecipeIngredientsByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetRecipeIngredientsByID200Response
func (a *RecipesAPIService) GetRecipeIngredientsByIDExecute(r ApiGetRecipeIngredientsByIDRequest) (*GetRecipeIngredientsByID200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipeIngredientsByID200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipeIngredientsByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/ingredientWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipeNutritionWidgetByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
}

func (r ApiGetRecipeNutritionWidgetByIDRequest) Execute() (*GetRecipeNutritionWidgetByID200Response, *http.Response, error) {
	return r.ApiService.GetRecipeNutritionWidgetByIDExecute(r)
}

/*
GetRecipeNutritionWidgetByID Nutrition by ID

Get a recipe's nutrition data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetRecipeNutritionWidgetByIDRequest
*/
func (a *RecipesAPIService) GetRecipeNutritionWidgetByID(ctx context.Context, id int32) ApiGetRecipeNutritionWidgetByIDRequest {
	return ApiGetRecipeNutritionWidgetByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetRecipeNutritionWidgetByID200Response
func (a *RecipesAPIService) GetRecipeNutritionWidgetByIDExecute(r ApiGetRecipeNutritionWidgetByIDRequest) (*GetRecipeNutritionWidgetByID200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipeNutritionWidgetByID200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipeNutritionWidgetByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/nutritionWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipePriceBreakdownByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
}

func (r ApiGetRecipePriceBreakdownByIDRequest) Execute() (*GetRecipePriceBreakdownByID200Response, *http.Response, error) {
	return r.ApiService.GetRecipePriceBreakdownByIDExecute(r)
}

/*
GetRecipePriceBreakdownByID Price Breakdown by ID

Get a recipe's price breakdown data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetRecipePriceBreakdownByIDRequest
*/
func (a *RecipesAPIService) GetRecipePriceBreakdownByID(ctx context.Context, id int32) ApiGetRecipePriceBreakdownByIDRequest {
	return ApiGetRecipePriceBreakdownByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetRecipePriceBreakdownByID200Response
func (a *RecipesAPIService) GetRecipePriceBreakdownByIDExecute(r ApiGetRecipePriceBreakdownByIDRequest) (*GetRecipePriceBreakdownByID200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipePriceBreakdownByID200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipePriceBreakdownByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/priceBreakdownWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRecipeTasteByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	normalize *bool
}

// Normalize to the strongest taste.
func (r ApiGetRecipeTasteByIDRequest) Normalize(normalize bool) ApiGetRecipeTasteByIDRequest {
	r.normalize = &normalize
	return r
}

func (r ApiGetRecipeTasteByIDRequest) Execute() (*GetRecipeTasteByID200Response, *http.Response, error) {
	return r.ApiService.GetRecipeTasteByIDExecute(r)
}

/*
GetRecipeTasteByID Taste by ID

Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetRecipeTasteByIDRequest
*/
func (a *RecipesAPIService) GetRecipeTasteByID(ctx context.Context, id int32) ApiGetRecipeTasteByIDRequest {
	return ApiGetRecipeTasteByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetRecipeTasteByID200Response
func (a *RecipesAPIService) GetRecipeTasteByIDExecute(r ApiGetRecipeTasteByIDRequest) (*GetRecipeTasteByID200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecipeTasteByID200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetRecipeTasteByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/tasteWidget.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.normalize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "normalize", r.normalize, "")
	} else {
		var defaultValue bool = true
		r.normalize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSimilarRecipesRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	number *int32
	limitLicense *bool
}

// The maximum number of items to return (between 1 and 100). Defaults to 10.
func (r ApiGetSimilarRecipesRequest) Number(number int32) ApiGetSimilarRecipesRequest {
	r.number = &number
	return r
}

// Whether the recipes should have an open license that allows display with proper attribution.
func (r ApiGetSimilarRecipesRequest) LimitLicense(limitLicense bool) ApiGetSimilarRecipesRequest {
	r.limitLicense = &limitLicense
	return r
}

func (r ApiGetSimilarRecipesRequest) Execute() ([]GetSimilarRecipes200ResponseInner, *http.Response, error) {
	return r.ApiService.GetSimilarRecipesExecute(r)
}

/*
GetSimilarRecipes Get Similar Recipes

Find recipes which are similar to the given one.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiGetSimilarRecipesRequest
*/
func (a *RecipesAPIService) GetSimilarRecipes(ctx context.Context, id int32) ApiGetSimilarRecipesRequest {
	return ApiGetSimilarRecipesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []GetSimilarRecipes200ResponseInner
func (a *RecipesAPIService) GetSimilarRecipesExecute(r ApiGetSimilarRecipesRequest) ([]GetSimilarRecipes200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetSimilarRecipes200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GetSimilarRecipes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/similar"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	} else {
		var defaultValue int32 = 10
		r.number = &defaultValue
	}
	if r.limitLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limitLicense", r.limitLicense, "")
	} else {
		var defaultValue bool = true
		r.limitLicense = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGuessNutritionByDishNameRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	title *string
}

// The title of the dish.
func (r ApiGuessNutritionByDishNameRequest) Title(title string) ApiGuessNutritionByDishNameRequest {
	r.title = &title
	return r
}

func (r ApiGuessNutritionByDishNameRequest) Execute() (*GuessNutritionByDishName200Response, *http.Response, error) {
	return r.ApiService.GuessNutritionByDishNameExecute(r)
}

/*
GuessNutritionByDishName Guess Nutrition by Dish Name

Estimate the macronutrients of a dish based on its title.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGuessNutritionByDishNameRequest
*/
func (a *RecipesAPIService) GuessNutritionByDishName(ctx context.Context) ApiGuessNutritionByDishNameRequest {
	return ApiGuessNutritionByDishNameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GuessNutritionByDishName200Response
func (a *RecipesAPIService) GuessNutritionByDishNameExecute(r ApiGuessNutritionByDishNameRequest) (*GuessNutritionByDishName200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GuessNutritionByDishName200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.GuessNutritionByDishName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/guessNutrition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiParseIngredientsRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ingredientList *string
	servings *float32
	language *string
	includeNutrition *bool
}

// The ingredient list of the recipe, one ingredient per line.
func (r ApiParseIngredientsRequest) IngredientList(ingredientList string) ApiParseIngredientsRequest {
	r.ingredientList = &ingredientList
	return r
}

// The number of servings that you can make from the ingredients.
func (r ApiParseIngredientsRequest) Servings(servings float32) ApiParseIngredientsRequest {
	r.servings = &servings
	return r
}

// The language of the input. Either &#39;en&#39; or &#39;de&#39;.
func (r ApiParseIngredientsRequest) Language(language string) ApiParseIngredientsRequest {
	r.language = &language
	return r
}

func (r ApiParseIngredientsRequest) IncludeNutrition(includeNutrition bool) ApiParseIngredientsRequest {
	r.includeNutrition = &includeNutrition
	return r
}

func (r ApiParseIngredientsRequest) Execute() ([]ParseIngredients200ResponseInner, *http.Response, error) {
	return r.ApiService.ParseIngredientsExecute(r)
}

/*
ParseIngredients Parse Ingredients

Extract an ingredient from plain text.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiParseIngredientsRequest
*/
func (a *RecipesAPIService) ParseIngredients(ctx context.Context) ApiParseIngredientsRequest {
	return ApiParseIngredientsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ParseIngredients200ResponseInner
func (a *RecipesAPIService) ParseIngredientsExecute(r ApiParseIngredientsRequest) ([]ParseIngredients200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ParseIngredients200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.ParseIngredients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/parseIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ingredientList == nil {
		return localVarReturnValue, nil, reportError("ingredientList is required and must be specified")
	}
	if r.servings == nil {
		return localVarReturnValue, nil, reportError("servings is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "ingredientList", r.ingredientList, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "servings", r.servings, "")
	if r.includeNutrition != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "includeNutrition", r.includeNutrition, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPriceBreakdownByIDImageRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id float32
}

func (r ApiPriceBreakdownByIDImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.PriceBreakdownByIDImageExecute(r)
}

/*
PriceBreakdownByIDImage Price Breakdown by ID Image

Visualize a recipe's price breakdown.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The recipe id.
 @return ApiPriceBreakdownByIDImageRequest
*/
func (a *RecipesAPIService) PriceBreakdownByIDImage(ctx context.Context, id float32) ApiPriceBreakdownByIDImageRequest {
	return ApiPriceBreakdownByIDImageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *RecipesAPIService) PriceBreakdownByIDImageExecute(r ApiPriceBreakdownByIDImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.PriceBreakdownByIDImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/priceBreakdownWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQuickAnswerRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	q *string
}

// The nutrition related question.
func (r ApiQuickAnswerRequest) Q(q string) ApiQuickAnswerRequest {
	r.q = &q
	return r
}

func (r ApiQuickAnswerRequest) Execute() (*QuickAnswer200Response, *http.Response, error) {
	return r.ApiService.QuickAnswerExecute(r)
}

/*
QuickAnswer Quick Answer

Answer a nutrition related natural language question.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiQuickAnswerRequest
*/
func (a *RecipesAPIService) QuickAnswer(ctx context.Context) ApiQuickAnswerRequest {
	return ApiQuickAnswerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QuickAnswer200Response
func (a *RecipesAPIService) QuickAnswerExecute(r ApiQuickAnswerRequest) (*QuickAnswer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuickAnswer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.QuickAnswer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/quickAnswer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipeNutritionByIDImageRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id float32
}

func (r ApiRecipeNutritionByIDImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.RecipeNutritionByIDImageExecute(r)
}

/*
RecipeNutritionByIDImage Recipe Nutrition by ID Image

Visualize a recipe's nutritional information as an image.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The recipe id.
 @return ApiRecipeNutritionByIDImageRequest
*/
func (a *RecipesAPIService) RecipeNutritionByIDImage(ctx context.Context, id float32) ApiRecipeNutritionByIDImageRequest {
	return ApiRecipeNutritionByIDImageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *RecipesAPIService) RecipeNutritionByIDImageExecute(r ApiRecipeNutritionByIDImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.RecipeNutritionByIDImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/nutritionWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipeNutritionLabelImageRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id float32
	showOptionalNutrients *bool
	showZeroValues *bool
	showIngredients *bool
}

// Whether to show optional nutrients.
func (r ApiRecipeNutritionLabelImageRequest) ShowOptionalNutrients(showOptionalNutrients bool) ApiRecipeNutritionLabelImageRequest {
	r.showOptionalNutrients = &showOptionalNutrients
	return r
}

// Whether to show zero values.
func (r ApiRecipeNutritionLabelImageRequest) ShowZeroValues(showZeroValues bool) ApiRecipeNutritionLabelImageRequest {
	r.showZeroValues = &showZeroValues
	return r
}

// Whether to show a list of ingredients.
func (r ApiRecipeNutritionLabelImageRequest) ShowIngredients(showIngredients bool) ApiRecipeNutritionLabelImageRequest {
	r.showIngredients = &showIngredients
	return r
}

func (r ApiRecipeNutritionLabelImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.RecipeNutritionLabelImageExecute(r)
}

/*
RecipeNutritionLabelImage Recipe Nutrition Label Image

Get a recipe's nutrition label as an image.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The recipe id.
 @return ApiRecipeNutritionLabelImageRequest
*/
func (a *RecipesAPIService) RecipeNutritionLabelImage(ctx context.Context, id float32) ApiRecipeNutritionLabelImageRequest {
	return ApiRecipeNutritionLabelImageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *RecipesAPIService) RecipeNutritionLabelImageExecute(r ApiRecipeNutritionLabelImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.RecipeNutritionLabelImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/nutritionLabel.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showOptionalNutrients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showOptionalNutrients", r.showOptionalNutrients, "")
	}
	if r.showZeroValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showZeroValues", r.showZeroValues, "")
	}
	if r.showIngredients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showIngredients", r.showIngredients, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipeNutritionLabelWidgetRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id float32
	defaultCss *bool
	showOptionalNutrients *bool
	showZeroValues *bool
	showIngredients *bool
}

// Whether the default CSS should be added to the response.
func (r ApiRecipeNutritionLabelWidgetRequest) DefaultCss(defaultCss bool) ApiRecipeNutritionLabelWidgetRequest {
	r.defaultCss = &defaultCss
	return r
}

// Whether to show optional nutrients.
func (r ApiRecipeNutritionLabelWidgetRequest) ShowOptionalNutrients(showOptionalNutrients bool) ApiRecipeNutritionLabelWidgetRequest {
	r.showOptionalNutrients = &showOptionalNutrients
	return r
}

// Whether to show zero values.
func (r ApiRecipeNutritionLabelWidgetRequest) ShowZeroValues(showZeroValues bool) ApiRecipeNutritionLabelWidgetRequest {
	r.showZeroValues = &showZeroValues
	return r
}

// Whether to show a list of ingredients.
func (r ApiRecipeNutritionLabelWidgetRequest) ShowIngredients(showIngredients bool) ApiRecipeNutritionLabelWidgetRequest {
	r.showIngredients = &showIngredients
	return r
}

func (r ApiRecipeNutritionLabelWidgetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.RecipeNutritionLabelWidgetExecute(r)
}

/*
RecipeNutritionLabelWidget Recipe Nutrition Label Widget

Get a recipe's nutrition label as an HTML widget.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The recipe id.
 @return ApiRecipeNutritionLabelWidgetRequest
*/
func (a *RecipesAPIService) RecipeNutritionLabelWidget(ctx context.Context, id float32) ApiRecipeNutritionLabelWidgetRequest {
	return ApiRecipeNutritionLabelWidgetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) RecipeNutritionLabelWidgetExecute(r ApiRecipeNutritionLabelWidgetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.RecipeNutritionLabelWidget")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/nutritionLabel"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCss", r.defaultCss, "")
	} else {
		var defaultValue bool = true
		r.defaultCss = &defaultValue
	}
	if r.showOptionalNutrients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showOptionalNutrients", r.showOptionalNutrients, "")
	}
	if r.showZeroValues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showZeroValues", r.showZeroValues, "")
	}
	if r.showIngredients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showIngredients", r.showIngredients, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRecipeTasteByIDImageRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id float32
	normalize *bool
	rgb *string
}

// Normalize to the strongest taste.
func (r ApiRecipeTasteByIDImageRequest) Normalize(normalize bool) ApiRecipeTasteByIDImageRequest {
	r.normalize = &normalize
	return r
}

// Red, green, blue values for the chart color.
func (r ApiRecipeTasteByIDImageRequest) Rgb(rgb string) ApiRecipeTasteByIDImageRequest {
	r.rgb = &rgb
	return r
}

func (r ApiRecipeTasteByIDImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.RecipeTasteByIDImageExecute(r)
}

/*
RecipeTasteByIDImage Recipe Taste by ID Image

Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The recipe id.
 @return ApiRecipeTasteByIDImageRequest
*/
func (a *RecipesAPIService) RecipeTasteByIDImage(ctx context.Context, id float32) ApiRecipeTasteByIDImageRequest {
	return ApiRecipeTasteByIDImageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return *os.File
func (a *RecipesAPIService) RecipeTasteByIDImageExecute(r ApiRecipeTasteByIDImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.RecipeTasteByIDImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/tasteWidget.png"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.normalize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "normalize", r.normalize, "")
	}
	if r.rgb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rgb", r.rgb, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchRecipesRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	query *string
	cuisine *string
	excludeCuisine *string
	diet *string
	intolerances *string
	equipment *string
	includeIngredients *string
	excludeIngredients *string
	type_ *string
	instructionsRequired *bool
	fillIngredients *bool
	addRecipeInformation *bool
	addRecipeNutrition *bool
	author *string
	tags *string
	recipeBoxId *float32
	titleMatch *string
	maxReadyTime *float32
	minServings *float32
	maxServings *float32
	ignorePantry *bool
	sort *string
	sortDirection *string
	minCarbs *float32
	maxCarbs *float32
	minProtein *float32
	maxProtein *float32
	minCalories *float32
	maxCalories *float32
	minFat *float32
	maxFat *float32
	minAlcohol *float32
	maxAlcohol *float32
	minCaffeine *float32
	maxCaffeine *float32
	minCopper *float32
	maxCopper *float32
	minCalcium *float32
	maxCalcium *float32
	minCholine *float32
	maxCholine *float32
	minCholesterol *float32
	maxCholesterol *float32
	minFluoride *float32
	maxFluoride *float32
	minSaturatedFat *float32
	maxSaturatedFat *float32
	minVitaminA *float32
	maxVitaminA *float32
	minVitaminC *float32
	maxVitaminC *float32
	minVitaminD *float32
	maxVitaminD *float32
	minVitaminE *float32
	maxVitaminE *float32
	minVitaminK *float32
	maxVitaminK *float32
	minVitaminB1 *float32
	maxVitaminB1 *float32
	minVitaminB2 *float32
	maxVitaminB2 *float32
	minVitaminB5 *float32
	maxVitaminB5 *float32
	minVitaminB3 *float32
	maxVitaminB3 *float32
	minVitaminB6 *float32
	maxVitaminB6 *float32
	minVitaminB12 *float32
	maxVitaminB12 *float32
	minFiber *float32
	maxFiber *float32
	minFolate *float32
	maxFolate *float32
	minFolicAcid *float32
	maxFolicAcid *float32
	minIodine *float32
	maxIodine *float32
	minIron *float32
	maxIron *float32
	minMagnesium *float32
	maxMagnesium *float32
	minManganese *float32
	maxManganese *float32
	minPhosphorus *float32
	maxPhosphorus *float32
	minPotassium *float32
	maxPotassium *float32
	minSelenium *float32
	maxSelenium *float32
	minSodium *float32
	maxSodium *float32
	minSugar *float32
	maxSugar *float32
	minZinc *float32
	maxZinc *float32
	offset *int32
	number *int32
	limitLicense *bool
}

// The (natural language) search query.
func (r ApiSearchRecipesRequest) Query(query string) ApiSearchRecipesRequest {
	r.query = &query
	return r
}

// The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
func (r ApiSearchRecipesRequest) Cuisine(cuisine string) ApiSearchRecipesRequest {
	r.cuisine = &cuisine
	return r
}

// The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
func (r ApiSearchRecipesRequest) ExcludeCuisine(excludeCuisine string) ApiSearchRecipesRequest {
	r.excludeCuisine = &excludeCuisine
	return r
}

// The diet for which the recipes must be suitable. See a full list of supported diets.
func (r ApiSearchRecipesRequest) Diet(diet string) ApiSearchRecipesRequest {
	r.diet = &diet
	return r
}

// A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
func (r ApiSearchRecipesRequest) Intolerances(intolerances string) ApiSearchRecipesRequest {
	r.intolerances = &intolerances
	return r
}

// The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
func (r ApiSearchRecipesRequest) Equipment(equipment string) ApiSearchRecipesRequest {
	r.equipment = &equipment
	return r
}

// A comma-separated list of ingredients that should/must be used in the recipes.
func (r ApiSearchRecipesRequest) IncludeIngredients(includeIngredients string) ApiSearchRecipesRequest {
	r.includeIngredients = &includeIngredients
	return r
}

// A comma-separated list of ingredients or ingredient types that the recipes must not contain.
func (r ApiSearchRecipesRequest) ExcludeIngredients(excludeIngredients string) ApiSearchRecipesRequest {
	r.excludeIngredients = &excludeIngredients
	return r
}

// The type of recipe. See a full list of supported meal types.
func (r ApiSearchRecipesRequest) Type_(type_ string) ApiSearchRecipesRequest {
	r.type_ = &type_
	return r
}

// Whether the recipes must have instructions.
func (r ApiSearchRecipesRequest) InstructionsRequired(instructionsRequired bool) ApiSearchRecipesRequest {
	r.instructionsRequired = &instructionsRequired
	return r
}

// Add information about the ingredients and whether they are used or missing in relation to the query.
func (r ApiSearchRecipesRequest) FillIngredients(fillIngredients bool) ApiSearchRecipesRequest {
	r.fillIngredients = &fillIngredients
	return r
}

// If set to true, you get more information about the recipes returned.
func (r ApiSearchRecipesRequest) AddRecipeInformation(addRecipeInformation bool) ApiSearchRecipesRequest {
	r.addRecipeInformation = &addRecipeInformation
	return r
}

// If set to true, you get nutritional information about each recipes returned.
func (r ApiSearchRecipesRequest) AddRecipeNutrition(addRecipeNutrition bool) ApiSearchRecipesRequest {
	r.addRecipeNutrition = &addRecipeNutrition
	return r
}

// The username of the recipe author.
func (r ApiSearchRecipesRequest) Author(author string) ApiSearchRecipesRequest {
	r.author = &author
	return r
}

// The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
func (r ApiSearchRecipesRequest) Tags(tags string) ApiSearchRecipesRequest {
	r.tags = &tags
	return r
}

// The id of the recipe box to which the search should be limited to.
func (r ApiSearchRecipesRequest) RecipeBoxId(recipeBoxId float32) ApiSearchRecipesRequest {
	r.recipeBoxId = &recipeBoxId
	return r
}

// Enter text that must be found in the title of the recipes.
func (r ApiSearchRecipesRequest) TitleMatch(titleMatch string) ApiSearchRecipesRequest {
	r.titleMatch = &titleMatch
	return r
}

// The maximum time in minutes it should take to prepare and cook the recipe.
func (r ApiSearchRecipesRequest) MaxReadyTime(maxReadyTime float32) ApiSearchRecipesRequest {
	r.maxReadyTime = &maxReadyTime
	return r
}

// The minimum amount of servings the recipe is for.
func (r ApiSearchRecipesRequest) MinServings(minServings float32) ApiSearchRecipesRequest {
	r.minServings = &minServings
	return r
}

// The maximum amount of servings the recipe is for.
func (r ApiSearchRecipesRequest) MaxServings(maxServings float32) ApiSearchRecipesRequest {
	r.maxServings = &maxServings
	return r
}

// Whether to ignore typical pantry items, such as water, salt, flour, etc.
func (r ApiSearchRecipesRequest) IgnorePantry(ignorePantry bool) ApiSearchRecipesRequest {
	r.ignorePantry = &ignorePantry
	return r
}

// The strategy to sort recipes by. See a full list of supported sorting options.
func (r ApiSearchRecipesRequest) Sort(sort string) ApiSearchRecipesRequest {
	r.sort = &sort
	return r
}

// The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
func (r ApiSearchRecipesRequest) SortDirection(sortDirection string) ApiSearchRecipesRequest {
	r.sortDirection = &sortDirection
	return r
}

// The minimum amount of carbohydrates in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinCarbs(minCarbs float32) ApiSearchRecipesRequest {
	r.minCarbs = &minCarbs
	return r
}

// The maximum amount of carbohydrates in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxCarbs(maxCarbs float32) ApiSearchRecipesRequest {
	r.maxCarbs = &maxCarbs
	return r
}

// The minimum amount of protein in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinProtein(minProtein float32) ApiSearchRecipesRequest {
	r.minProtein = &minProtein
	return r
}

// The maximum amount of protein in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxProtein(maxProtein float32) ApiSearchRecipesRequest {
	r.maxProtein = &maxProtein
	return r
}

// The minimum amount of calories the recipe must have.
func (r ApiSearchRecipesRequest) MinCalories(minCalories float32) ApiSearchRecipesRequest {
	r.minCalories = &minCalories
	return r
}

// The maximum amount of calories the recipe can have.
func (r ApiSearchRecipesRequest) MaxCalories(maxCalories float32) ApiSearchRecipesRequest {
	r.maxCalories = &maxCalories
	return r
}

// The minimum amount of fat in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinFat(minFat float32) ApiSearchRecipesRequest {
	r.minFat = &minFat
	return r
}

// The maximum amount of fat in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxFat(maxFat float32) ApiSearchRecipesRequest {
	r.maxFat = &maxFat
	return r
}

// The minimum amount of alcohol in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinAlcohol(minAlcohol float32) ApiSearchRecipesRequest {
	r.minAlcohol = &minAlcohol
	return r
}

// The maximum amount of alcohol in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxAlcohol(maxAlcohol float32) ApiSearchRecipesRequest {
	r.maxAlcohol = &maxAlcohol
	return r
}

// The minimum amount of caffeine in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinCaffeine(minCaffeine float32) ApiSearchRecipesRequest {
	r.minCaffeine = &minCaffeine
	return r
}

// The maximum amount of caffeine in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxCaffeine(maxCaffeine float32) ApiSearchRecipesRequest {
	r.maxCaffeine = &maxCaffeine
	return r
}

// The minimum amount of copper in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinCopper(minCopper float32) ApiSearchRecipesRequest {
	r.minCopper = &minCopper
	return r
}

// The maximum amount of copper in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxCopper(maxCopper float32) ApiSearchRecipesRequest {
	r.maxCopper = &maxCopper
	return r
}

// The minimum amount of calcium in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinCalcium(minCalcium float32) ApiSearchRecipesRequest {
	r.minCalcium = &minCalcium
	return r
}

// The maximum amount of calcium in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxCalcium(maxCalcium float32) ApiSearchRecipesRequest {
	r.maxCalcium = &maxCalcium
	return r
}

// The minimum amount of choline in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinCholine(minCholine float32) ApiSearchRecipesRequest {
	r.minCholine = &minCholine
	return r
}

// The maximum amount of choline in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxCholine(maxCholine float32) ApiSearchRecipesRequest {
	r.maxCholine = &maxCholine
	return r
}

// The minimum amount of cholesterol in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinCholesterol(minCholesterol float32) ApiSearchRecipesRequest {
	r.minCholesterol = &minCholesterol
	return r
}

// The maximum amount of cholesterol in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxCholesterol(maxCholesterol float32) ApiSearchRecipesRequest {
	r.maxCholesterol = &maxCholesterol
	return r
}

// The minimum amount of fluoride in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinFluoride(minFluoride float32) ApiSearchRecipesRequest {
	r.minFluoride = &minFluoride
	return r
}

// The maximum amount of fluoride in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxFluoride(maxFluoride float32) ApiSearchRecipesRequest {
	r.maxFluoride = &maxFluoride
	return r
}

// The minimum amount of saturated fat in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinSaturatedFat(minSaturatedFat float32) ApiSearchRecipesRequest {
	r.minSaturatedFat = &minSaturatedFat
	return r
}

// The maximum amount of saturated fat in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxSaturatedFat(maxSaturatedFat float32) ApiSearchRecipesRequest {
	r.maxSaturatedFat = &maxSaturatedFat
	return r
}

// The minimum amount of Vitamin A in IU the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminA(minVitaminA float32) ApiSearchRecipesRequest {
	r.minVitaminA = &minVitaminA
	return r
}

// The maximum amount of Vitamin A in IU the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminA(maxVitaminA float32) ApiSearchRecipesRequest {
	r.maxVitaminA = &maxVitaminA
	return r
}

// The minimum amount of Vitamin C milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminC(minVitaminC float32) ApiSearchRecipesRequest {
	r.minVitaminC = &minVitaminC
	return r
}

// The maximum amount of Vitamin C in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminC(maxVitaminC float32) ApiSearchRecipesRequest {
	r.maxVitaminC = &maxVitaminC
	return r
}

// The minimum amount of Vitamin D in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminD(minVitaminD float32) ApiSearchRecipesRequest {
	r.minVitaminD = &minVitaminD
	return r
}

// The maximum amount of Vitamin D in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminD(maxVitaminD float32) ApiSearchRecipesRequest {
	r.maxVitaminD = &maxVitaminD
	return r
}

// The minimum amount of Vitamin E in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminE(minVitaminE float32) ApiSearchRecipesRequest {
	r.minVitaminE = &minVitaminE
	return r
}

// The maximum amount of Vitamin E in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminE(maxVitaminE float32) ApiSearchRecipesRequest {
	r.maxVitaminE = &maxVitaminE
	return r
}

// The minimum amount of Vitamin K in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminK(minVitaminK float32) ApiSearchRecipesRequest {
	r.minVitaminK = &minVitaminK
	return r
}

// The maximum amount of Vitamin K in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminK(maxVitaminK float32) ApiSearchRecipesRequest {
	r.maxVitaminK = &maxVitaminK
	return r
}

// The minimum amount of Vitamin B1 in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminB1(minVitaminB1 float32) ApiSearchRecipesRequest {
	r.minVitaminB1 = &minVitaminB1
	return r
}

// The maximum amount of Vitamin B1 in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminB1(maxVitaminB1 float32) ApiSearchRecipesRequest {
	r.maxVitaminB1 = &maxVitaminB1
	return r
}

// The minimum amount of Vitamin B2 in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminB2(minVitaminB2 float32) ApiSearchRecipesRequest {
	r.minVitaminB2 = &minVitaminB2
	return r
}

// The maximum amount of Vitamin B2 in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminB2(maxVitaminB2 float32) ApiSearchRecipesRequest {
	r.maxVitaminB2 = &maxVitaminB2
	return r
}

// The minimum amount of Vitamin B5 in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminB5(minVitaminB5 float32) ApiSearchRecipesRequest {
	r.minVitaminB5 = &minVitaminB5
	return r
}

// The maximum amount of Vitamin B5 in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminB5(maxVitaminB5 float32) ApiSearchRecipesRequest {
	r.maxVitaminB5 = &maxVitaminB5
	return r
}

// The minimum amount of Vitamin B3 in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminB3(minVitaminB3 float32) ApiSearchRecipesRequest {
	r.minVitaminB3 = &minVitaminB3
	return r
}

// The maximum amount of Vitamin B3 in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminB3(maxVitaminB3 float32) ApiSearchRecipesRequest {
	r.maxVitaminB3 = &maxVitaminB3
	return r
}

// The minimum amount of Vitamin B6 in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminB6(minVitaminB6 float32) ApiSearchRecipesRequest {
	r.minVitaminB6 = &minVitaminB6
	return r
}

// The maximum amount of Vitamin B6 in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminB6(maxVitaminB6 float32) ApiSearchRecipesRequest {
	r.maxVitaminB6 = &maxVitaminB6
	return r
}

// The minimum amount of Vitamin B12 in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinVitaminB12(minVitaminB12 float32) ApiSearchRecipesRequest {
	r.minVitaminB12 = &minVitaminB12
	return r
}

// The maximum amount of Vitamin B12 in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxVitaminB12(maxVitaminB12 float32) ApiSearchRecipesRequest {
	r.maxVitaminB12 = &maxVitaminB12
	return r
}

// The minimum amount of fiber in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinFiber(minFiber float32) ApiSearchRecipesRequest {
	r.minFiber = &minFiber
	return r
}

// The maximum amount of fiber in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxFiber(maxFiber float32) ApiSearchRecipesRequest {
	r.maxFiber = &maxFiber
	return r
}

// The minimum amount of folate in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinFolate(minFolate float32) ApiSearchRecipesRequest {
	r.minFolate = &minFolate
	return r
}

// The maximum amount of folate in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxFolate(maxFolate float32) ApiSearchRecipesRequest {
	r.maxFolate = &maxFolate
	return r
}

// The minimum amount of folic acid in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinFolicAcid(minFolicAcid float32) ApiSearchRecipesRequest {
	r.minFolicAcid = &minFolicAcid
	return r
}

// The maximum amount of folic acid in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxFolicAcid(maxFolicAcid float32) ApiSearchRecipesRequest {
	r.maxFolicAcid = &maxFolicAcid
	return r
}

// The minimum amount of iodine in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinIodine(minIodine float32) ApiSearchRecipesRequest {
	r.minIodine = &minIodine
	return r
}

// The maximum amount of iodine in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxIodine(maxIodine float32) ApiSearchRecipesRequest {
	r.maxIodine = &maxIodine
	return r
}

// The minimum amount of iron in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinIron(minIron float32) ApiSearchRecipesRequest {
	r.minIron = &minIron
	return r
}

// The maximum amount of iron in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxIron(maxIron float32) ApiSearchRecipesRequest {
	r.maxIron = &maxIron
	return r
}

// The minimum amount of magnesium in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinMagnesium(minMagnesium float32) ApiSearchRecipesRequest {
	r.minMagnesium = &minMagnesium
	return r
}

// The maximum amount of magnesium in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxMagnesium(maxMagnesium float32) ApiSearchRecipesRequest {
	r.maxMagnesium = &maxMagnesium
	return r
}

// The minimum amount of manganese in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinManganese(minManganese float32) ApiSearchRecipesRequest {
	r.minManganese = &minManganese
	return r
}

// The maximum amount of manganese in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxManganese(maxManganese float32) ApiSearchRecipesRequest {
	r.maxManganese = &maxManganese
	return r
}

// The minimum amount of phosphorus in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinPhosphorus(minPhosphorus float32) ApiSearchRecipesRequest {
	r.minPhosphorus = &minPhosphorus
	return r
}

// The maximum amount of phosphorus in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxPhosphorus(maxPhosphorus float32) ApiSearchRecipesRequest {
	r.maxPhosphorus = &maxPhosphorus
	return r
}

// The minimum amount of potassium in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinPotassium(minPotassium float32) ApiSearchRecipesRequest {
	r.minPotassium = &minPotassium
	return r
}

// The maximum amount of potassium in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxPotassium(maxPotassium float32) ApiSearchRecipesRequest {
	r.maxPotassium = &maxPotassium
	return r
}

// The minimum amount of selenium in micrograms the recipe must have.
func (r ApiSearchRecipesRequest) MinSelenium(minSelenium float32) ApiSearchRecipesRequest {
	r.minSelenium = &minSelenium
	return r
}

// The maximum amount of selenium in micrograms the recipe can have.
func (r ApiSearchRecipesRequest) MaxSelenium(maxSelenium float32) ApiSearchRecipesRequest {
	r.maxSelenium = &maxSelenium
	return r
}

// The minimum amount of sodium in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinSodium(minSodium float32) ApiSearchRecipesRequest {
	r.minSodium = &minSodium
	return r
}

// The maximum amount of sodium in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxSodium(maxSodium float32) ApiSearchRecipesRequest {
	r.maxSodium = &maxSodium
	return r
}

// The minimum amount of sugar in grams the recipe must have.
func (r ApiSearchRecipesRequest) MinSugar(minSugar float32) ApiSearchRecipesRequest {
	r.minSugar = &minSugar
	return r
}

// The maximum amount of sugar in grams the recipe can have.
func (r ApiSearchRecipesRequest) MaxSugar(maxSugar float32) ApiSearchRecipesRequest {
	r.maxSugar = &maxSugar
	return r
}

// The minimum amount of zinc in milligrams the recipe must have.
func (r ApiSearchRecipesRequest) MinZinc(minZinc float32) ApiSearchRecipesRequest {
	r.minZinc = &minZinc
	return r
}

// The maximum amount of zinc in milligrams the recipe can have.
func (r ApiSearchRecipesRequest) MaxZinc(maxZinc float32) ApiSearchRecipesRequest {
	r.maxZinc = &maxZinc
	return r
}

// The number of results to skip (between 0 and 900).
func (r ApiSearchRecipesRequest) Offset(offset int32) ApiSearchRecipesRequest {
	r.offset = &offset
	return r
}

// The maximum number of items to return (between 1 and 100). Defaults to 10.
func (r ApiSearchRecipesRequest) Number(number int32) ApiSearchRecipesRequest {
	r.number = &number
	return r
}

// Whether the recipes should have an open license that allows display with proper attribution.
func (r ApiSearchRecipesRequest) LimitLicense(limitLicense bool) ApiSearchRecipesRequest {
	r.limitLicense = &limitLicense
	return r
}

func (r ApiSearchRecipesRequest) Execute() (*SearchRecipes200Response, *http.Response, error) {
	return r.ApiService.SearchRecipesExecute(r)
}

/*
SearchRecipes Search Recipes

Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchRecipesRequest
*/
func (a *RecipesAPIService) SearchRecipes(ctx context.Context) ApiSearchRecipesRequest {
	return ApiSearchRecipesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchRecipes200Response
func (a *RecipesAPIService) SearchRecipesExecute(r ApiSearchRecipesRequest) (*SearchRecipes200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchRecipes200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.SearchRecipes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/complexSearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.cuisine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cuisine", r.cuisine, "")
	}
	if r.excludeCuisine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeCuisine", r.excludeCuisine, "")
	}
	if r.diet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "diet", r.diet, "")
	}
	if r.intolerances != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "intolerances", r.intolerances, "")
	}
	if r.equipment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "equipment", r.equipment, "")
	}
	if r.includeIngredients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeIngredients", r.includeIngredients, "")
	}
	if r.excludeIngredients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeIngredients", r.excludeIngredients, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.instructionsRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instructionsRequired", r.instructionsRequired, "")
	}
	if r.fillIngredients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fillIngredients", r.fillIngredients, "")
	}
	if r.addRecipeInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addRecipeInformation", r.addRecipeInformation, "")
	}
	if r.addRecipeNutrition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addRecipeNutrition", r.addRecipeNutrition, "")
	}
	if r.author != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "author", r.author, "")
	}
	if r.tags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tags", r.tags, "")
	}
	if r.recipeBoxId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recipeBoxId", r.recipeBoxId, "")
	}
	if r.titleMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "titleMatch", r.titleMatch, "")
	}
	if r.maxReadyTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxReadyTime", r.maxReadyTime, "")
	}
	if r.minServings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minServings", r.minServings, "")
	}
	if r.maxServings != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxServings", r.maxServings, "")
	}
	if r.ignorePantry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignorePantry", r.ignorePantry, "")
	} else {
		var defaultValue bool = false
		r.ignorePantry = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	if r.minCarbs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCarbs", r.minCarbs, "")
	}
	if r.maxCarbs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCarbs", r.maxCarbs, "")
	}
	if r.minProtein != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minProtein", r.minProtein, "")
	}
	if r.maxProtein != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxProtein", r.maxProtein, "")
	}
	if r.minCalories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCalories", r.minCalories, "")
	}
	if r.maxCalories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCalories", r.maxCalories, "")
	}
	if r.minFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFat", r.minFat, "")
	}
	if r.maxFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFat", r.maxFat, "")
	}
	if r.minAlcohol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minAlcohol", r.minAlcohol, "")
	}
	if r.maxAlcohol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAlcohol", r.maxAlcohol, "")
	}
	if r.minCaffeine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCaffeine", r.minCaffeine, "")
	}
	if r.maxCaffeine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCaffeine", r.maxCaffeine, "")
	}
	if r.minCopper != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCopper", r.minCopper, "")
	}
	if r.maxCopper != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCopper", r.maxCopper, "")
	}
	if r.minCalcium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCalcium", r.minCalcium, "")
	}
	if r.maxCalcium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCalcium", r.maxCalcium, "")
	}
	if r.minCholine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCholine", r.minCholine, "")
	}
	if r.maxCholine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCholine", r.maxCholine, "")
	}
	if r.minCholesterol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCholesterol", r.minCholesterol, "")
	}
	if r.maxCholesterol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCholesterol", r.maxCholesterol, "")
	}
	if r.minFluoride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFluoride", r.minFluoride, "")
	}
	if r.maxFluoride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFluoride", r.maxFluoride, "")
	}
	if r.minSaturatedFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSaturatedFat", r.minSaturatedFat, "")
	}
	if r.maxSaturatedFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSaturatedFat", r.maxSaturatedFat, "")
	}
	if r.minVitaminA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminA", r.minVitaminA, "")
	}
	if r.maxVitaminA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminA", r.maxVitaminA, "")
	}
	if r.minVitaminC != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminC", r.minVitaminC, "")
	}
	if r.maxVitaminC != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminC", r.maxVitaminC, "")
	}
	if r.minVitaminD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminD", r.minVitaminD, "")
	}
	if r.maxVitaminD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminD", r.maxVitaminD, "")
	}
	if r.minVitaminE != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminE", r.minVitaminE, "")
	}
	if r.maxVitaminE != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminE", r.maxVitaminE, "")
	}
	if r.minVitaminK != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminK", r.minVitaminK, "")
	}
	if r.maxVitaminK != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminK", r.maxVitaminK, "")
	}
	if r.minVitaminB1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB1", r.minVitaminB1, "")
	}
	if r.maxVitaminB1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB1", r.maxVitaminB1, "")
	}
	if r.minVitaminB2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB2", r.minVitaminB2, "")
	}
	if r.maxVitaminB2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB2", r.maxVitaminB2, "")
	}
	if r.minVitaminB5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB5", r.minVitaminB5, "")
	}
	if r.maxVitaminB5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB5", r.maxVitaminB5, "")
	}
	if r.minVitaminB3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB3", r.minVitaminB3, "")
	}
	if r.maxVitaminB3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB3", r.maxVitaminB3, "")
	}
	if r.minVitaminB6 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB6", r.minVitaminB6, "")
	}
	if r.maxVitaminB6 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB6", r.maxVitaminB6, "")
	}
	if r.minVitaminB12 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB12", r.minVitaminB12, "")
	}
	if r.maxVitaminB12 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB12", r.maxVitaminB12, "")
	}
	if r.minFiber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFiber", r.minFiber, "")
	}
	if r.maxFiber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFiber", r.maxFiber, "")
	}
	if r.minFolate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFolate", r.minFolate, "")
	}
	if r.maxFolate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFolate", r.maxFolate, "")
	}
	if r.minFolicAcid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFolicAcid", r.minFolicAcid, "")
	}
	if r.maxFolicAcid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFolicAcid", r.maxFolicAcid, "")
	}
	if r.minIodine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minIodine", r.minIodine, "")
	}
	if r.maxIodine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxIodine", r.maxIodine, "")
	}
	if r.minIron != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minIron", r.minIron, "")
	}
	if r.maxIron != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxIron", r.maxIron, "")
	}
	if r.minMagnesium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minMagnesium", r.minMagnesium, "")
	}
	if r.maxMagnesium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxMagnesium", r.maxMagnesium, "")
	}
	if r.minManganese != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minManganese", r.minManganese, "")
	}
	if r.maxManganese != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxManganese", r.maxManganese, "")
	}
	if r.minPhosphorus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minPhosphorus", r.minPhosphorus, "")
	}
	if r.maxPhosphorus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxPhosphorus", r.maxPhosphorus, "")
	}
	if r.minPotassium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minPotassium", r.minPotassium, "")
	}
	if r.maxPotassium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxPotassium", r.maxPotassium, "")
	}
	if r.minSelenium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSelenium", r.minSelenium, "")
	}
	if r.maxSelenium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSelenium", r.maxSelenium, "")
	}
	if r.minSodium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSodium", r.minSodium, "")
	}
	if r.maxSodium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSodium", r.maxSodium, "")
	}
	if r.minSugar != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSugar", r.minSugar, "")
	}
	if r.maxSugar != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSugar", r.maxSugar, "")
	}
	if r.minZinc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minZinc", r.minZinc, "")
	}
	if r.maxZinc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxZinc", r.maxZinc, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	} else {
		var defaultValue int32 = 10
		r.number = &defaultValue
	}
	if r.limitLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limitLicense", r.limitLicense, "")
	} else {
		var defaultValue bool = true
		r.limitLicense = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchRecipesByIngredientsRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ingredients *string
	number *int32
	limitLicense *bool
	ranking *float32
	ignorePantry *bool
}

// A comma-separated list of ingredients that the recipes should contain.
func (r ApiSearchRecipesByIngredientsRequest) Ingredients(ingredients string) ApiSearchRecipesByIngredientsRequest {
	r.ingredients = &ingredients
	return r
}

// The maximum number of items to return (between 1 and 100). Defaults to 10.
func (r ApiSearchRecipesByIngredientsRequest) Number(number int32) ApiSearchRecipesByIngredientsRequest {
	r.number = &number
	return r
}

// Whether the recipes should have an open license that allows display with proper attribution.
func (r ApiSearchRecipesByIngredientsRequest) LimitLicense(limitLicense bool) ApiSearchRecipesByIngredientsRequest {
	r.limitLicense = &limitLicense
	return r
}

// Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
func (r ApiSearchRecipesByIngredientsRequest) Ranking(ranking float32) ApiSearchRecipesByIngredientsRequest {
	r.ranking = &ranking
	return r
}

// Whether to ignore typical pantry items, such as water, salt, flour, etc.
func (r ApiSearchRecipesByIngredientsRequest) IgnorePantry(ignorePantry bool) ApiSearchRecipesByIngredientsRequest {
	r.ignorePantry = &ignorePantry
	return r
}

func (r ApiSearchRecipesByIngredientsRequest) Execute() ([]SearchRecipesByIngredients200ResponseInner, *http.Response, error) {
	return r.ApiService.SearchRecipesByIngredientsExecute(r)
}

/*
SearchRecipesByIngredients Search Recipes by Ingredients


Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).
        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchRecipesByIngredientsRequest
*/
func (a *RecipesAPIService) SearchRecipesByIngredients(ctx context.Context) ApiSearchRecipesByIngredientsRequest {
	return ApiSearchRecipesByIngredientsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SearchRecipesByIngredients200ResponseInner
func (a *RecipesAPIService) SearchRecipesByIngredientsExecute(r ApiSearchRecipesByIngredientsRequest) ([]SearchRecipesByIngredients200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SearchRecipesByIngredients200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.SearchRecipesByIngredients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/findByIngredients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ingredients != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ingredients", r.ingredients, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	} else {
		var defaultValue int32 = 10
		r.number = &defaultValue
	}
	if r.limitLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limitLicense", r.limitLicense, "")
	} else {
		var defaultValue bool = true
		r.limitLicense = &defaultValue
	}
	if r.ranking != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ranking", r.ranking, "")
	}
	if r.ignorePantry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ignorePantry", r.ignorePantry, "")
	} else {
		var defaultValue bool = false
		r.ignorePantry = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchRecipesByNutrientsRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	minCarbs *float32
	maxCarbs *float32
	minProtein *float32
	maxProtein *float32
	minCalories *float32
	maxCalories *float32
	minFat *float32
	maxFat *float32
	minAlcohol *float32
	maxAlcohol *float32
	minCaffeine *float32
	maxCaffeine *float32
	minCopper *float32
	maxCopper *float32
	minCalcium *float32
	maxCalcium *float32
	minCholine *float32
	maxCholine *float32
	minCholesterol *float32
	maxCholesterol *float32
	minFluoride *float32
	maxFluoride *float32
	minSaturatedFat *float32
	maxSaturatedFat *float32
	minVitaminA *float32
	maxVitaminA *float32
	minVitaminC *float32
	maxVitaminC *float32
	minVitaminD *float32
	maxVitaminD *float32
	minVitaminE *float32
	maxVitaminE *float32
	minVitaminK *float32
	maxVitaminK *float32
	minVitaminB1 *float32
	maxVitaminB1 *float32
	minVitaminB2 *float32
	maxVitaminB2 *float32
	minVitaminB5 *float32
	maxVitaminB5 *float32
	minVitaminB3 *float32
	maxVitaminB3 *float32
	minVitaminB6 *float32
	maxVitaminB6 *float32
	minVitaminB12 *float32
	maxVitaminB12 *float32
	minFiber *float32
	maxFiber *float32
	minFolate *float32
	maxFolate *float32
	minFolicAcid *float32
	maxFolicAcid *float32
	minIodine *float32
	maxIodine *float32
	minIron *float32
	maxIron *float32
	minMagnesium *float32
	maxMagnesium *float32
	minManganese *float32
	maxManganese *float32
	minPhosphorus *float32
	maxPhosphorus *float32
	minPotassium *float32
	maxPotassium *float32
	minSelenium *float32
	maxSelenium *float32
	minSodium *float32
	maxSodium *float32
	minSugar *float32
	maxSugar *float32
	minZinc *float32
	maxZinc *float32
	offset *int32
	number *int32
	random *bool
	limitLicense *bool
}

// The minimum amount of carbohydrates in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCarbs(minCarbs float32) ApiSearchRecipesByNutrientsRequest {
	r.minCarbs = &minCarbs
	return r
}

// The maximum amount of carbohydrates in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCarbs(maxCarbs float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCarbs = &maxCarbs
	return r
}

// The minimum amount of protein in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinProtein(minProtein float32) ApiSearchRecipesByNutrientsRequest {
	r.minProtein = &minProtein
	return r
}

// The maximum amount of protein in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxProtein(maxProtein float32) ApiSearchRecipesByNutrientsRequest {
	r.maxProtein = &maxProtein
	return r
}

// The minimum amount of calories the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCalories(minCalories float32) ApiSearchRecipesByNutrientsRequest {
	r.minCalories = &minCalories
	return r
}

// The maximum amount of calories the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCalories(maxCalories float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCalories = &maxCalories
	return r
}

// The minimum amount of fat in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinFat(minFat float32) ApiSearchRecipesByNutrientsRequest {
	r.minFat = &minFat
	return r
}

// The maximum amount of fat in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxFat(maxFat float32) ApiSearchRecipesByNutrientsRequest {
	r.maxFat = &maxFat
	return r
}

// The minimum amount of alcohol in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinAlcohol(minAlcohol float32) ApiSearchRecipesByNutrientsRequest {
	r.minAlcohol = &minAlcohol
	return r
}

// The maximum amount of alcohol in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxAlcohol(maxAlcohol float32) ApiSearchRecipesByNutrientsRequest {
	r.maxAlcohol = &maxAlcohol
	return r
}

// The minimum amount of caffeine in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCaffeine(minCaffeine float32) ApiSearchRecipesByNutrientsRequest {
	r.minCaffeine = &minCaffeine
	return r
}

// The maximum amount of caffeine in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCaffeine(maxCaffeine float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCaffeine = &maxCaffeine
	return r
}

// The minimum amount of copper in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCopper(minCopper float32) ApiSearchRecipesByNutrientsRequest {
	r.minCopper = &minCopper
	return r
}

// The maximum amount of copper in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCopper(maxCopper float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCopper = &maxCopper
	return r
}

// The minimum amount of calcium in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCalcium(minCalcium float32) ApiSearchRecipesByNutrientsRequest {
	r.minCalcium = &minCalcium
	return r
}

// The maximum amount of calcium in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCalcium(maxCalcium float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCalcium = &maxCalcium
	return r
}

// The minimum amount of choline in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCholine(minCholine float32) ApiSearchRecipesByNutrientsRequest {
	r.minCholine = &minCholine
	return r
}

// The maximum amount of choline in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCholine(maxCholine float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCholine = &maxCholine
	return r
}

// The minimum amount of cholesterol in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinCholesterol(minCholesterol float32) ApiSearchRecipesByNutrientsRequest {
	r.minCholesterol = &minCholesterol
	return r
}

// The maximum amount of cholesterol in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxCholesterol(maxCholesterol float32) ApiSearchRecipesByNutrientsRequest {
	r.maxCholesterol = &maxCholesterol
	return r
}

// The minimum amount of fluoride in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinFluoride(minFluoride float32) ApiSearchRecipesByNutrientsRequest {
	r.minFluoride = &minFluoride
	return r
}

// The maximum amount of fluoride in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxFluoride(maxFluoride float32) ApiSearchRecipesByNutrientsRequest {
	r.maxFluoride = &maxFluoride
	return r
}

// The minimum amount of saturated fat in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinSaturatedFat(minSaturatedFat float32) ApiSearchRecipesByNutrientsRequest {
	r.minSaturatedFat = &minSaturatedFat
	return r
}

// The maximum amount of saturated fat in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxSaturatedFat(maxSaturatedFat float32) ApiSearchRecipesByNutrientsRequest {
	r.maxSaturatedFat = &maxSaturatedFat
	return r
}

// The minimum amount of Vitamin A in IU the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminA(minVitaminA float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminA = &minVitaminA
	return r
}

// The maximum amount of Vitamin A in IU the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminA(maxVitaminA float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminA = &maxVitaminA
	return r
}

// The minimum amount of Vitamin C in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminC(minVitaminC float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminC = &minVitaminC
	return r
}

// The maximum amount of Vitamin C in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminC(maxVitaminC float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminC = &maxVitaminC
	return r
}

// The minimum amount of Vitamin D in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminD(minVitaminD float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminD = &minVitaminD
	return r
}

// The maximum amount of Vitamin D in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminD(maxVitaminD float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminD = &maxVitaminD
	return r
}

// The minimum amount of Vitamin E in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminE(minVitaminE float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminE = &minVitaminE
	return r
}

// The maximum amount of Vitamin E in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminE(maxVitaminE float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminE = &maxVitaminE
	return r
}

// The minimum amount of Vitamin K in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminK(minVitaminK float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminK = &minVitaminK
	return r
}

// The maximum amount of Vitamin K in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminK(maxVitaminK float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminK = &maxVitaminK
	return r
}

// The minimum amount of Vitamin B1 in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminB1(minVitaminB1 float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminB1 = &minVitaminB1
	return r
}

// The maximum amount of Vitamin B1 in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminB1(maxVitaminB1 float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminB1 = &maxVitaminB1
	return r
}

// The minimum amount of Vitamin B2 in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminB2(minVitaminB2 float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminB2 = &minVitaminB2
	return r
}

// The maximum amount of Vitamin B2 in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminB2(maxVitaminB2 float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminB2 = &maxVitaminB2
	return r
}

// The minimum amount of Vitamin B5 in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminB5(minVitaminB5 float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminB5 = &minVitaminB5
	return r
}

// The maximum amount of Vitamin B5 in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminB5(maxVitaminB5 float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminB5 = &maxVitaminB5
	return r
}

// The minimum amount of Vitamin B3 in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminB3(minVitaminB3 float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminB3 = &minVitaminB3
	return r
}

// The maximum amount of Vitamin B3 in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminB3(maxVitaminB3 float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminB3 = &maxVitaminB3
	return r
}

// The minimum amount of Vitamin B6 in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminB6(minVitaminB6 float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminB6 = &minVitaminB6
	return r
}

// The maximum amount of Vitamin B6 in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminB6(maxVitaminB6 float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminB6 = &maxVitaminB6
	return r
}

// The minimum amount of Vitamin B12 in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinVitaminB12(minVitaminB12 float32) ApiSearchRecipesByNutrientsRequest {
	r.minVitaminB12 = &minVitaminB12
	return r
}

// The maximum amount of Vitamin B12 in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxVitaminB12(maxVitaminB12 float32) ApiSearchRecipesByNutrientsRequest {
	r.maxVitaminB12 = &maxVitaminB12
	return r
}

// The minimum amount of fiber in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinFiber(minFiber float32) ApiSearchRecipesByNutrientsRequest {
	r.minFiber = &minFiber
	return r
}

// The maximum amount of fiber in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxFiber(maxFiber float32) ApiSearchRecipesByNutrientsRequest {
	r.maxFiber = &maxFiber
	return r
}

// The minimum amount of folate in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinFolate(minFolate float32) ApiSearchRecipesByNutrientsRequest {
	r.minFolate = &minFolate
	return r
}

// The maximum amount of folate in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxFolate(maxFolate float32) ApiSearchRecipesByNutrientsRequest {
	r.maxFolate = &maxFolate
	return r
}

// The minimum amount of folic acid in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinFolicAcid(minFolicAcid float32) ApiSearchRecipesByNutrientsRequest {
	r.minFolicAcid = &minFolicAcid
	return r
}

// The maximum amount of folic acid in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxFolicAcid(maxFolicAcid float32) ApiSearchRecipesByNutrientsRequest {
	r.maxFolicAcid = &maxFolicAcid
	return r
}

// The minimum amount of iodine in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinIodine(minIodine float32) ApiSearchRecipesByNutrientsRequest {
	r.minIodine = &minIodine
	return r
}

// The maximum amount of iodine in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxIodine(maxIodine float32) ApiSearchRecipesByNutrientsRequest {
	r.maxIodine = &maxIodine
	return r
}

// The minimum amount of iron in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinIron(minIron float32) ApiSearchRecipesByNutrientsRequest {
	r.minIron = &minIron
	return r
}

// The maximum amount of iron in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxIron(maxIron float32) ApiSearchRecipesByNutrientsRequest {
	r.maxIron = &maxIron
	return r
}

// The minimum amount of magnesium in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinMagnesium(minMagnesium float32) ApiSearchRecipesByNutrientsRequest {
	r.minMagnesium = &minMagnesium
	return r
}

// The maximum amount of magnesium in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxMagnesium(maxMagnesium float32) ApiSearchRecipesByNutrientsRequest {
	r.maxMagnesium = &maxMagnesium
	return r
}

// The minimum amount of manganese in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinManganese(minManganese float32) ApiSearchRecipesByNutrientsRequest {
	r.minManganese = &minManganese
	return r
}

// The maximum amount of manganese in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxManganese(maxManganese float32) ApiSearchRecipesByNutrientsRequest {
	r.maxManganese = &maxManganese
	return r
}

// The minimum amount of phosphorus in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinPhosphorus(minPhosphorus float32) ApiSearchRecipesByNutrientsRequest {
	r.minPhosphorus = &minPhosphorus
	return r
}

// The maximum amount of phosphorus in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxPhosphorus(maxPhosphorus float32) ApiSearchRecipesByNutrientsRequest {
	r.maxPhosphorus = &maxPhosphorus
	return r
}

// The minimum amount of potassium in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinPotassium(minPotassium float32) ApiSearchRecipesByNutrientsRequest {
	r.minPotassium = &minPotassium
	return r
}

// The maximum amount of potassium in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxPotassium(maxPotassium float32) ApiSearchRecipesByNutrientsRequest {
	r.maxPotassium = &maxPotassium
	return r
}

// The minimum amount of selenium in micrograms the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinSelenium(minSelenium float32) ApiSearchRecipesByNutrientsRequest {
	r.minSelenium = &minSelenium
	return r
}

// The maximum amount of selenium in micrograms the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxSelenium(maxSelenium float32) ApiSearchRecipesByNutrientsRequest {
	r.maxSelenium = &maxSelenium
	return r
}

// The minimum amount of sodium in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinSodium(minSodium float32) ApiSearchRecipesByNutrientsRequest {
	r.minSodium = &minSodium
	return r
}

// The maximum amount of sodium in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxSodium(maxSodium float32) ApiSearchRecipesByNutrientsRequest {
	r.maxSodium = &maxSodium
	return r
}

// The minimum amount of sugar in grams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinSugar(minSugar float32) ApiSearchRecipesByNutrientsRequest {
	r.minSugar = &minSugar
	return r
}

// The maximum amount of sugar in grams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxSugar(maxSugar float32) ApiSearchRecipesByNutrientsRequest {
	r.maxSugar = &maxSugar
	return r
}

// The minimum amount of zinc in milligrams the recipe must have.
func (r ApiSearchRecipesByNutrientsRequest) MinZinc(minZinc float32) ApiSearchRecipesByNutrientsRequest {
	r.minZinc = &minZinc
	return r
}

// The maximum amount of zinc in milligrams the recipe can have.
func (r ApiSearchRecipesByNutrientsRequest) MaxZinc(maxZinc float32) ApiSearchRecipesByNutrientsRequest {
	r.maxZinc = &maxZinc
	return r
}

// The number of results to skip (between 0 and 900).
func (r ApiSearchRecipesByNutrientsRequest) Offset(offset int32) ApiSearchRecipesByNutrientsRequest {
	r.offset = &offset
	return r
}

// The maximum number of items to return (between 1 and 100). Defaults to 10.
func (r ApiSearchRecipesByNutrientsRequest) Number(number int32) ApiSearchRecipesByNutrientsRequest {
	r.number = &number
	return r
}

// If true, every request will give you a random set of recipes within the requested limits.
func (r ApiSearchRecipesByNutrientsRequest) Random(random bool) ApiSearchRecipesByNutrientsRequest {
	r.random = &random
	return r
}

// Whether the recipes should have an open license that allows display with proper attribution.
func (r ApiSearchRecipesByNutrientsRequest) LimitLicense(limitLicense bool) ApiSearchRecipesByNutrientsRequest {
	r.limitLicense = &limitLicense
	return r
}

func (r ApiSearchRecipesByNutrientsRequest) Execute() ([]SearchRecipesByNutrients200ResponseInner, *http.Response, error) {
	return r.ApiService.SearchRecipesByNutrientsExecute(r)
}

/*
SearchRecipesByNutrients Search Recipes by Nutrients

Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchRecipesByNutrientsRequest
*/
func (a *RecipesAPIService) SearchRecipesByNutrients(ctx context.Context) ApiSearchRecipesByNutrientsRequest {
	return ApiSearchRecipesByNutrientsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SearchRecipesByNutrients200ResponseInner
func (a *RecipesAPIService) SearchRecipesByNutrientsExecute(r ApiSearchRecipesByNutrientsRequest) ([]SearchRecipesByNutrients200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SearchRecipesByNutrients200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.SearchRecipesByNutrients")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/findByNutrients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minCarbs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCarbs", r.minCarbs, "")
	}
	if r.maxCarbs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCarbs", r.maxCarbs, "")
	}
	if r.minProtein != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minProtein", r.minProtein, "")
	}
	if r.maxProtein != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxProtein", r.maxProtein, "")
	}
	if r.minCalories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCalories", r.minCalories, "")
	}
	if r.maxCalories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCalories", r.maxCalories, "")
	}
	if r.minFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFat", r.minFat, "")
	}
	if r.maxFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFat", r.maxFat, "")
	}
	if r.minAlcohol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minAlcohol", r.minAlcohol, "")
	}
	if r.maxAlcohol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxAlcohol", r.maxAlcohol, "")
	}
	if r.minCaffeine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCaffeine", r.minCaffeine, "")
	}
	if r.maxCaffeine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCaffeine", r.maxCaffeine, "")
	}
	if r.minCopper != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCopper", r.minCopper, "")
	}
	if r.maxCopper != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCopper", r.maxCopper, "")
	}
	if r.minCalcium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCalcium", r.minCalcium, "")
	}
	if r.maxCalcium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCalcium", r.maxCalcium, "")
	}
	if r.minCholine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCholine", r.minCholine, "")
	}
	if r.maxCholine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCholine", r.maxCholine, "")
	}
	if r.minCholesterol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minCholesterol", r.minCholesterol, "")
	}
	if r.maxCholesterol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxCholesterol", r.maxCholesterol, "")
	}
	if r.minFluoride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFluoride", r.minFluoride, "")
	}
	if r.maxFluoride != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFluoride", r.maxFluoride, "")
	}
	if r.minSaturatedFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSaturatedFat", r.minSaturatedFat, "")
	}
	if r.maxSaturatedFat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSaturatedFat", r.maxSaturatedFat, "")
	}
	if r.minVitaminA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminA", r.minVitaminA, "")
	}
	if r.maxVitaminA != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminA", r.maxVitaminA, "")
	}
	if r.minVitaminC != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminC", r.minVitaminC, "")
	}
	if r.maxVitaminC != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminC", r.maxVitaminC, "")
	}
	if r.minVitaminD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminD", r.minVitaminD, "")
	}
	if r.maxVitaminD != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminD", r.maxVitaminD, "")
	}
	if r.minVitaminE != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminE", r.minVitaminE, "")
	}
	if r.maxVitaminE != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminE", r.maxVitaminE, "")
	}
	if r.minVitaminK != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminK", r.minVitaminK, "")
	}
	if r.maxVitaminK != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminK", r.maxVitaminK, "")
	}
	if r.minVitaminB1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB1", r.minVitaminB1, "")
	}
	if r.maxVitaminB1 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB1", r.maxVitaminB1, "")
	}
	if r.minVitaminB2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB2", r.minVitaminB2, "")
	}
	if r.maxVitaminB2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB2", r.maxVitaminB2, "")
	}
	if r.minVitaminB5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB5", r.minVitaminB5, "")
	}
	if r.maxVitaminB5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB5", r.maxVitaminB5, "")
	}
	if r.minVitaminB3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB3", r.minVitaminB3, "")
	}
	if r.maxVitaminB3 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB3", r.maxVitaminB3, "")
	}
	if r.minVitaminB6 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB6", r.minVitaminB6, "")
	}
	if r.maxVitaminB6 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB6", r.maxVitaminB6, "")
	}
	if r.minVitaminB12 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minVitaminB12", r.minVitaminB12, "")
	}
	if r.maxVitaminB12 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxVitaminB12", r.maxVitaminB12, "")
	}
	if r.minFiber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFiber", r.minFiber, "")
	}
	if r.maxFiber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFiber", r.maxFiber, "")
	}
	if r.minFolate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFolate", r.minFolate, "")
	}
	if r.maxFolate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFolate", r.maxFolate, "")
	}
	if r.minFolicAcid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minFolicAcid", r.minFolicAcid, "")
	}
	if r.maxFolicAcid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFolicAcid", r.maxFolicAcid, "")
	}
	if r.minIodine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minIodine", r.minIodine, "")
	}
	if r.maxIodine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxIodine", r.maxIodine, "")
	}
	if r.minIron != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minIron", r.minIron, "")
	}
	if r.maxIron != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxIron", r.maxIron, "")
	}
	if r.minMagnesium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minMagnesium", r.minMagnesium, "")
	}
	if r.maxMagnesium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxMagnesium", r.maxMagnesium, "")
	}
	if r.minManganese != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minManganese", r.minManganese, "")
	}
	if r.maxManganese != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxManganese", r.maxManganese, "")
	}
	if r.minPhosphorus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minPhosphorus", r.minPhosphorus, "")
	}
	if r.maxPhosphorus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxPhosphorus", r.maxPhosphorus, "")
	}
	if r.minPotassium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minPotassium", r.minPotassium, "")
	}
	if r.maxPotassium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxPotassium", r.maxPotassium, "")
	}
	if r.minSelenium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSelenium", r.minSelenium, "")
	}
	if r.maxSelenium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSelenium", r.maxSelenium, "")
	}
	if r.minSodium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSodium", r.minSodium, "")
	}
	if r.maxSodium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSodium", r.maxSodium, "")
	}
	if r.minSugar != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minSugar", r.minSugar, "")
	}
	if r.maxSugar != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxSugar", r.maxSugar, "")
	}
	if r.minZinc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "minZinc", r.minZinc, "")
	}
	if r.maxZinc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxZinc", r.maxZinc, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	} else {
		var defaultValue int32 = 10
		r.number = &defaultValue
	}
	if r.random != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "random", r.random, "")
	}
	if r.limitLicense != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limitLicense", r.limitLicense, "")
	} else {
		var defaultValue bool = true
		r.limitLicense = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSummarizeRecipeRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
}

func (r ApiSummarizeRecipeRequest) Execute() (*SummarizeRecipe200Response, *http.Response, error) {
	return r.ApiService.SummarizeRecipeExecute(r)
}

/*
SummarizeRecipe Summarize Recipe

Automatically generate a short description that summarizes key information about the recipe.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiSummarizeRecipeRequest
*/
func (a *RecipesAPIService) SummarizeRecipe(ctx context.Context, id int32) ApiSummarizeRecipeRequest {
	return ApiSummarizeRecipeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SummarizeRecipe200Response
func (a *RecipesAPIService) SummarizeRecipeExecute(r ApiSummarizeRecipeRequest) (*SummarizeRecipe200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SummarizeRecipe200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.SummarizeRecipe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeEquipmentRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	instructions *string
	view *string
	defaultCss *bool
	showBacklink *bool
}

// The recipe&#39;s instructions.
func (r ApiVisualizeEquipmentRequest) Instructions(instructions string) ApiVisualizeEquipmentRequest {
	r.instructions = &instructions
	return r
}

// How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;.
func (r ApiVisualizeEquipmentRequest) View(view string) ApiVisualizeEquipmentRequest {
	r.view = &view
	return r
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizeEquipmentRequest) DefaultCss(defaultCss bool) ApiVisualizeEquipmentRequest {
	r.defaultCss = &defaultCss
	return r
}

// Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
func (r ApiVisualizeEquipmentRequest) ShowBacklink(showBacklink bool) ApiVisualizeEquipmentRequest {
	r.showBacklink = &showBacklink
	return r
}

func (r ApiVisualizeEquipmentRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeEquipmentExecute(r)
}

/*
VisualizeEquipment Equipment Widget

Visualize the equipment used to make a recipe.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVisualizeEquipmentRequest
*/
func (a *RecipesAPIService) VisualizeEquipment(ctx context.Context) ApiVisualizeEquipmentRequest {
	return ApiVisualizeEquipmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeEquipmentExecute(r ApiVisualizeEquipmentRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeEquipment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/visualizeEquipment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instructions == nil {
		return localVarReturnValue, nil, reportError("instructions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "instructions", r.instructions, "")
	if r.view != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "view", r.view, "")
	}
	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "defaultCss", r.defaultCss, "")
	}
	if r.showBacklink != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "showBacklink", r.showBacklink, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizePriceBreakdownRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ingredientList *string
	servings *float32
	language *string
	mode *float32
	defaultCss *bool
	showBacklink *bool
}

// The ingredient list of the recipe, one ingredient per line.
func (r ApiVisualizePriceBreakdownRequest) IngredientList(ingredientList string) ApiVisualizePriceBreakdownRequest {
	r.ingredientList = &ingredientList
	return r
}

// The number of servings.
func (r ApiVisualizePriceBreakdownRequest) Servings(servings float32) ApiVisualizePriceBreakdownRequest {
	r.servings = &servings
	return r
}

// The language of the input. Either &#39;en&#39; or &#39;de&#39;.
func (r ApiVisualizePriceBreakdownRequest) Language(language string) ApiVisualizePriceBreakdownRequest {
	r.language = &language
	return r
}

// The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
func (r ApiVisualizePriceBreakdownRequest) Mode(mode float32) ApiVisualizePriceBreakdownRequest {
	r.mode = &mode
	return r
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizePriceBreakdownRequest) DefaultCss(defaultCss bool) ApiVisualizePriceBreakdownRequest {
	r.defaultCss = &defaultCss
	return r
}

// Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
func (r ApiVisualizePriceBreakdownRequest) ShowBacklink(showBacklink bool) ApiVisualizePriceBreakdownRequest {
	r.showBacklink = &showBacklink
	return r
}

func (r ApiVisualizePriceBreakdownRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizePriceBreakdownExecute(r)
}

/*
VisualizePriceBreakdown Price Breakdown Widget

Visualize the price breakdown of a recipe.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVisualizePriceBreakdownRequest
*/
func (a *RecipesAPIService) VisualizePriceBreakdown(ctx context.Context) ApiVisualizePriceBreakdownRequest {
	return ApiVisualizePriceBreakdownRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizePriceBreakdownExecute(r ApiVisualizePriceBreakdownRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizePriceBreakdown")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/visualizePriceEstimator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ingredientList == nil {
		return localVarReturnValue, nil, reportError("ingredientList is required and must be specified")
	}
	if r.servings == nil {
		return localVarReturnValue, nil, reportError("servings is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "ingredientList", r.ingredientList, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "servings", r.servings, "")
	if r.mode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "mode", r.mode, "")
	}
	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "defaultCss", r.defaultCss, "")
	}
	if r.showBacklink != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "showBacklink", r.showBacklink, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipeEquipmentByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	defaultCss *bool
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizeRecipeEquipmentByIDRequest) DefaultCss(defaultCss bool) ApiVisualizeRecipeEquipmentByIDRequest {
	r.defaultCss = &defaultCss
	return r
}

func (r ApiVisualizeRecipeEquipmentByIDRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipeEquipmentByIDExecute(r)
}

/*
VisualizeRecipeEquipmentByID Equipment by ID Widget

Visualize a recipe's equipment list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiVisualizeRecipeEquipmentByIDRequest
*/
func (a *RecipesAPIService) VisualizeRecipeEquipmentByID(ctx context.Context, id int32) ApiVisualizeRecipeEquipmentByIDRequest {
	return ApiVisualizeRecipeEquipmentByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipeEquipmentByIDExecute(r ApiVisualizeRecipeEquipmentByIDRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipeEquipmentByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/equipmentWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCss", r.defaultCss, "")
	} else {
		var defaultValue bool = true
		r.defaultCss = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipeIngredientsByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	defaultCss *bool
	measure *string
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizeRecipeIngredientsByIDRequest) DefaultCss(defaultCss bool) ApiVisualizeRecipeIngredientsByIDRequest {
	r.defaultCss = &defaultCss
	return r
}

// Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
func (r ApiVisualizeRecipeIngredientsByIDRequest) Measure(measure string) ApiVisualizeRecipeIngredientsByIDRequest {
	r.measure = &measure
	return r
}

func (r ApiVisualizeRecipeIngredientsByIDRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipeIngredientsByIDExecute(r)
}

/*
VisualizeRecipeIngredientsByID Ingredients by ID Widget

Visualize a recipe's ingredient list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiVisualizeRecipeIngredientsByIDRequest
*/
func (a *RecipesAPIService) VisualizeRecipeIngredientsByID(ctx context.Context, id int32) ApiVisualizeRecipeIngredientsByIDRequest {
	return ApiVisualizeRecipeIngredientsByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipeIngredientsByIDExecute(r ApiVisualizeRecipeIngredientsByIDRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipeIngredientsByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/ingredientWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCss", r.defaultCss, "")
	} else {
		var defaultValue bool = true
		r.defaultCss = &defaultValue
	}
	if r.measure != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measure", r.measure, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipeNutritionRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ingredientList *string
	servings *float32
	language *string
	defaultCss *bool
	showBacklink *bool
}

// The ingredient list of the recipe, one ingredient per line.
func (r ApiVisualizeRecipeNutritionRequest) IngredientList(ingredientList string) ApiVisualizeRecipeNutritionRequest {
	r.ingredientList = &ingredientList
	return r
}

// The number of servings.
func (r ApiVisualizeRecipeNutritionRequest) Servings(servings float32) ApiVisualizeRecipeNutritionRequest {
	r.servings = &servings
	return r
}

// The language of the input. Either &#39;en&#39; or &#39;de&#39;.
func (r ApiVisualizeRecipeNutritionRequest) Language(language string) ApiVisualizeRecipeNutritionRequest {
	r.language = &language
	return r
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizeRecipeNutritionRequest) DefaultCss(defaultCss bool) ApiVisualizeRecipeNutritionRequest {
	r.defaultCss = &defaultCss
	return r
}

// Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
func (r ApiVisualizeRecipeNutritionRequest) ShowBacklink(showBacklink bool) ApiVisualizeRecipeNutritionRequest {
	r.showBacklink = &showBacklink
	return r
}

func (r ApiVisualizeRecipeNutritionRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipeNutritionExecute(r)
}

/*
VisualizeRecipeNutrition Recipe Nutrition Widget

Visualize a recipe's nutritional information as HTML including CSS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVisualizeRecipeNutritionRequest
*/
func (a *RecipesAPIService) VisualizeRecipeNutrition(ctx context.Context) ApiVisualizeRecipeNutritionRequest {
	return ApiVisualizeRecipeNutritionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipeNutritionExecute(r ApiVisualizeRecipeNutritionRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipeNutrition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/visualizeNutrition"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ingredientList == nil {
		return localVarReturnValue, nil, reportError("ingredientList is required and must be specified")
	}
	if r.servings == nil {
		return localVarReturnValue, nil, reportError("servings is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "ingredientList", r.ingredientList, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "servings", r.servings, "")
	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "defaultCss", r.defaultCss, "")
	}
	if r.showBacklink != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "showBacklink", r.showBacklink, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipeNutritionByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	defaultCss *bool
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizeRecipeNutritionByIDRequest) DefaultCss(defaultCss bool) ApiVisualizeRecipeNutritionByIDRequest {
	r.defaultCss = &defaultCss
	return r
}

func (r ApiVisualizeRecipeNutritionByIDRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipeNutritionByIDExecute(r)
}

/*
VisualizeRecipeNutritionByID Recipe Nutrition by ID Widget

Visualize a recipe's nutritional information as HTML including CSS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiVisualizeRecipeNutritionByIDRequest
*/
func (a *RecipesAPIService) VisualizeRecipeNutritionByID(ctx context.Context, id int32) ApiVisualizeRecipeNutritionByIDRequest {
	return ApiVisualizeRecipeNutritionByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipeNutritionByIDExecute(r ApiVisualizeRecipeNutritionByIDRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipeNutritionByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/nutritionWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCss", r.defaultCss, "")
	} else {
		var defaultValue bool = true
		r.defaultCss = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipePriceBreakdownByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	defaultCss *bool
}

// Whether the default CSS should be added to the response.
func (r ApiVisualizeRecipePriceBreakdownByIDRequest) DefaultCss(defaultCss bool) ApiVisualizeRecipePriceBreakdownByIDRequest {
	r.defaultCss = &defaultCss
	return r
}

func (r ApiVisualizeRecipePriceBreakdownByIDRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipePriceBreakdownByIDExecute(r)
}

/*
VisualizeRecipePriceBreakdownByID Price Breakdown by ID Widget

Visualize a recipe's price breakdown.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiVisualizeRecipePriceBreakdownByIDRequest
*/
func (a *RecipesAPIService) VisualizeRecipePriceBreakdownByID(ctx context.Context, id int32) ApiVisualizeRecipePriceBreakdownByIDRequest {
	return ApiVisualizeRecipePriceBreakdownByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipePriceBreakdownByIDExecute(r ApiVisualizeRecipePriceBreakdownByIDRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipePriceBreakdownByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/priceBreakdownWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.defaultCss != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultCss", r.defaultCss, "")
	} else {
		var defaultValue bool = true
		r.defaultCss = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipeTasteRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	ingredientList *string
	language *string
	normalize *bool
	rgb *string
}

// The ingredient list of the recipe, one ingredient per line.
func (r ApiVisualizeRecipeTasteRequest) IngredientList(ingredientList string) ApiVisualizeRecipeTasteRequest {
	r.ingredientList = &ingredientList
	return r
}

// The language of the input. Either &#39;en&#39; or &#39;de&#39;.
func (r ApiVisualizeRecipeTasteRequest) Language(language string) ApiVisualizeRecipeTasteRequest {
	r.language = &language
	return r
}

// Normalize to the strongest taste.
func (r ApiVisualizeRecipeTasteRequest) Normalize(normalize bool) ApiVisualizeRecipeTasteRequest {
	r.normalize = &normalize
	return r
}

// Red, green, blue values for the chart color.
func (r ApiVisualizeRecipeTasteRequest) Rgb(rgb string) ApiVisualizeRecipeTasteRequest {
	r.rgb = &rgb
	return r
}

func (r ApiVisualizeRecipeTasteRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipeTasteExecute(r)
}

/*
VisualizeRecipeTaste Recipe Taste Widget

Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVisualizeRecipeTasteRequest
*/
func (a *RecipesAPIService) VisualizeRecipeTaste(ctx context.Context) ApiVisualizeRecipeTasteRequest {
	return ApiVisualizeRecipeTasteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipeTasteExecute(r ApiVisualizeRecipeTasteRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipeTaste")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/visualizeTaste"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ingredientList == nil {
		return localVarReturnValue, nil, reportError("ingredientList is required and must be specified")
	}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "ingredientList", r.ingredientList, "")
	if r.normalize != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "normalize", r.normalize, "")
	}
	if r.rgb != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "rgb", r.rgb, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVisualizeRecipeTasteByIDRequest struct {
	ctx context.Context
	ApiService *RecipesAPIService
	id int32
	normalize *bool
	rgb *string
}

// Whether to normalize to the strongest taste.
func (r ApiVisualizeRecipeTasteByIDRequest) Normalize(normalize bool) ApiVisualizeRecipeTasteByIDRequest {
	r.normalize = &normalize
	return r
}

// Red, green, blue values for the chart color.
func (r ApiVisualizeRecipeTasteByIDRequest) Rgb(rgb string) ApiVisualizeRecipeTasteByIDRequest {
	r.rgb = &rgb
	return r
}

func (r ApiVisualizeRecipeTasteByIDRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VisualizeRecipeTasteByIDExecute(r)
}

/*
VisualizeRecipeTasteByID Recipe Taste by ID Widget

Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The item's id.
 @return ApiVisualizeRecipeTasteByIDRequest
*/
func (a *RecipesAPIService) VisualizeRecipeTasteByID(ctx context.Context, id int32) ApiVisualizeRecipeTasteByIDRequest {
	return ApiVisualizeRecipeTasteByIDRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return string
func (a *RecipesAPIService) VisualizeRecipeTasteByIDExecute(r ApiVisualizeRecipeTasteByIDRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecipesAPIService.VisualizeRecipeTasteByID")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recipes/{id}/tasteWidget"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.normalize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "normalize", r.normalize, "")
	} else {
		var defaultValue bool = true
		r.normalize = &defaultValue
	}
	if r.rgb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rgb", r.rgb, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyScheme"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
