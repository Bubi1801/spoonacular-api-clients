/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
)

// checks if the AnalyzeRecipeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeRecipeRequest{}

// AnalyzeRecipeRequest struct for AnalyzeRecipeRequest
type AnalyzeRecipeRequest struct {
	Title *string `json:"title,omitempty"`
	Servings *int32 `json:"servings,omitempty"`
	Ingredients []string `json:"ingredients,omitempty"`
	Instructions *string `json:"instructions,omitempty"`
}

// NewAnalyzeRecipeRequest instantiates a new AnalyzeRecipeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeRecipeRequest() *AnalyzeRecipeRequest {
	this := AnalyzeRecipeRequest{}
	return &this
}

// NewAnalyzeRecipeRequestWithDefaults instantiates a new AnalyzeRecipeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeRecipeRequestWithDefaults() *AnalyzeRecipeRequest {
	this := AnalyzeRecipeRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AnalyzeRecipeRequest) SetTitle(v string) {
	o.Title = &v
}

// GetServings returns the Servings field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetServings() int32 {
	if o == nil || IsNil(o.Servings) {
		var ret int32
		return ret
	}
	return *o.Servings
}

// GetServingsOk returns a tuple with the Servings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetServingsOk() (*int32, bool) {
	if o == nil || IsNil(o.Servings) {
		return nil, false
	}
	return o.Servings, true
}

// HasServings returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasServings() bool {
	if o != nil && !IsNil(o.Servings) {
		return true
	}

	return false
}

// SetServings gets a reference to the given int32 and assigns it to the Servings field.
func (o *AnalyzeRecipeRequest) SetServings(v int32) {
	o.Servings = &v
}

// GetIngredients returns the Ingredients field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetIngredients() []string {
	if o == nil || IsNil(o.Ingredients) {
		var ret []string
		return ret
	}
	return o.Ingredients
}

// GetIngredientsOk returns a tuple with the Ingredients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetIngredientsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ingredients) {
		return nil, false
	}
	return o.Ingredients, true
}

// HasIngredients returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasIngredients() bool {
	if o != nil && !IsNil(o.Ingredients) {
		return true
	}

	return false
}

// SetIngredients gets a reference to the given []string and assigns it to the Ingredients field.
func (o *AnalyzeRecipeRequest) SetIngredients(v []string) {
	o.Ingredients = v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetInstructions() string {
	if o == nil || IsNil(o.Instructions) {
		var ret string
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given string and assigns it to the Instructions field.
func (o *AnalyzeRecipeRequest) SetInstructions(v string) {
	o.Instructions = &v
}

func (o AnalyzeRecipeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeRecipeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Servings) {
		toSerialize["servings"] = o.Servings
	}
	if !IsNil(o.Ingredients) {
		toSerialize["ingredients"] = o.Ingredients
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	return toSerialize, nil
}

type NullableAnalyzeRecipeRequest struct {
	value *AnalyzeRecipeRequest
	isSet bool
}

func (v NullableAnalyzeRecipeRequest) Get() *AnalyzeRecipeRequest {
	return v.value
}

func (v *NullableAnalyzeRecipeRequest) Set(val *AnalyzeRecipeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeRecipeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeRecipeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeRecipeRequest(val *AnalyzeRecipeRequest) *NullableAnalyzeRecipeRequest {
	return &NullableAnalyzeRecipeRequest{value: val, isSet: true}
}

func (v NullableAnalyzeRecipeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeRecipeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


