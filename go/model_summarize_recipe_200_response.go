/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SummarizeRecipe200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummarizeRecipe200Response{}

// SummarizeRecipe200Response 
type SummarizeRecipe200Response struct {
	Id int32 `json:"id"`
	Summary string `json:"summary"`
	Title string `json:"title"`
}

type _SummarizeRecipe200Response SummarizeRecipe200Response

// NewSummarizeRecipe200Response instantiates a new SummarizeRecipe200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummarizeRecipe200Response(id int32, summary string, title string) *SummarizeRecipe200Response {
	this := SummarizeRecipe200Response{}
	this.Id = id
	this.Summary = summary
	this.Title = title
	return &this
}

// NewSummarizeRecipe200ResponseWithDefaults instantiates a new SummarizeRecipe200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummarizeRecipe200ResponseWithDefaults() *SummarizeRecipe200Response {
	this := SummarizeRecipe200Response{}
	return &this
}

// GetId returns the Id field value
func (o *SummarizeRecipe200Response) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SummarizeRecipe200Response) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SummarizeRecipe200Response) SetId(v int32) {
	o.Id = v
}

// GetSummary returns the Summary field value
func (o *SummarizeRecipe200Response) GetSummary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *SummarizeRecipe200Response) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *SummarizeRecipe200Response) SetSummary(v string) {
	o.Summary = v
}

// GetTitle returns the Title field value
func (o *SummarizeRecipe200Response) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SummarizeRecipe200Response) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SummarizeRecipe200Response) SetTitle(v string) {
	o.Title = v
}

func (o SummarizeRecipe200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummarizeRecipe200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["summary"] = o.Summary
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *SummarizeRecipe200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"summary",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSummarizeRecipe200Response := _SummarizeRecipe200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSummarizeRecipe200Response)

	if err != nil {
		return err
	}

	*o = SummarizeRecipe200Response(varSummarizeRecipe200Response)

	return err
}

type NullableSummarizeRecipe200Response struct {
	value *SummarizeRecipe200Response
	isSet bool
}

func (v NullableSummarizeRecipe200Response) Get() *SummarizeRecipe200Response {
	return v.value
}

func (v *NullableSummarizeRecipe200Response) Set(val *SummarizeRecipe200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSummarizeRecipe200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSummarizeRecipe200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummarizeRecipe200Response(val *SummarizeRecipe200Response) *NullableSummarizeRecipe200Response {
	return &NullableSummarizeRecipe200Response{value: val, isSet: true}
}

func (v NullableSummarizeRecipe200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummarizeRecipe200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


