/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetWineRecommendation200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetWineRecommendation200Response{}

// GetWineRecommendation200Response 
type GetWineRecommendation200Response struct {
	RecommendedWines []GetWineRecommendation200ResponseRecommendedWinesInner `json:"recommendedWines"`
	TotalFound int32 `json:"totalFound"`
}

type _GetWineRecommendation200Response GetWineRecommendation200Response

// NewGetWineRecommendation200Response instantiates a new GetWineRecommendation200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetWineRecommendation200Response(recommendedWines []GetWineRecommendation200ResponseRecommendedWinesInner, totalFound int32) *GetWineRecommendation200Response {
	this := GetWineRecommendation200Response{}
	this.RecommendedWines = recommendedWines
	this.TotalFound = totalFound
	return &this
}

// NewGetWineRecommendation200ResponseWithDefaults instantiates a new GetWineRecommendation200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetWineRecommendation200ResponseWithDefaults() *GetWineRecommendation200Response {
	this := GetWineRecommendation200Response{}
	return &this
}

// GetRecommendedWines returns the RecommendedWines field value
func (o *GetWineRecommendation200Response) GetRecommendedWines() []GetWineRecommendation200ResponseRecommendedWinesInner {
	if o == nil {
		var ret []GetWineRecommendation200ResponseRecommendedWinesInner
		return ret
	}

	return o.RecommendedWines
}

// GetRecommendedWinesOk returns a tuple with the RecommendedWines field value
// and a boolean to check if the value has been set.
func (o *GetWineRecommendation200Response) GetRecommendedWinesOk() ([]GetWineRecommendation200ResponseRecommendedWinesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecommendedWines, true
}

// SetRecommendedWines sets field value
func (o *GetWineRecommendation200Response) SetRecommendedWines(v []GetWineRecommendation200ResponseRecommendedWinesInner) {
	o.RecommendedWines = v
}

// GetTotalFound returns the TotalFound field value
func (o *GetWineRecommendation200Response) GetTotalFound() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFound
}

// GetTotalFoundOk returns a tuple with the TotalFound field value
// and a boolean to check if the value has been set.
func (o *GetWineRecommendation200Response) GetTotalFoundOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFound, true
}

// SetTotalFound sets field value
func (o *GetWineRecommendation200Response) SetTotalFound(v int32) {
	o.TotalFound = v
}

func (o GetWineRecommendation200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetWineRecommendation200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recommendedWines"] = o.RecommendedWines
	toSerialize["totalFound"] = o.TotalFound
	return toSerialize, nil
}

func (o *GetWineRecommendation200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recommendedWines",
		"totalFound",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetWineRecommendation200Response := _GetWineRecommendation200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetWineRecommendation200Response)

	if err != nil {
		return err
	}

	*o = GetWineRecommendation200Response(varGetWineRecommendation200Response)

	return err
}

type NullableGetWineRecommendation200Response struct {
	value *GetWineRecommendation200Response
	isSet bool
}

func (v NullableGetWineRecommendation200Response) Get() *GetWineRecommendation200Response {
	return v.value
}

func (v *NullableGetWineRecommendation200Response) Set(val *GetWineRecommendation200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetWineRecommendation200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetWineRecommendation200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetWineRecommendation200Response(val *GetWineRecommendation200Response) *NullableGetWineRecommendation200Response {
	return &NullableGetWineRecommendation200Response{value: val, isSet: true}
}

func (v NullableGetWineRecommendation200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetWineRecommendation200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


