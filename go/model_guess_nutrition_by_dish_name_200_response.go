/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GuessNutritionByDishName200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GuessNutritionByDishName200Response{}

// GuessNutritionByDishName200Response 
type GuessNutritionByDishName200Response struct {
	Calories GuessNutritionByDishName200ResponseCalories `json:"calories"`
	Carbs GuessNutritionByDishName200ResponseCalories `json:"carbs"`
	Fat GuessNutritionByDishName200ResponseCalories `json:"fat"`
	Protein GuessNutritionByDishName200ResponseCalories `json:"protein"`
	RecipesUsed int32 `json:"recipesUsed"`
}

type _GuessNutritionByDishName200Response GuessNutritionByDishName200Response

// NewGuessNutritionByDishName200Response instantiates a new GuessNutritionByDishName200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuessNutritionByDishName200Response(calories GuessNutritionByDishName200ResponseCalories, carbs GuessNutritionByDishName200ResponseCalories, fat GuessNutritionByDishName200ResponseCalories, protein GuessNutritionByDishName200ResponseCalories, recipesUsed int32) *GuessNutritionByDishName200Response {
	this := GuessNutritionByDishName200Response{}
	this.Calories = calories
	this.Carbs = carbs
	this.Fat = fat
	this.Protein = protein
	this.RecipesUsed = recipesUsed
	return &this
}

// NewGuessNutritionByDishName200ResponseWithDefaults instantiates a new GuessNutritionByDishName200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuessNutritionByDishName200ResponseWithDefaults() *GuessNutritionByDishName200Response {
	this := GuessNutritionByDishName200Response{}
	return &this
}

// GetCalories returns the Calories field value
func (o *GuessNutritionByDishName200Response) GetCalories() GuessNutritionByDishName200ResponseCalories {
	if o == nil {
		var ret GuessNutritionByDishName200ResponseCalories
		return ret
	}

	return o.Calories
}

// GetCaloriesOk returns a tuple with the Calories field value
// and a boolean to check if the value has been set.
func (o *GuessNutritionByDishName200Response) GetCaloriesOk() (*GuessNutritionByDishName200ResponseCalories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Calories, true
}

// SetCalories sets field value
func (o *GuessNutritionByDishName200Response) SetCalories(v GuessNutritionByDishName200ResponseCalories) {
	o.Calories = v
}

// GetCarbs returns the Carbs field value
func (o *GuessNutritionByDishName200Response) GetCarbs() GuessNutritionByDishName200ResponseCalories {
	if o == nil {
		var ret GuessNutritionByDishName200ResponseCalories
		return ret
	}

	return o.Carbs
}

// GetCarbsOk returns a tuple with the Carbs field value
// and a boolean to check if the value has been set.
func (o *GuessNutritionByDishName200Response) GetCarbsOk() (*GuessNutritionByDishName200ResponseCalories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Carbs, true
}

// SetCarbs sets field value
func (o *GuessNutritionByDishName200Response) SetCarbs(v GuessNutritionByDishName200ResponseCalories) {
	o.Carbs = v
}

// GetFat returns the Fat field value
func (o *GuessNutritionByDishName200Response) GetFat() GuessNutritionByDishName200ResponseCalories {
	if o == nil {
		var ret GuessNutritionByDishName200ResponseCalories
		return ret
	}

	return o.Fat
}

// GetFatOk returns a tuple with the Fat field value
// and a boolean to check if the value has been set.
func (o *GuessNutritionByDishName200Response) GetFatOk() (*GuessNutritionByDishName200ResponseCalories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fat, true
}

// SetFat sets field value
func (o *GuessNutritionByDishName200Response) SetFat(v GuessNutritionByDishName200ResponseCalories) {
	o.Fat = v
}

// GetProtein returns the Protein field value
func (o *GuessNutritionByDishName200Response) GetProtein() GuessNutritionByDishName200ResponseCalories {
	if o == nil {
		var ret GuessNutritionByDishName200ResponseCalories
		return ret
	}

	return o.Protein
}

// GetProteinOk returns a tuple with the Protein field value
// and a boolean to check if the value has been set.
func (o *GuessNutritionByDishName200Response) GetProteinOk() (*GuessNutritionByDishName200ResponseCalories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protein, true
}

// SetProtein sets field value
func (o *GuessNutritionByDishName200Response) SetProtein(v GuessNutritionByDishName200ResponseCalories) {
	o.Protein = v
}

// GetRecipesUsed returns the RecipesUsed field value
func (o *GuessNutritionByDishName200Response) GetRecipesUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecipesUsed
}

// GetRecipesUsedOk returns a tuple with the RecipesUsed field value
// and a boolean to check if the value has been set.
func (o *GuessNutritionByDishName200Response) GetRecipesUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipesUsed, true
}

// SetRecipesUsed sets field value
func (o *GuessNutritionByDishName200Response) SetRecipesUsed(v int32) {
	o.RecipesUsed = v
}

func (o GuessNutritionByDishName200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GuessNutritionByDishName200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["calories"] = o.Calories
	toSerialize["carbs"] = o.Carbs
	toSerialize["fat"] = o.Fat
	toSerialize["protein"] = o.Protein
	toSerialize["recipesUsed"] = o.RecipesUsed
	return toSerialize, nil
}

func (o *GuessNutritionByDishName200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"calories",
		"carbs",
		"fat",
		"protein",
		"recipesUsed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGuessNutritionByDishName200Response := _GuessNutritionByDishName200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGuessNutritionByDishName200Response)

	if err != nil {
		return err
	}

	*o = GuessNutritionByDishName200Response(varGuessNutritionByDishName200Response)

	return err
}

type NullableGuessNutritionByDishName200Response struct {
	value *GuessNutritionByDishName200Response
	isSet bool
}

func (v NullableGuessNutritionByDishName200Response) Get() *GuessNutritionByDishName200Response {
	return v.value
}

func (v *NullableGuessNutritionByDishName200Response) Set(val *GuessNutritionByDishName200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGuessNutritionByDishName200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGuessNutritionByDishName200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuessNutritionByDishName200Response(val *GuessNutritionByDishName200Response) *NullableGuessNutritionByDishName200Response {
	return &NullableGuessNutritionByDishName200Response{value: val, isSet: true}
}

func (v NullableGuessNutritionByDishName200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuessNutritionByDishName200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


