/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchSiteContent200ResponseGroceryProductsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchSiteContent200ResponseGroceryProductsInner{}

// SearchSiteContent200ResponseGroceryProductsInner struct for SearchSiteContent200ResponseGroceryProductsInner
type SearchSiteContent200ResponseGroceryProductsInner struct {
	DataPoints []SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner `json:"dataPoints,omitempty"`
	Image string `json:"image"`
	Link string `json:"link"`
	Name string `json:"name"`
}

type _SearchSiteContent200ResponseGroceryProductsInner SearchSiteContent200ResponseGroceryProductsInner

// NewSearchSiteContent200ResponseGroceryProductsInner instantiates a new SearchSiteContent200ResponseGroceryProductsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSiteContent200ResponseGroceryProductsInner(image string, link string, name string) *SearchSiteContent200ResponseGroceryProductsInner {
	this := SearchSiteContent200ResponseGroceryProductsInner{}
	this.Image = image
	this.Link = link
	this.Name = name
	return &this
}

// NewSearchSiteContent200ResponseGroceryProductsInnerWithDefaults instantiates a new SearchSiteContent200ResponseGroceryProductsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSiteContent200ResponseGroceryProductsInnerWithDefaults() *SearchSiteContent200ResponseGroceryProductsInner {
	this := SearchSiteContent200ResponseGroceryProductsInner{}
	return &this
}

// GetDataPoints returns the DataPoints field value if set, zero value otherwise.
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetDataPoints() []SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner {
	if o == nil || IsNil(o.DataPoints) {
		var ret []SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner
		return ret
	}
	return o.DataPoints
}

// GetDataPointsOk returns a tuple with the DataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetDataPointsOk() ([]SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner, bool) {
	if o == nil || IsNil(o.DataPoints) {
		return nil, false
	}
	return o.DataPoints, true
}

// HasDataPoints returns a boolean if a field has been set.
func (o *SearchSiteContent200ResponseGroceryProductsInner) HasDataPoints() bool {
	if o != nil && !IsNil(o.DataPoints) {
		return true
	}

	return false
}

// SetDataPoints gets a reference to the given []SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner and assigns it to the DataPoints field.
func (o *SearchSiteContent200ResponseGroceryProductsInner) SetDataPoints(v []SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner) {
	o.DataPoints = v
}

// GetImage returns the Image field value
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *SearchSiteContent200ResponseGroceryProductsInner) SetImage(v string) {
	o.Image = v
}

// GetLink returns the Link field value
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *SearchSiteContent200ResponseGroceryProductsInner) SetLink(v string) {
	o.Link = v
}

// GetName returns the Name field value
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SearchSiteContent200ResponseGroceryProductsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SearchSiteContent200ResponseGroceryProductsInner) SetName(v string) {
	o.Name = v
}

func (o SearchSiteContent200ResponseGroceryProductsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchSiteContent200ResponseGroceryProductsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataPoints) {
		toSerialize["dataPoints"] = o.DataPoints
	}
	toSerialize["image"] = o.Image
	toSerialize["link"] = o.Link
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *SearchSiteContent200ResponseGroceryProductsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"link",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchSiteContent200ResponseGroceryProductsInner := _SearchSiteContent200ResponseGroceryProductsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchSiteContent200ResponseGroceryProductsInner)

	if err != nil {
		return err
	}

	*o = SearchSiteContent200ResponseGroceryProductsInner(varSearchSiteContent200ResponseGroceryProductsInner)

	return err
}

type NullableSearchSiteContent200ResponseGroceryProductsInner struct {
	value *SearchSiteContent200ResponseGroceryProductsInner
	isSet bool
}

func (v NullableSearchSiteContent200ResponseGroceryProductsInner) Get() *SearchSiteContent200ResponseGroceryProductsInner {
	return v.value
}

func (v *NullableSearchSiteContent200ResponseGroceryProductsInner) Set(val *SearchSiteContent200ResponseGroceryProductsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSiteContent200ResponseGroceryProductsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSiteContent200ResponseGroceryProductsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSiteContent200ResponseGroceryProductsInner(val *SearchSiteContent200ResponseGroceryProductsInner) *NullableSearchSiteContent200ResponseGroceryProductsInner {
	return &NullableSearchSiteContent200ResponseGroceryProductsInner{value: val, isSet: true}
}

func (v NullableSearchSiteContent200ResponseGroceryProductsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSiteContent200ResponseGroceryProductsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


