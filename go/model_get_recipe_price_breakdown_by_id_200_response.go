/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRecipePriceBreakdownByID200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRecipePriceBreakdownByID200Response{}

// GetRecipePriceBreakdownByID200Response 
type GetRecipePriceBreakdownByID200Response struct {
	Ingredients []GetRecipePriceBreakdownByID200ResponseIngredientsInner `json:"ingredients"`
	TotalCost float32 `json:"totalCost"`
	TotalCostPerServing float32 `json:"totalCostPerServing"`
}

type _GetRecipePriceBreakdownByID200Response GetRecipePriceBreakdownByID200Response

// NewGetRecipePriceBreakdownByID200Response instantiates a new GetRecipePriceBreakdownByID200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRecipePriceBreakdownByID200Response(ingredients []GetRecipePriceBreakdownByID200ResponseIngredientsInner, totalCost float32, totalCostPerServing float32) *GetRecipePriceBreakdownByID200Response {
	this := GetRecipePriceBreakdownByID200Response{}
	this.Ingredients = ingredients
	this.TotalCost = totalCost
	this.TotalCostPerServing = totalCostPerServing
	return &this
}

// NewGetRecipePriceBreakdownByID200ResponseWithDefaults instantiates a new GetRecipePriceBreakdownByID200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRecipePriceBreakdownByID200ResponseWithDefaults() *GetRecipePriceBreakdownByID200Response {
	this := GetRecipePriceBreakdownByID200Response{}
	return &this
}

// GetIngredients returns the Ingredients field value
func (o *GetRecipePriceBreakdownByID200Response) GetIngredients() []GetRecipePriceBreakdownByID200ResponseIngredientsInner {
	if o == nil {
		var ret []GetRecipePriceBreakdownByID200ResponseIngredientsInner
		return ret
	}

	return o.Ingredients
}

// GetIngredientsOk returns a tuple with the Ingredients field value
// and a boolean to check if the value has been set.
func (o *GetRecipePriceBreakdownByID200Response) GetIngredientsOk() ([]GetRecipePriceBreakdownByID200ResponseIngredientsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ingredients, true
}

// SetIngredients sets field value
func (o *GetRecipePriceBreakdownByID200Response) SetIngredients(v []GetRecipePriceBreakdownByID200ResponseIngredientsInner) {
	o.Ingredients = v
}

// GetTotalCost returns the TotalCost field value
func (o *GetRecipePriceBreakdownByID200Response) GetTotalCost() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value
// and a boolean to check if the value has been set.
func (o *GetRecipePriceBreakdownByID200Response) GetTotalCostOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCost, true
}

// SetTotalCost sets field value
func (o *GetRecipePriceBreakdownByID200Response) SetTotalCost(v float32) {
	o.TotalCost = v
}

// GetTotalCostPerServing returns the TotalCostPerServing field value
func (o *GetRecipePriceBreakdownByID200Response) GetTotalCostPerServing() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalCostPerServing
}

// GetTotalCostPerServingOk returns a tuple with the TotalCostPerServing field value
// and a boolean to check if the value has been set.
func (o *GetRecipePriceBreakdownByID200Response) GetTotalCostPerServingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCostPerServing, true
}

// SetTotalCostPerServing sets field value
func (o *GetRecipePriceBreakdownByID200Response) SetTotalCostPerServing(v float32) {
	o.TotalCostPerServing = v
}

func (o GetRecipePriceBreakdownByID200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRecipePriceBreakdownByID200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ingredients"] = o.Ingredients
	toSerialize["totalCost"] = o.TotalCost
	toSerialize["totalCostPerServing"] = o.TotalCostPerServing
	return toSerialize, nil
}

func (o *GetRecipePriceBreakdownByID200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ingredients",
		"totalCost",
		"totalCostPerServing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRecipePriceBreakdownByID200Response := _GetRecipePriceBreakdownByID200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRecipePriceBreakdownByID200Response)

	if err != nil {
		return err
	}

	*o = GetRecipePriceBreakdownByID200Response(varGetRecipePriceBreakdownByID200Response)

	return err
}

type NullableGetRecipePriceBreakdownByID200Response struct {
	value *GetRecipePriceBreakdownByID200Response
	isSet bool
}

func (v NullableGetRecipePriceBreakdownByID200Response) Get() *GetRecipePriceBreakdownByID200Response {
	return v.value
}

func (v *NullableGetRecipePriceBreakdownByID200Response) Set(val *GetRecipePriceBreakdownByID200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecipePriceBreakdownByID200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecipePriceBreakdownByID200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecipePriceBreakdownByID200Response(val *GetRecipePriceBreakdownByID200Response) *NullableGetRecipePriceBreakdownByID200Response {
	return &NullableGetRecipePriceBreakdownByID200Response{value: val, isSet: true}
}

func (v NullableGetRecipePriceBreakdownByID200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecipePriceBreakdownByID200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


