/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetRecipeNutritionWidgetByID200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRecipeNutritionWidgetByID200Response{}

// GetRecipeNutritionWidgetByID200Response 
type GetRecipeNutritionWidgetByID200Response struct {
	Calories string `json:"calories"`
	Carbs string `json:"carbs"`
	Fat string `json:"fat"`
	Protein string `json:"protein"`
	Bad []GetRecipeNutritionWidgetByID200ResponseBadInner `json:"bad"`
	Good []GetRecipeNutritionWidgetByID200ResponseGoodInner `json:"good"`
}

type _GetRecipeNutritionWidgetByID200Response GetRecipeNutritionWidgetByID200Response

// NewGetRecipeNutritionWidgetByID200Response instantiates a new GetRecipeNutritionWidgetByID200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRecipeNutritionWidgetByID200Response(calories string, carbs string, fat string, protein string, bad []GetRecipeNutritionWidgetByID200ResponseBadInner, good []GetRecipeNutritionWidgetByID200ResponseGoodInner) *GetRecipeNutritionWidgetByID200Response {
	this := GetRecipeNutritionWidgetByID200Response{}
	this.Calories = calories
	this.Carbs = carbs
	this.Fat = fat
	this.Protein = protein
	this.Bad = bad
	this.Good = good
	return &this
}

// NewGetRecipeNutritionWidgetByID200ResponseWithDefaults instantiates a new GetRecipeNutritionWidgetByID200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRecipeNutritionWidgetByID200ResponseWithDefaults() *GetRecipeNutritionWidgetByID200Response {
	this := GetRecipeNutritionWidgetByID200Response{}
	return &this
}

// GetCalories returns the Calories field value
func (o *GetRecipeNutritionWidgetByID200Response) GetCalories() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Calories
}

// GetCaloriesOk returns a tuple with the Calories field value
// and a boolean to check if the value has been set.
func (o *GetRecipeNutritionWidgetByID200Response) GetCaloriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Calories, true
}

// SetCalories sets field value
func (o *GetRecipeNutritionWidgetByID200Response) SetCalories(v string) {
	o.Calories = v
}

// GetCarbs returns the Carbs field value
func (o *GetRecipeNutritionWidgetByID200Response) GetCarbs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Carbs
}

// GetCarbsOk returns a tuple with the Carbs field value
// and a boolean to check if the value has been set.
func (o *GetRecipeNutritionWidgetByID200Response) GetCarbsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Carbs, true
}

// SetCarbs sets field value
func (o *GetRecipeNutritionWidgetByID200Response) SetCarbs(v string) {
	o.Carbs = v
}

// GetFat returns the Fat field value
func (o *GetRecipeNutritionWidgetByID200Response) GetFat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fat
}

// GetFatOk returns a tuple with the Fat field value
// and a boolean to check if the value has been set.
func (o *GetRecipeNutritionWidgetByID200Response) GetFatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fat, true
}

// SetFat sets field value
func (o *GetRecipeNutritionWidgetByID200Response) SetFat(v string) {
	o.Fat = v
}

// GetProtein returns the Protein field value
func (o *GetRecipeNutritionWidgetByID200Response) GetProtein() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protein
}

// GetProteinOk returns a tuple with the Protein field value
// and a boolean to check if the value has been set.
func (o *GetRecipeNutritionWidgetByID200Response) GetProteinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protein, true
}

// SetProtein sets field value
func (o *GetRecipeNutritionWidgetByID200Response) SetProtein(v string) {
	o.Protein = v
}

// GetBad returns the Bad field value
func (o *GetRecipeNutritionWidgetByID200Response) GetBad() []GetRecipeNutritionWidgetByID200ResponseBadInner {
	if o == nil {
		var ret []GetRecipeNutritionWidgetByID200ResponseBadInner
		return ret
	}

	return o.Bad
}

// GetBadOk returns a tuple with the Bad field value
// and a boolean to check if the value has been set.
func (o *GetRecipeNutritionWidgetByID200Response) GetBadOk() ([]GetRecipeNutritionWidgetByID200ResponseBadInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bad, true
}

// SetBad sets field value
func (o *GetRecipeNutritionWidgetByID200Response) SetBad(v []GetRecipeNutritionWidgetByID200ResponseBadInner) {
	o.Bad = v
}

// GetGood returns the Good field value
func (o *GetRecipeNutritionWidgetByID200Response) GetGood() []GetRecipeNutritionWidgetByID200ResponseGoodInner {
	if o == nil {
		var ret []GetRecipeNutritionWidgetByID200ResponseGoodInner
		return ret
	}

	return o.Good
}

// GetGoodOk returns a tuple with the Good field value
// and a boolean to check if the value has been set.
func (o *GetRecipeNutritionWidgetByID200Response) GetGoodOk() ([]GetRecipeNutritionWidgetByID200ResponseGoodInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Good, true
}

// SetGood sets field value
func (o *GetRecipeNutritionWidgetByID200Response) SetGood(v []GetRecipeNutritionWidgetByID200ResponseGoodInner) {
	o.Good = v
}

func (o GetRecipeNutritionWidgetByID200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRecipeNutritionWidgetByID200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["calories"] = o.Calories
	toSerialize["carbs"] = o.Carbs
	toSerialize["fat"] = o.Fat
	toSerialize["protein"] = o.Protein
	toSerialize["bad"] = o.Bad
	toSerialize["good"] = o.Good
	return toSerialize, nil
}

func (o *GetRecipeNutritionWidgetByID200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"calories",
		"carbs",
		"fat",
		"protein",
		"bad",
		"good",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRecipeNutritionWidgetByID200Response := _GetRecipeNutritionWidgetByID200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRecipeNutritionWidgetByID200Response)

	if err != nil {
		return err
	}

	*o = GetRecipeNutritionWidgetByID200Response(varGetRecipeNutritionWidgetByID200Response)

	return err
}

type NullableGetRecipeNutritionWidgetByID200Response struct {
	value *GetRecipeNutritionWidgetByID200Response
	isSet bool
}

func (v NullableGetRecipeNutritionWidgetByID200Response) Get() *GetRecipeNutritionWidgetByID200Response {
	return v.value
}

func (v *NullableGetRecipeNutritionWidgetByID200Response) Set(val *GetRecipeNutritionWidgetByID200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecipeNutritionWidgetByID200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecipeNutritionWidgetByID200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecipeNutritionWidgetByID200Response(val *GetRecipeNutritionWidgetByID200Response) *NullableGetRecipeNutritionWidgetByID200Response {
	return &NullableGetRecipeNutritionWidgetByID200Response{value: val, isSet: true}
}

func (v NullableGetRecipeNutritionWidgetByID200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecipeNutritionWidgetByID200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


