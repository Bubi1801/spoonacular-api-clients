/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spoonacular

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParseIngredients200ResponseInnerNutritionWeightPerServing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParseIngredients200ResponseInnerNutritionWeightPerServing{}

// ParseIngredients200ResponseInnerNutritionWeightPerServing struct for ParseIngredients200ResponseInnerNutritionWeightPerServing
type ParseIngredients200ResponseInnerNutritionWeightPerServing struct {
	Amount float32 `json:"amount"`
	Unit string `json:"unit"`
}

type _ParseIngredients200ResponseInnerNutritionWeightPerServing ParseIngredients200ResponseInnerNutritionWeightPerServing

// NewParseIngredients200ResponseInnerNutritionWeightPerServing instantiates a new ParseIngredients200ResponseInnerNutritionWeightPerServing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParseIngredients200ResponseInnerNutritionWeightPerServing(amount float32, unit string) *ParseIngredients200ResponseInnerNutritionWeightPerServing {
	this := ParseIngredients200ResponseInnerNutritionWeightPerServing{}
	this.Amount = amount
	this.Unit = unit
	return &this
}

// NewParseIngredients200ResponseInnerNutritionWeightPerServingWithDefaults instantiates a new ParseIngredients200ResponseInnerNutritionWeightPerServing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParseIngredients200ResponseInnerNutritionWeightPerServingWithDefaults() *ParseIngredients200ResponseInnerNutritionWeightPerServing {
	this := ParseIngredients200ResponseInnerNutritionWeightPerServing{}
	return &this
}

// GetAmount returns the Amount field value
func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) SetAmount(v float32) {
	o.Amount = v
}

// GetUnit returns the Unit field value
func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) SetUnit(v string) {
	o.Unit = v
}

func (o ParseIngredients200ResponseInnerNutritionWeightPerServing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParseIngredients200ResponseInnerNutritionWeightPerServing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["unit"] = o.Unit
	return toSerialize, nil
}

func (o *ParseIngredients200ResponseInnerNutritionWeightPerServing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParseIngredients200ResponseInnerNutritionWeightPerServing := _ParseIngredients200ResponseInnerNutritionWeightPerServing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParseIngredients200ResponseInnerNutritionWeightPerServing)

	if err != nil {
		return err
	}

	*o = ParseIngredients200ResponseInnerNutritionWeightPerServing(varParseIngredients200ResponseInnerNutritionWeightPerServing)

	return err
}

type NullableParseIngredients200ResponseInnerNutritionWeightPerServing struct {
	value *ParseIngredients200ResponseInnerNutritionWeightPerServing
	isSet bool
}

func (v NullableParseIngredients200ResponseInnerNutritionWeightPerServing) Get() *ParseIngredients200ResponseInnerNutritionWeightPerServing {
	return v.value
}

func (v *NullableParseIngredients200ResponseInnerNutritionWeightPerServing) Set(val *ParseIngredients200ResponseInnerNutritionWeightPerServing) {
	v.value = val
	v.isSet = true
}

func (v NullableParseIngredients200ResponseInnerNutritionWeightPerServing) IsSet() bool {
	return v.isSet
}

func (v *NullableParseIngredients200ResponseInnerNutritionWeightPerServing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParseIngredients200ResponseInnerNutritionWeightPerServing(val *ParseIngredients200ResponseInnerNutritionWeightPerServing) *NullableParseIngredients200ResponseInnerNutritionWeightPerServing {
	return &NullableParseIngredients200ResponseInnerNutritionWeightPerServing{value: val, isSet: true}
}

func (v NullableParseIngredients200ResponseInnerNutritionWeightPerServing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParseIngredients200ResponseInnerNutritionWeightPerServing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


