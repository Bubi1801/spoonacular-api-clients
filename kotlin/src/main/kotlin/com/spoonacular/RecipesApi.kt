/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.spoonacular.client.model.AnalyzeARecipeSearchQuery200Response
import com.spoonacular.client.model.AnalyzeRecipeInstructions200Response
import com.spoonacular.client.model.AutocompleteRecipeSearch200ResponseInner
import com.spoonacular.client.model.ClassifyCuisine200Response
import com.spoonacular.client.model.ComputeGlycemicLoad200Response
import com.spoonacular.client.model.ComputeGlycemicLoadRequest
import com.spoonacular.client.model.ConvertAmounts200Response
import com.spoonacular.client.model.CreateRecipeCard200Response
import com.spoonacular.client.model.GetAnalyzedRecipeInstructions200Response
import com.spoonacular.client.model.GetRandomRecipes200Response
import com.spoonacular.client.model.GetRecipeEquipmentByID200Response
import com.spoonacular.client.model.GetRecipeInformation200Response
import com.spoonacular.client.model.GetRecipeInformationBulk200ResponseInner
import com.spoonacular.client.model.GetRecipeIngredientsByID200Response
import com.spoonacular.client.model.GetRecipeNutritionWidgetByID200Response
import com.spoonacular.client.model.GetRecipePriceBreakdownByID200Response
import com.spoonacular.client.model.GetRecipeTasteByID200Response
import com.spoonacular.client.model.GetSimilarRecipes200ResponseInner
import com.spoonacular.client.model.GuessNutritionByDishName200Response
import com.spoonacular.client.model.ParseIngredients200ResponseInner
import com.spoonacular.client.model.QuickAnswer200Response
import com.spoonacular.client.model.SearchRecipes200Response
import com.spoonacular.client.model.SearchRecipesByIngredients200ResponseInner
import com.spoonacular.client.model.SearchRecipesByNutrients200ResponseInner
import com.spoonacular.client.model.SummarizeRecipe200Response

import com.squareup.moshi.Json

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ApiResponse
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.PartConfig
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class RecipesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.spoonacular.com")
        }
    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query.
     * @return AnalyzeARecipeSearchQuery200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun analyzeARecipeSearchQuery(q: kotlin.String) : AnalyzeARecipeSearchQuery200Response {
        val localVarResponse = analyzeARecipeSearchQueryWithHttpInfo(q = q)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AnalyzeARecipeSearchQuery200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query.
     * @return ApiResponse<AnalyzeARecipeSearchQuery200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun analyzeARecipeSearchQueryWithHttpInfo(q: kotlin.String) : ApiResponse<AnalyzeARecipeSearchQuery200Response?> {
        val localVariableConfig = analyzeARecipeSearchQueryRequestConfig(q = q)

        return request<Unit, AnalyzeARecipeSearchQuery200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation analyzeARecipeSearchQuery
     *
     * @param q The recipe search query.
     * @return RequestConfig
     */
    fun analyzeARecipeSearchQueryRequestConfig(q: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/queries/analyze",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeAnalyzeRecipeInstructions(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param contentType The content type. (optional)
     * @return AnalyzeRecipeInstructions200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun analyzeRecipeInstructions(contentType: ContentTypeAnalyzeRecipeInstructions? = null) : AnalyzeRecipeInstructions200Response {
        val localVarResponse = analyzeRecipeInstructionsWithHttpInfo(contentType = contentType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AnalyzeRecipeInstructions200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param contentType The content type. (optional)
     * @return ApiResponse<AnalyzeRecipeInstructions200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun analyzeRecipeInstructionsWithHttpInfo(contentType: ContentTypeAnalyzeRecipeInstructions?) : ApiResponse<AnalyzeRecipeInstructions200Response?> {
        val localVariableConfig = analyzeRecipeInstructionsRequestConfig(contentType = contentType)

        return request<Unit, AnalyzeRecipeInstructions200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation analyzeRecipeInstructions
     *
     * @param contentType The content type. (optional)
     * @return RequestConfig
     */
    fun analyzeRecipeInstructionsRequestConfig(contentType: ContentTypeAnalyzeRecipeInstructions?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/analyzeInstructions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun autocompleteRecipeSearch(query: kotlin.String? = null, number: kotlin.Int? = 10) : kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner> {
        val localVarResponse = autocompleteRecipeSearchWithHttpInfo(query = query, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse<kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun autocompleteRecipeSearchWithHttpInfo(query: kotlin.String?, number: kotlin.Int?) : ApiResponse<kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>?> {
        val localVariableConfig = autocompleteRecipeSearchRequestConfig(query = query, number = number)

        return request<Unit, kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation autocompleteRecipeSearch
     *
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return RequestConfig
     */
    fun autocompleteRecipeSearchRequestConfig(query: kotlin.String?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/autocomplete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeClassifyCuisine(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * Classify Cuisine
     * Classify the recipe&#39;s cuisine.
     * @param contentType The content type. (optional)
     * @return ClassifyCuisine200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun classifyCuisine(contentType: ContentTypeClassifyCuisine? = null) : ClassifyCuisine200Response {
        val localVarResponse = classifyCuisineWithHttpInfo(contentType = contentType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClassifyCuisine200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Classify Cuisine
     * Classify the recipe&#39;s cuisine.
     * @param contentType The content type. (optional)
     * @return ApiResponse<ClassifyCuisine200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun classifyCuisineWithHttpInfo(contentType: ContentTypeClassifyCuisine?) : ApiResponse<ClassifyCuisine200Response?> {
        val localVariableConfig = classifyCuisineRequestConfig(contentType = contentType)

        return request<Unit, ClassifyCuisine200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation classifyCuisine
     *
     * @param contentType The content type. (optional)
     * @return RequestConfig
     */
    fun classifyCuisineRequestConfig(contentType: ContentTypeClassifyCuisine?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/cuisine",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter language
     */
     enum class LanguageComputeGlycemicLoad(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param computeGlycemicLoadRequest 
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ComputeGlycemicLoad200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language: LanguageComputeGlycemicLoad? = null) : ComputeGlycemicLoad200Response {
        val localVarResponse = computeGlycemicLoadWithHttpInfo(computeGlycemicLoadRequest = computeGlycemicLoadRequest, language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ComputeGlycemicLoad200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param computeGlycemicLoadRequest 
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse<ComputeGlycemicLoad200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun computeGlycemicLoadWithHttpInfo(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language: LanguageComputeGlycemicLoad?) : ApiResponse<ComputeGlycemicLoad200Response?> {
        val localVariableConfig = computeGlycemicLoadRequestConfig(computeGlycemicLoadRequest = computeGlycemicLoadRequest, language = language)

        return request<ComputeGlycemicLoadRequest, ComputeGlycemicLoad200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation computeGlycemicLoad
     *
     * @param computeGlycemicLoadRequest 
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return RequestConfig
     */
    fun computeGlycemicLoadRequestConfig(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language: LanguageComputeGlycemicLoad?) : RequestConfig<ComputeGlycemicLoadRequest> {
        val localVariableBody = computeGlycemicLoadRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/food/ingredients/glycemicLoad",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert.
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @return ConvertAmounts200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun convertAmounts(ingredientName: kotlin.String, sourceAmount: java.math.BigDecimal, sourceUnit: kotlin.String, targetUnit: kotlin.String) : ConvertAmounts200Response {
        val localVarResponse = convertAmountsWithHttpInfo(ingredientName = ingredientName, sourceAmount = sourceAmount, sourceUnit = sourceUnit, targetUnit = targetUnit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ConvertAmounts200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert.
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @return ApiResponse<ConvertAmounts200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun convertAmountsWithHttpInfo(ingredientName: kotlin.String, sourceAmount: java.math.BigDecimal, sourceUnit: kotlin.String, targetUnit: kotlin.String) : ApiResponse<ConvertAmounts200Response?> {
        val localVariableConfig = convertAmountsRequestConfig(ingredientName = ingredientName, sourceAmount = sourceAmount, sourceUnit = sourceUnit, targetUnit = targetUnit)

        return request<Unit, ConvertAmounts200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation convertAmounts
     *
     * @param ingredientName The ingredient which you want to convert.
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @return RequestConfig
     */
    fun convertAmountsRequestConfig(ingredientName: kotlin.String, sourceAmount: java.math.BigDecimal, sourceUnit: kotlin.String, targetUnit: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ingredientName", listOf(ingredientName.toString()))
                put("sourceAmount", listOf(sourceAmount.toString()))
                put("sourceUnit", listOf(sourceUnit.toString()))
                put("targetUnit", listOf(targetUnit.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/convert",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeCreateRecipeCard(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param contentType The content type. (optional)
     * @return CreateRecipeCard200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createRecipeCard(contentType: ContentTypeCreateRecipeCard? = null) : CreateRecipeCard200Response {
        val localVarResponse = createRecipeCardWithHttpInfo(contentType = contentType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateRecipeCard200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param contentType The content type. (optional)
     * @return ApiResponse<CreateRecipeCard200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createRecipeCardWithHttpInfo(contentType: ContentTypeCreateRecipeCard?) : ApiResponse<CreateRecipeCard200Response?> {
        val localVariableConfig = createRecipeCardRequestConfig(contentType = contentType)

        return request<Unit, CreateRecipeCard200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createRecipeCard
     *
     * @param contentType The content type. (optional)
     * @return RequestConfig
     */
    fun createRecipeCardRequestConfig(contentType: ContentTypeCreateRecipeCard?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        localVariableHeaders["Content-Type"] = "multipart/form-data"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/visualizeRecipe",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Equipment by ID Image
     * Visualize a recipe&#39;s equipment list as an image.
     * @param id The recipe id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun equipmentByIDImage(id: java.math.BigDecimal) : kotlin.Any {
        val localVarResponse = equipmentByIDImageWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Equipment by ID Image
     * Visualize a recipe&#39;s equipment list as an image.
     * @param id The recipe id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun equipmentByIDImageWithHttpInfo(id: java.math.BigDecimal) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = equipmentByIDImageRequestConfig(id = id)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation equipmentByIDImage
     *
     * @param id The recipe id.
     * @return RequestConfig
     */
    fun equipmentByIDImageRequestConfig(id: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/equipmentWidget.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page.
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @return GetRecipeInformation200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun extractRecipeFromWebsite(url: kotlin.String, forceExtraction: kotlin.Boolean? = null, analyze: kotlin.Boolean? = null, includeNutrition: kotlin.Boolean? = false, includeTaste: kotlin.Boolean? = false) : GetRecipeInformation200Response {
        val localVarResponse = extractRecipeFromWebsiteWithHttpInfo(url = url, forceExtraction = forceExtraction, analyze = analyze, includeNutrition = includeNutrition, includeTaste = includeTaste)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipeInformation200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page.
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @return ApiResponse<GetRecipeInformation200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun extractRecipeFromWebsiteWithHttpInfo(url: kotlin.String, forceExtraction: kotlin.Boolean?, analyze: kotlin.Boolean?, includeNutrition: kotlin.Boolean?, includeTaste: kotlin.Boolean?) : ApiResponse<GetRecipeInformation200Response?> {
        val localVariableConfig = extractRecipeFromWebsiteRequestConfig(url = url, forceExtraction = forceExtraction, analyze = analyze, includeNutrition = includeNutrition, includeTaste = includeTaste)

        return request<Unit, GetRecipeInformation200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation extractRecipeFromWebsite
     *
     * @param url The URL of the recipe page.
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @return RequestConfig
     */
    fun extractRecipeFromWebsiteRequestConfig(url: kotlin.String, forceExtraction: kotlin.Boolean?, analyze: kotlin.Boolean?, includeNutrition: kotlin.Boolean?, includeTaste: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("url", listOf(url.toString()))
                if (forceExtraction != null) {
                    put("forceExtraction", listOf(forceExtraction.toString()))
                }
                if (analyze != null) {
                    put("analyze", listOf(analyze.toString()))
                }
                if (includeNutrition != null) {
                    put("includeNutrition", listOf(includeNutrition.toString()))
                }
                if (includeTaste != null) {
                    put("includeTaste", listOf(includeTaste.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/extract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The item&#39;s id.
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return GetAnalyzedRecipeInstructions200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAnalyzedRecipeInstructions(id: kotlin.Int, stepBreakdown: kotlin.Boolean? = null) : GetAnalyzedRecipeInstructions200Response {
        val localVarResponse = getAnalyzedRecipeInstructionsWithHttpInfo(id = id, stepBreakdown = stepBreakdown)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetAnalyzedRecipeInstructions200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The item&#39;s id.
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return ApiResponse<GetAnalyzedRecipeInstructions200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAnalyzedRecipeInstructionsWithHttpInfo(id: kotlin.Int, stepBreakdown: kotlin.Boolean?) : ApiResponse<GetAnalyzedRecipeInstructions200Response?> {
        val localVariableConfig = getAnalyzedRecipeInstructionsRequestConfig(id = id, stepBreakdown = stepBreakdown)

        return request<Unit, GetAnalyzedRecipeInstructions200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAnalyzedRecipeInstructions
     *
     * @param id The item&#39;s id.
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return RequestConfig
     */
    fun getAnalyzedRecipeInstructionsRequestConfig(id: kotlin.Int, stepBreakdown: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (stepBreakdown != null) {
                    put("stepBreakdown", listOf(stepBreakdown.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/analyzedInstructions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTags A comma-separated list of tags that the random recipe(s) must adhere to. (optional)
     * @param excludeTags A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return GetRandomRecipes200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRandomRecipes(limitLicense: kotlin.Boolean? = true, includeNutrition: kotlin.Boolean? = false, includeTags: kotlin.String? = null, excludeTags: kotlin.String? = null, number: kotlin.Int? = 10) : GetRandomRecipes200Response {
        val localVarResponse = getRandomRecipesWithHttpInfo(limitLicense = limitLicense, includeNutrition = includeNutrition, includeTags = includeTags, excludeTags = excludeTags, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRandomRecipes200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTags A comma-separated list of tags that the random recipe(s) must adhere to. (optional)
     * @param excludeTags A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse<GetRandomRecipes200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRandomRecipesWithHttpInfo(limitLicense: kotlin.Boolean?, includeNutrition: kotlin.Boolean?, includeTags: kotlin.String?, excludeTags: kotlin.String?, number: kotlin.Int?) : ApiResponse<GetRandomRecipes200Response?> {
        val localVariableConfig = getRandomRecipesRequestConfig(limitLicense = limitLicense, includeNutrition = includeNutrition, includeTags = includeTags, excludeTags = excludeTags, number = number)

        return request<Unit, GetRandomRecipes200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRandomRecipes
     *
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTags A comma-separated list of tags that the random recipe(s) must adhere to. (optional)
     * @param excludeTags A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return RequestConfig
     */
    fun getRandomRecipesRequestConfig(limitLicense: kotlin.Boolean?, includeNutrition: kotlin.Boolean?, includeTags: kotlin.String?, excludeTags: kotlin.String?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limitLicense != null) {
                    put("limitLicense", listOf(limitLicense.toString()))
                }
                if (includeNutrition != null) {
                    put("includeNutrition", listOf(includeNutrition.toString()))
                }
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/random",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Equipment by ID
     * Get a recipe&#39;s equipment list.
     * @param id The item&#39;s id.
     * @return GetRecipeEquipmentByID200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipeEquipmentByID(id: kotlin.Int) : GetRecipeEquipmentByID200Response {
        val localVarResponse = getRecipeEquipmentByIDWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipeEquipmentByID200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Equipment by ID
     * Get a recipe&#39;s equipment list.
     * @param id The item&#39;s id.
     * @return ApiResponse<GetRecipeEquipmentByID200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipeEquipmentByIDWithHttpInfo(id: kotlin.Int) : ApiResponse<GetRecipeEquipmentByID200Response?> {
        val localVariableConfig = getRecipeEquipmentByIDRequestConfig(id = id)

        return request<Unit, GetRecipeEquipmentByID200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipeEquipmentByID
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun getRecipeEquipmentByIDRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/equipmentWidget.json".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The item&#39;s id.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return GetRecipeInformation200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipeInformation(id: kotlin.Int, includeNutrition: kotlin.Boolean? = false) : GetRecipeInformation200Response {
        val localVarResponse = getRecipeInformationWithHttpInfo(id = id, includeNutrition = includeNutrition)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipeInformation200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The item&#39;s id.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return ApiResponse<GetRecipeInformation200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipeInformationWithHttpInfo(id: kotlin.Int, includeNutrition: kotlin.Boolean?) : ApiResponse<GetRecipeInformation200Response?> {
        val localVariableConfig = getRecipeInformationRequestConfig(id = id, includeNutrition = includeNutrition)

        return request<Unit, GetRecipeInformation200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipeInformation
     *
     * @param id The item&#39;s id.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return RequestConfig
     */
    fun getRecipeInformationRequestConfig(id: kotlin.Int, includeNutrition: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeNutrition != null) {
                    put("includeNutrition", listOf(includeNutrition.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/information".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipeInformationBulk(ids: kotlin.String, includeNutrition: kotlin.Boolean? = false) : kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner> {
        val localVarResponse = getRecipeInformationBulkWithHttpInfo(ids = ids, includeNutrition = includeNutrition)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return ApiResponse<kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipeInformationBulkWithHttpInfo(ids: kotlin.String, includeNutrition: kotlin.Boolean?) : ApiResponse<kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner>?> {
        val localVariableConfig = getRecipeInformationBulkRequestConfig(ids = ids, includeNutrition = includeNutrition)

        return request<Unit, kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipeInformationBulk
     *
     * @param ids A comma-separated list of recipe ids.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return RequestConfig
     */
    fun getRecipeInformationBulkRequestConfig(ids: kotlin.String, includeNutrition: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ids", listOf(ids.toString()))
                if (includeNutrition != null) {
                    put("includeNutrition", listOf(includeNutrition.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/informationBulk",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Ingredients by ID
     * Get a recipe&#39;s ingredient list.
     * @param id The item&#39;s id.
     * @return GetRecipeIngredientsByID200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipeIngredientsByID(id: kotlin.Int) : GetRecipeIngredientsByID200Response {
        val localVarResponse = getRecipeIngredientsByIDWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipeIngredientsByID200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Ingredients by ID
     * Get a recipe&#39;s ingredient list.
     * @param id The item&#39;s id.
     * @return ApiResponse<GetRecipeIngredientsByID200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipeIngredientsByIDWithHttpInfo(id: kotlin.Int) : ApiResponse<GetRecipeIngredientsByID200Response?> {
        val localVariableConfig = getRecipeIngredientsByIDRequestConfig(id = id)

        return request<Unit, GetRecipeIngredientsByID200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipeIngredientsByID
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun getRecipeIngredientsByIDRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/ingredientWidget.json".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Nutrition by ID
     * Get a recipe&#39;s nutrition data.
     * @param id The item&#39;s id.
     * @return GetRecipeNutritionWidgetByID200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipeNutritionWidgetByID(id: kotlin.Int) : GetRecipeNutritionWidgetByID200Response {
        val localVarResponse = getRecipeNutritionWidgetByIDWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipeNutritionWidgetByID200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Nutrition by ID
     * Get a recipe&#39;s nutrition data.
     * @param id The item&#39;s id.
     * @return ApiResponse<GetRecipeNutritionWidgetByID200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipeNutritionWidgetByIDWithHttpInfo(id: kotlin.Int) : ApiResponse<GetRecipeNutritionWidgetByID200Response?> {
        val localVariableConfig = getRecipeNutritionWidgetByIDRequestConfig(id = id)

        return request<Unit, GetRecipeNutritionWidgetByID200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipeNutritionWidgetByID
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun getRecipeNutritionWidgetByIDRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/nutritionWidget.json".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Price Breakdown by ID
     * Get a recipe&#39;s price breakdown data.
     * @param id The item&#39;s id.
     * @return GetRecipePriceBreakdownByID200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipePriceBreakdownByID(id: kotlin.Int) : GetRecipePriceBreakdownByID200Response {
        val localVarResponse = getRecipePriceBreakdownByIDWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipePriceBreakdownByID200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Price Breakdown by ID
     * Get a recipe&#39;s price breakdown data.
     * @param id The item&#39;s id.
     * @return ApiResponse<GetRecipePriceBreakdownByID200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipePriceBreakdownByIDWithHttpInfo(id: kotlin.Int) : ApiResponse<GetRecipePriceBreakdownByID200Response?> {
        val localVariableConfig = getRecipePriceBreakdownByIDRequestConfig(id = id)

        return request<Unit, GetRecipePriceBreakdownByID200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipePriceBreakdownByID
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun getRecipePriceBreakdownByIDRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/priceBreakdownWidget.json".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id.
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @return GetRecipeTasteByID200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRecipeTasteByID(id: kotlin.Int, normalize: kotlin.Boolean? = true) : GetRecipeTasteByID200Response {
        val localVarResponse = getRecipeTasteByIDWithHttpInfo(id = id, normalize = normalize)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetRecipeTasteByID200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id.
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @return ApiResponse<GetRecipeTasteByID200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRecipeTasteByIDWithHttpInfo(id: kotlin.Int, normalize: kotlin.Boolean?) : ApiResponse<GetRecipeTasteByID200Response?> {
        val localVariableConfig = getRecipeTasteByIDRequestConfig(id = id, normalize = normalize)

        return request<Unit, GetRecipeTasteByID200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getRecipeTasteByID
     *
     * @param id The item&#39;s id.
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @return RequestConfig
     */
    fun getRecipeTasteByIDRequestConfig(id: kotlin.Int, normalize: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (normalize != null) {
                    put("normalize", listOf(normalize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/tasteWidget.json".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The item&#39;s id.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return kotlin.collections.Set<GetSimilarRecipes200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSimilarRecipes(id: kotlin.Int, number: kotlin.Int? = 10, limitLicense: kotlin.Boolean? = true) : kotlin.collections.Set<GetSimilarRecipes200ResponseInner> {
        val localVarResponse = getSimilarRecipesWithHttpInfo(id = id, number = number, limitLicense = limitLicense)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<GetSimilarRecipes200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The item&#39;s id.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return ApiResponse<kotlin.collections.Set<GetSimilarRecipes200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSimilarRecipesWithHttpInfo(id: kotlin.Int, number: kotlin.Int?, limitLicense: kotlin.Boolean?) : ApiResponse<kotlin.collections.Set<GetSimilarRecipes200ResponseInner>?> {
        val localVariableConfig = getSimilarRecipesRequestConfig(id = id, number = number, limitLicense = limitLicense)

        return request<Unit, kotlin.collections.Set<GetSimilarRecipes200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSimilarRecipes
     *
     * @param id The item&#39;s id.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return RequestConfig
     */
    fun getSimilarRecipesRequestConfig(id: kotlin.Int, number: kotlin.Int?, limitLicense: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (limitLicense != null) {
                    put("limitLicense", listOf(limitLicense.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/similar".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish.
     * @return GuessNutritionByDishName200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun guessNutritionByDishName(title: kotlin.String) : GuessNutritionByDishName200Response {
        val localVarResponse = guessNutritionByDishNameWithHttpInfo(title = title)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GuessNutritionByDishName200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish.
     * @return ApiResponse<GuessNutritionByDishName200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun guessNutritionByDishNameWithHttpInfo(title: kotlin.String) : ApiResponse<GuessNutritionByDishName200Response?> {
        val localVariableConfig = guessNutritionByDishNameRequestConfig(title = title)

        return request<Unit, GuessNutritionByDishName200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation guessNutritionByDishName
     *
     * @param title The title of the dish.
     * @return RequestConfig
     */
    fun guessNutritionByDishNameRequestConfig(title: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("title", listOf(title.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/guessNutrition",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeParseIngredients(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * enum for parameter language
     */
     enum class LanguageParseIngredients(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return kotlin.collections.Set<ParseIngredients200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun parseIngredients(contentType: ContentTypeParseIngredients? = null, language: LanguageParseIngredients? = null) : kotlin.collections.Set<ParseIngredients200ResponseInner> {
        val localVarResponse = parseIngredientsWithHttpInfo(contentType = contentType, language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<ParseIngredients200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse<kotlin.collections.Set<ParseIngredients200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun parseIngredientsWithHttpInfo(contentType: ContentTypeParseIngredients?, language: LanguageParseIngredients?) : ApiResponse<kotlin.collections.Set<ParseIngredients200ResponseInner>?> {
        val localVariableConfig = parseIngredientsRequestConfig(contentType = contentType, language = language)

        return request<Unit, kotlin.collections.Set<ParseIngredients200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation parseIngredients
     *
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return RequestConfig
     */
    fun parseIngredientsRequestConfig(contentType: ContentTypeParseIngredients?, language: LanguageParseIngredients?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/parseIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Price Breakdown by ID Image
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun priceBreakdownByIDImage(id: java.math.BigDecimal) : kotlin.Any {
        val localVarResponse = priceBreakdownByIDImageWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Price Breakdown by ID Image
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun priceBreakdownByIDImageWithHttpInfo(id: java.math.BigDecimal) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = priceBreakdownByIDImageRequestConfig(id = id)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation priceBreakdownByIDImage
     *
     * @param id The recipe id.
     * @return RequestConfig
     */
    fun priceBreakdownByIDImageRequestConfig(id: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/priceBreakdownWidget.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question.
     * @return QuickAnswer200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun quickAnswer(q: kotlin.String) : QuickAnswer200Response {
        val localVarResponse = quickAnswerWithHttpInfo(q = q)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuickAnswer200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question.
     * @return ApiResponse<QuickAnswer200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun quickAnswerWithHttpInfo(q: kotlin.String) : ApiResponse<QuickAnswer200Response?> {
        val localVariableConfig = quickAnswerRequestConfig(q = q)

        return request<Unit, QuickAnswer200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation quickAnswer
     *
     * @param q The nutrition related question.
     * @return RequestConfig
     */
    fun quickAnswerRequestConfig(q: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/quickAnswer",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recipe Nutrition by ID Image
     * Visualize a recipe&#39;s nutritional information as an image.
     * @param id The recipe id.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun recipeNutritionByIDImage(id: java.math.BigDecimal) : kotlin.Any {
        val localVarResponse = recipeNutritionByIDImageWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Nutrition by ID Image
     * Visualize a recipe&#39;s nutritional information as an image.
     * @param id The recipe id.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun recipeNutritionByIDImageWithHttpInfo(id: java.math.BigDecimal) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = recipeNutritionByIDImageRequestConfig(id = id)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation recipeNutritionByIDImage
     *
     * @param id The recipe id.
     * @return RequestConfig
     */
    fun recipeNutritionByIDImageRequestConfig(id: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/nutritionWidget.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recipe Nutrition Label Image
     * Get a recipe&#39;s nutrition label as an image.
     * @param id The recipe id.
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun recipeNutritionLabelImage(id: java.math.BigDecimal, showOptionalNutrients: kotlin.Boolean? = null, showZeroValues: kotlin.Boolean? = null, showIngredients: kotlin.Boolean? = null) : kotlin.Any {
        val localVarResponse = recipeNutritionLabelImageWithHttpInfo(id = id, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Nutrition Label Image
     * Get a recipe&#39;s nutrition label as an image.
     * @param id The recipe id.
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun recipeNutritionLabelImageWithHttpInfo(id: java.math.BigDecimal, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = recipeNutritionLabelImageRequestConfig(id = id, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation recipeNutritionLabelImage
     *
     * @param id The recipe id.
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return RequestConfig
     */
    fun recipeNutritionLabelImageRequestConfig(id: java.math.BigDecimal, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (showOptionalNutrients != null) {
                    put("showOptionalNutrients", listOf(showOptionalNutrients.toString()))
                }
                if (showZeroValues != null) {
                    put("showZeroValues", listOf(showZeroValues.toString()))
                }
                if (showIngredients != null) {
                    put("showIngredients", listOf(showIngredients.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/nutritionLabel.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recipe Nutrition Label Widget
     * Get a recipe&#39;s nutrition label as an HTML widget.
     * @param id The recipe id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun recipeNutritionLabelWidget(id: java.math.BigDecimal, defaultCss: kotlin.Boolean? = true, showOptionalNutrients: kotlin.Boolean? = null, showZeroValues: kotlin.Boolean? = null, showIngredients: kotlin.Boolean? = null) : kotlin.String {
        val localVarResponse = recipeNutritionLabelWidgetWithHttpInfo(id = id, defaultCss = defaultCss, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Nutrition Label Widget
     * Get a recipe&#39;s nutrition label as an HTML widget.
     * @param id The recipe id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun recipeNutritionLabelWidgetWithHttpInfo(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = recipeNutritionLabelWidgetRequestConfig(id = id, defaultCss = defaultCss, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation recipeNutritionLabelWidget
     *
     * @param id The recipe id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return RequestConfig
     */
    fun recipeNutritionLabelWidgetRequestConfig(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
                if (showOptionalNutrients != null) {
                    put("showOptionalNutrients", listOf(showOptionalNutrients.toString()))
                }
                if (showZeroValues != null) {
                    put("showZeroValues", listOf(showZeroValues.toString()))
                }
                if (showIngredients != null) {
                    put("showIngredients", listOf(showIngredients.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/nutritionLabel".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recipe Taste by ID Image
     * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id.
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun recipeTasteByIDImage(id: java.math.BigDecimal, normalize: kotlin.Boolean? = null, rgb: kotlin.String? = null) : kotlin.Any {
        val localVarResponse = recipeTasteByIDImageWithHttpInfo(id = id, normalize = normalize, rgb = rgb)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Taste by ID Image
     * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id.
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun recipeTasteByIDImageWithHttpInfo(id: java.math.BigDecimal, normalize: kotlin.Boolean?, rgb: kotlin.String?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = recipeTasteByIDImageRequestConfig(id = id, normalize = normalize, rgb = rgb)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation recipeTasteByIDImage
     *
     * @param id The recipe id.
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return RequestConfig
     */
    fun recipeTasteByIDImageRequestConfig(id: java.math.BigDecimal, normalize: kotlin.Boolean?, rgb: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (normalize != null) {
                    put("normalize", listOf(normalize.toString()))
                }
                if (rgb != null) {
                    put("rgb", listOf(rgb.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/tasteWidget.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param minServings The minimum amount of servings the recipe is for. (optional)
     * @param maxServings The maximum amount of servings the recipe is for. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return SearchRecipes200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchRecipes(query: kotlin.String? = null, cuisine: kotlin.String? = null, excludeCuisine: kotlin.String? = null, diet: kotlin.String? = null, intolerances: kotlin.String? = null, equipment: kotlin.String? = null, includeIngredients: kotlin.String? = null, excludeIngredients: kotlin.String? = null, type: kotlin.String? = null, instructionsRequired: kotlin.Boolean? = null, fillIngredients: kotlin.Boolean? = null, addRecipeInformation: kotlin.Boolean? = null, addRecipeNutrition: kotlin.Boolean? = null, author: kotlin.String? = null, tags: kotlin.String? = null, recipeBoxId: java.math.BigDecimal? = null, titleMatch: kotlin.String? = null, maxReadyTime: java.math.BigDecimal? = null, minServings: java.math.BigDecimal? = null, maxServings: java.math.BigDecimal? = null, ignorePantry: kotlin.Boolean? = false, sort: kotlin.String? = null, sortDirection: kotlin.String? = null, minCarbs: java.math.BigDecimal? = null, maxCarbs: java.math.BigDecimal? = null, minProtein: java.math.BigDecimal? = null, maxProtein: java.math.BigDecimal? = null, minCalories: java.math.BigDecimal? = null, maxCalories: java.math.BigDecimal? = null, minFat: java.math.BigDecimal? = null, maxFat: java.math.BigDecimal? = null, minAlcohol: java.math.BigDecimal? = null, maxAlcohol: java.math.BigDecimal? = null, minCaffeine: java.math.BigDecimal? = null, maxCaffeine: java.math.BigDecimal? = null, minCopper: java.math.BigDecimal? = null, maxCopper: java.math.BigDecimal? = null, minCalcium: java.math.BigDecimal? = null, maxCalcium: java.math.BigDecimal? = null, minCholine: java.math.BigDecimal? = null, maxCholine: java.math.BigDecimal? = null, minCholesterol: java.math.BigDecimal? = null, maxCholesterol: java.math.BigDecimal? = null, minFluoride: java.math.BigDecimal? = null, maxFluoride: java.math.BigDecimal? = null, minSaturatedFat: java.math.BigDecimal? = null, maxSaturatedFat: java.math.BigDecimal? = null, minVitaminA: java.math.BigDecimal? = null, maxVitaminA: java.math.BigDecimal? = null, minVitaminC: java.math.BigDecimal? = null, maxVitaminC: java.math.BigDecimal? = null, minVitaminD: java.math.BigDecimal? = null, maxVitaminD: java.math.BigDecimal? = null, minVitaminE: java.math.BigDecimal? = null, maxVitaminE: java.math.BigDecimal? = null, minVitaminK: java.math.BigDecimal? = null, maxVitaminK: java.math.BigDecimal? = null, minVitaminB1: java.math.BigDecimal? = null, maxVitaminB1: java.math.BigDecimal? = null, minVitaminB2: java.math.BigDecimal? = null, maxVitaminB2: java.math.BigDecimal? = null, minVitaminB5: java.math.BigDecimal? = null, maxVitaminB5: java.math.BigDecimal? = null, minVitaminB3: java.math.BigDecimal? = null, maxVitaminB3: java.math.BigDecimal? = null, minVitaminB6: java.math.BigDecimal? = null, maxVitaminB6: java.math.BigDecimal? = null, minVitaminB12: java.math.BigDecimal? = null, maxVitaminB12: java.math.BigDecimal? = null, minFiber: java.math.BigDecimal? = null, maxFiber: java.math.BigDecimal? = null, minFolate: java.math.BigDecimal? = null, maxFolate: java.math.BigDecimal? = null, minFolicAcid: java.math.BigDecimal? = null, maxFolicAcid: java.math.BigDecimal? = null, minIodine: java.math.BigDecimal? = null, maxIodine: java.math.BigDecimal? = null, minIron: java.math.BigDecimal? = null, maxIron: java.math.BigDecimal? = null, minMagnesium: java.math.BigDecimal? = null, maxMagnesium: java.math.BigDecimal? = null, minManganese: java.math.BigDecimal? = null, maxManganese: java.math.BigDecimal? = null, minPhosphorus: java.math.BigDecimal? = null, maxPhosphorus: java.math.BigDecimal? = null, minPotassium: java.math.BigDecimal? = null, maxPotassium: java.math.BigDecimal? = null, minSelenium: java.math.BigDecimal? = null, maxSelenium: java.math.BigDecimal? = null, minSodium: java.math.BigDecimal? = null, maxSodium: java.math.BigDecimal? = null, minSugar: java.math.BigDecimal? = null, maxSugar: java.math.BigDecimal? = null, minZinc: java.math.BigDecimal? = null, maxZinc: java.math.BigDecimal? = null, offset: kotlin.Int? = null, number: kotlin.Int? = 10, limitLicense: kotlin.Boolean? = true) : SearchRecipes200Response {
        val localVarResponse = searchRecipesWithHttpInfo(query = query, cuisine = cuisine, excludeCuisine = excludeCuisine, diet = diet, intolerances = intolerances, equipment = equipment, includeIngredients = includeIngredients, excludeIngredients = excludeIngredients, type = type, instructionsRequired = instructionsRequired, fillIngredients = fillIngredients, addRecipeInformation = addRecipeInformation, addRecipeNutrition = addRecipeNutrition, author = author, tags = tags, recipeBoxId = recipeBoxId, titleMatch = titleMatch, maxReadyTime = maxReadyTime, minServings = minServings, maxServings = maxServings, ignorePantry = ignorePantry, sort = sort, sortDirection = sortDirection, minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minCalories = minCalories, maxCalories = maxCalories, minFat = minFat, maxFat = maxFat, minAlcohol = minAlcohol, maxAlcohol = maxAlcohol, minCaffeine = minCaffeine, maxCaffeine = maxCaffeine, minCopper = minCopper, maxCopper = maxCopper, minCalcium = minCalcium, maxCalcium = maxCalcium, minCholine = minCholine, maxCholine = maxCholine, minCholesterol = minCholesterol, maxCholesterol = maxCholesterol, minFluoride = minFluoride, maxFluoride = maxFluoride, minSaturatedFat = minSaturatedFat, maxSaturatedFat = maxSaturatedFat, minVitaminA = minVitaminA, maxVitaminA = maxVitaminA, minVitaminC = minVitaminC, maxVitaminC = maxVitaminC, minVitaminD = minVitaminD, maxVitaminD = maxVitaminD, minVitaminE = minVitaminE, maxVitaminE = maxVitaminE, minVitaminK = minVitaminK, maxVitaminK = maxVitaminK, minVitaminB1 = minVitaminB1, maxVitaminB1 = maxVitaminB1, minVitaminB2 = minVitaminB2, maxVitaminB2 = maxVitaminB2, minVitaminB5 = minVitaminB5, maxVitaminB5 = maxVitaminB5, minVitaminB3 = minVitaminB3, maxVitaminB3 = maxVitaminB3, minVitaminB6 = minVitaminB6, maxVitaminB6 = maxVitaminB6, minVitaminB12 = minVitaminB12, maxVitaminB12 = maxVitaminB12, minFiber = minFiber, maxFiber = maxFiber, minFolate = minFolate, maxFolate = maxFolate, minFolicAcid = minFolicAcid, maxFolicAcid = maxFolicAcid, minIodine = minIodine, maxIodine = maxIodine, minIron = minIron, maxIron = maxIron, minMagnesium = minMagnesium, maxMagnesium = maxMagnesium, minManganese = minManganese, maxManganese = maxManganese, minPhosphorus = minPhosphorus, maxPhosphorus = maxPhosphorus, minPotassium = minPotassium, maxPotassium = maxPotassium, minSelenium = minSelenium, maxSelenium = maxSelenium, minSodium = minSodium, maxSodium = maxSodium, minSugar = minSugar, maxSugar = maxSugar, minZinc = minZinc, maxZinc = maxZinc, offset = offset, number = number, limitLicense = limitLicense)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchRecipes200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param minServings The minimum amount of servings the recipe is for. (optional)
     * @param maxServings The maximum amount of servings the recipe is for. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return ApiResponse<SearchRecipes200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchRecipesWithHttpInfo(query: kotlin.String?, cuisine: kotlin.String?, excludeCuisine: kotlin.String?, diet: kotlin.String?, intolerances: kotlin.String?, equipment: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, type: kotlin.String?, instructionsRequired: kotlin.Boolean?, fillIngredients: kotlin.Boolean?, addRecipeInformation: kotlin.Boolean?, addRecipeNutrition: kotlin.Boolean?, author: kotlin.String?, tags: kotlin.String?, recipeBoxId: java.math.BigDecimal?, titleMatch: kotlin.String?, maxReadyTime: java.math.BigDecimal?, minServings: java.math.BigDecimal?, maxServings: java.math.BigDecimal?, ignorePantry: kotlin.Boolean?, sort: kotlin.String?, sortDirection: kotlin.String?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, minAlcohol: java.math.BigDecimal?, maxAlcohol: java.math.BigDecimal?, minCaffeine: java.math.BigDecimal?, maxCaffeine: java.math.BigDecimal?, minCopper: java.math.BigDecimal?, maxCopper: java.math.BigDecimal?, minCalcium: java.math.BigDecimal?, maxCalcium: java.math.BigDecimal?, minCholine: java.math.BigDecimal?, maxCholine: java.math.BigDecimal?, minCholesterol: java.math.BigDecimal?, maxCholesterol: java.math.BigDecimal?, minFluoride: java.math.BigDecimal?, maxFluoride: java.math.BigDecimal?, minSaturatedFat: java.math.BigDecimal?, maxSaturatedFat: java.math.BigDecimal?, minVitaminA: java.math.BigDecimal?, maxVitaminA: java.math.BigDecimal?, minVitaminC: java.math.BigDecimal?, maxVitaminC: java.math.BigDecimal?, minVitaminD: java.math.BigDecimal?, maxVitaminD: java.math.BigDecimal?, minVitaminE: java.math.BigDecimal?, maxVitaminE: java.math.BigDecimal?, minVitaminK: java.math.BigDecimal?, maxVitaminK: java.math.BigDecimal?, minVitaminB1: java.math.BigDecimal?, maxVitaminB1: java.math.BigDecimal?, minVitaminB2: java.math.BigDecimal?, maxVitaminB2: java.math.BigDecimal?, minVitaminB5: java.math.BigDecimal?, maxVitaminB5: java.math.BigDecimal?, minVitaminB3: java.math.BigDecimal?, maxVitaminB3: java.math.BigDecimal?, minVitaminB6: java.math.BigDecimal?, maxVitaminB6: java.math.BigDecimal?, minVitaminB12: java.math.BigDecimal?, maxVitaminB12: java.math.BigDecimal?, minFiber: java.math.BigDecimal?, maxFiber: java.math.BigDecimal?, minFolate: java.math.BigDecimal?, maxFolate: java.math.BigDecimal?, minFolicAcid: java.math.BigDecimal?, maxFolicAcid: java.math.BigDecimal?, minIodine: java.math.BigDecimal?, maxIodine: java.math.BigDecimal?, minIron: java.math.BigDecimal?, maxIron: java.math.BigDecimal?, minMagnesium: java.math.BigDecimal?, maxMagnesium: java.math.BigDecimal?, minManganese: java.math.BigDecimal?, maxManganese: java.math.BigDecimal?, minPhosphorus: java.math.BigDecimal?, maxPhosphorus: java.math.BigDecimal?, minPotassium: java.math.BigDecimal?, maxPotassium: java.math.BigDecimal?, minSelenium: java.math.BigDecimal?, maxSelenium: java.math.BigDecimal?, minSodium: java.math.BigDecimal?, maxSodium: java.math.BigDecimal?, minSugar: java.math.BigDecimal?, maxSugar: java.math.BigDecimal?, minZinc: java.math.BigDecimal?, maxZinc: java.math.BigDecimal?, offset: kotlin.Int?, number: kotlin.Int?, limitLicense: kotlin.Boolean?) : ApiResponse<SearchRecipes200Response?> {
        val localVariableConfig = searchRecipesRequestConfig(query = query, cuisine = cuisine, excludeCuisine = excludeCuisine, diet = diet, intolerances = intolerances, equipment = equipment, includeIngredients = includeIngredients, excludeIngredients = excludeIngredients, type = type, instructionsRequired = instructionsRequired, fillIngredients = fillIngredients, addRecipeInformation = addRecipeInformation, addRecipeNutrition = addRecipeNutrition, author = author, tags = tags, recipeBoxId = recipeBoxId, titleMatch = titleMatch, maxReadyTime = maxReadyTime, minServings = minServings, maxServings = maxServings, ignorePantry = ignorePantry, sort = sort, sortDirection = sortDirection, minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minCalories = minCalories, maxCalories = maxCalories, minFat = minFat, maxFat = maxFat, minAlcohol = minAlcohol, maxAlcohol = maxAlcohol, minCaffeine = minCaffeine, maxCaffeine = maxCaffeine, minCopper = minCopper, maxCopper = maxCopper, minCalcium = minCalcium, maxCalcium = maxCalcium, minCholine = minCholine, maxCholine = maxCholine, minCholesterol = minCholesterol, maxCholesterol = maxCholesterol, minFluoride = minFluoride, maxFluoride = maxFluoride, minSaturatedFat = minSaturatedFat, maxSaturatedFat = maxSaturatedFat, minVitaminA = minVitaminA, maxVitaminA = maxVitaminA, minVitaminC = minVitaminC, maxVitaminC = maxVitaminC, minVitaminD = minVitaminD, maxVitaminD = maxVitaminD, minVitaminE = minVitaminE, maxVitaminE = maxVitaminE, minVitaminK = minVitaminK, maxVitaminK = maxVitaminK, minVitaminB1 = minVitaminB1, maxVitaminB1 = maxVitaminB1, minVitaminB2 = minVitaminB2, maxVitaminB2 = maxVitaminB2, minVitaminB5 = minVitaminB5, maxVitaminB5 = maxVitaminB5, minVitaminB3 = minVitaminB3, maxVitaminB3 = maxVitaminB3, minVitaminB6 = minVitaminB6, maxVitaminB6 = maxVitaminB6, minVitaminB12 = minVitaminB12, maxVitaminB12 = maxVitaminB12, minFiber = minFiber, maxFiber = maxFiber, minFolate = minFolate, maxFolate = maxFolate, minFolicAcid = minFolicAcid, maxFolicAcid = maxFolicAcid, minIodine = minIodine, maxIodine = maxIodine, minIron = minIron, maxIron = maxIron, minMagnesium = minMagnesium, maxMagnesium = maxMagnesium, minManganese = minManganese, maxManganese = maxManganese, minPhosphorus = minPhosphorus, maxPhosphorus = maxPhosphorus, minPotassium = minPotassium, maxPotassium = maxPotassium, minSelenium = minSelenium, maxSelenium = maxSelenium, minSodium = minSodium, maxSodium = maxSodium, minSugar = minSugar, maxSugar = maxSugar, minZinc = minZinc, maxZinc = maxZinc, offset = offset, number = number, limitLicense = limitLicense)

        return request<Unit, SearchRecipes200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchRecipes
     *
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param minServings The minimum amount of servings the recipe is for. (optional)
     * @param maxServings The maximum amount of servings the recipe is for. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return RequestConfig
     */
    fun searchRecipesRequestConfig(query: kotlin.String?, cuisine: kotlin.String?, excludeCuisine: kotlin.String?, diet: kotlin.String?, intolerances: kotlin.String?, equipment: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, type: kotlin.String?, instructionsRequired: kotlin.Boolean?, fillIngredients: kotlin.Boolean?, addRecipeInformation: kotlin.Boolean?, addRecipeNutrition: kotlin.Boolean?, author: kotlin.String?, tags: kotlin.String?, recipeBoxId: java.math.BigDecimal?, titleMatch: kotlin.String?, maxReadyTime: java.math.BigDecimal?, minServings: java.math.BigDecimal?, maxServings: java.math.BigDecimal?, ignorePantry: kotlin.Boolean?, sort: kotlin.String?, sortDirection: kotlin.String?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, minAlcohol: java.math.BigDecimal?, maxAlcohol: java.math.BigDecimal?, minCaffeine: java.math.BigDecimal?, maxCaffeine: java.math.BigDecimal?, minCopper: java.math.BigDecimal?, maxCopper: java.math.BigDecimal?, minCalcium: java.math.BigDecimal?, maxCalcium: java.math.BigDecimal?, minCholine: java.math.BigDecimal?, maxCholine: java.math.BigDecimal?, minCholesterol: java.math.BigDecimal?, maxCholesterol: java.math.BigDecimal?, minFluoride: java.math.BigDecimal?, maxFluoride: java.math.BigDecimal?, minSaturatedFat: java.math.BigDecimal?, maxSaturatedFat: java.math.BigDecimal?, minVitaminA: java.math.BigDecimal?, maxVitaminA: java.math.BigDecimal?, minVitaminC: java.math.BigDecimal?, maxVitaminC: java.math.BigDecimal?, minVitaminD: java.math.BigDecimal?, maxVitaminD: java.math.BigDecimal?, minVitaminE: java.math.BigDecimal?, maxVitaminE: java.math.BigDecimal?, minVitaminK: java.math.BigDecimal?, maxVitaminK: java.math.BigDecimal?, minVitaminB1: java.math.BigDecimal?, maxVitaminB1: java.math.BigDecimal?, minVitaminB2: java.math.BigDecimal?, maxVitaminB2: java.math.BigDecimal?, minVitaminB5: java.math.BigDecimal?, maxVitaminB5: java.math.BigDecimal?, minVitaminB3: java.math.BigDecimal?, maxVitaminB3: java.math.BigDecimal?, minVitaminB6: java.math.BigDecimal?, maxVitaminB6: java.math.BigDecimal?, minVitaminB12: java.math.BigDecimal?, maxVitaminB12: java.math.BigDecimal?, minFiber: java.math.BigDecimal?, maxFiber: java.math.BigDecimal?, minFolate: java.math.BigDecimal?, maxFolate: java.math.BigDecimal?, minFolicAcid: java.math.BigDecimal?, maxFolicAcid: java.math.BigDecimal?, minIodine: java.math.BigDecimal?, maxIodine: java.math.BigDecimal?, minIron: java.math.BigDecimal?, maxIron: java.math.BigDecimal?, minMagnesium: java.math.BigDecimal?, maxMagnesium: java.math.BigDecimal?, minManganese: java.math.BigDecimal?, maxManganese: java.math.BigDecimal?, minPhosphorus: java.math.BigDecimal?, maxPhosphorus: java.math.BigDecimal?, minPotassium: java.math.BigDecimal?, maxPotassium: java.math.BigDecimal?, minSelenium: java.math.BigDecimal?, maxSelenium: java.math.BigDecimal?, minSodium: java.math.BigDecimal?, maxSodium: java.math.BigDecimal?, minSugar: java.math.BigDecimal?, maxSugar: java.math.BigDecimal?, minZinc: java.math.BigDecimal?, maxZinc: java.math.BigDecimal?, offset: kotlin.Int?, number: kotlin.Int?, limitLicense: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (cuisine != null) {
                    put("cuisine", listOf(cuisine.toString()))
                }
                if (excludeCuisine != null) {
                    put("excludeCuisine", listOf(excludeCuisine.toString()))
                }
                if (diet != null) {
                    put("diet", listOf(diet.toString()))
                }
                if (intolerances != null) {
                    put("intolerances", listOf(intolerances.toString()))
                }
                if (equipment != null) {
                    put("equipment", listOf(equipment.toString()))
                }
                if (includeIngredients != null) {
                    put("includeIngredients", listOf(includeIngredients.toString()))
                }
                if (excludeIngredients != null) {
                    put("excludeIngredients", listOf(excludeIngredients.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (instructionsRequired != null) {
                    put("instructionsRequired", listOf(instructionsRequired.toString()))
                }
                if (fillIngredients != null) {
                    put("fillIngredients", listOf(fillIngredients.toString()))
                }
                if (addRecipeInformation != null) {
                    put("addRecipeInformation", listOf(addRecipeInformation.toString()))
                }
                if (addRecipeNutrition != null) {
                    put("addRecipeNutrition", listOf(addRecipeNutrition.toString()))
                }
                if (author != null) {
                    put("author", listOf(author.toString()))
                }
                if (tags != null) {
                    put("tags", listOf(tags.toString()))
                }
                if (recipeBoxId != null) {
                    put("recipeBoxId", listOf(recipeBoxId.toString()))
                }
                if (titleMatch != null) {
                    put("titleMatch", listOf(titleMatch.toString()))
                }
                if (maxReadyTime != null) {
                    put("maxReadyTime", listOf(maxReadyTime.toString()))
                }
                if (minServings != null) {
                    put("minServings", listOf(minServings.toString()))
                }
                if (maxServings != null) {
                    put("maxServings", listOf(maxServings.toString()))
                }
                if (ignorePantry != null) {
                    put("ignorePantry", listOf(ignorePantry.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (sortDirection != null) {
                    put("sortDirection", listOf(sortDirection.toString()))
                }
                if (minCarbs != null) {
                    put("minCarbs", listOf(minCarbs.toString()))
                }
                if (maxCarbs != null) {
                    put("maxCarbs", listOf(maxCarbs.toString()))
                }
                if (minProtein != null) {
                    put("minProtein", listOf(minProtein.toString()))
                }
                if (maxProtein != null) {
                    put("maxProtein", listOf(maxProtein.toString()))
                }
                if (minCalories != null) {
                    put("minCalories", listOf(minCalories.toString()))
                }
                if (maxCalories != null) {
                    put("maxCalories", listOf(maxCalories.toString()))
                }
                if (minFat != null) {
                    put("minFat", listOf(minFat.toString()))
                }
                if (maxFat != null) {
                    put("maxFat", listOf(maxFat.toString()))
                }
                if (minAlcohol != null) {
                    put("minAlcohol", listOf(minAlcohol.toString()))
                }
                if (maxAlcohol != null) {
                    put("maxAlcohol", listOf(maxAlcohol.toString()))
                }
                if (minCaffeine != null) {
                    put("minCaffeine", listOf(minCaffeine.toString()))
                }
                if (maxCaffeine != null) {
                    put("maxCaffeine", listOf(maxCaffeine.toString()))
                }
                if (minCopper != null) {
                    put("minCopper", listOf(minCopper.toString()))
                }
                if (maxCopper != null) {
                    put("maxCopper", listOf(maxCopper.toString()))
                }
                if (minCalcium != null) {
                    put("minCalcium", listOf(minCalcium.toString()))
                }
                if (maxCalcium != null) {
                    put("maxCalcium", listOf(maxCalcium.toString()))
                }
                if (minCholine != null) {
                    put("minCholine", listOf(minCholine.toString()))
                }
                if (maxCholine != null) {
                    put("maxCholine", listOf(maxCholine.toString()))
                }
                if (minCholesterol != null) {
                    put("minCholesterol", listOf(minCholesterol.toString()))
                }
                if (maxCholesterol != null) {
                    put("maxCholesterol", listOf(maxCholesterol.toString()))
                }
                if (minFluoride != null) {
                    put("minFluoride", listOf(minFluoride.toString()))
                }
                if (maxFluoride != null) {
                    put("maxFluoride", listOf(maxFluoride.toString()))
                }
                if (minSaturatedFat != null) {
                    put("minSaturatedFat", listOf(minSaturatedFat.toString()))
                }
                if (maxSaturatedFat != null) {
                    put("maxSaturatedFat", listOf(maxSaturatedFat.toString()))
                }
                if (minVitaminA != null) {
                    put("minVitaminA", listOf(minVitaminA.toString()))
                }
                if (maxVitaminA != null) {
                    put("maxVitaminA", listOf(maxVitaminA.toString()))
                }
                if (minVitaminC != null) {
                    put("minVitaminC", listOf(minVitaminC.toString()))
                }
                if (maxVitaminC != null) {
                    put("maxVitaminC", listOf(maxVitaminC.toString()))
                }
                if (minVitaminD != null) {
                    put("minVitaminD", listOf(minVitaminD.toString()))
                }
                if (maxVitaminD != null) {
                    put("maxVitaminD", listOf(maxVitaminD.toString()))
                }
                if (minVitaminE != null) {
                    put("minVitaminE", listOf(minVitaminE.toString()))
                }
                if (maxVitaminE != null) {
                    put("maxVitaminE", listOf(maxVitaminE.toString()))
                }
                if (minVitaminK != null) {
                    put("minVitaminK", listOf(minVitaminK.toString()))
                }
                if (maxVitaminK != null) {
                    put("maxVitaminK", listOf(maxVitaminK.toString()))
                }
                if (minVitaminB1 != null) {
                    put("minVitaminB1", listOf(minVitaminB1.toString()))
                }
                if (maxVitaminB1 != null) {
                    put("maxVitaminB1", listOf(maxVitaminB1.toString()))
                }
                if (minVitaminB2 != null) {
                    put("minVitaminB2", listOf(minVitaminB2.toString()))
                }
                if (maxVitaminB2 != null) {
                    put("maxVitaminB2", listOf(maxVitaminB2.toString()))
                }
                if (minVitaminB5 != null) {
                    put("minVitaminB5", listOf(minVitaminB5.toString()))
                }
                if (maxVitaminB5 != null) {
                    put("maxVitaminB5", listOf(maxVitaminB5.toString()))
                }
                if (minVitaminB3 != null) {
                    put("minVitaminB3", listOf(minVitaminB3.toString()))
                }
                if (maxVitaminB3 != null) {
                    put("maxVitaminB3", listOf(maxVitaminB3.toString()))
                }
                if (minVitaminB6 != null) {
                    put("minVitaminB6", listOf(minVitaminB6.toString()))
                }
                if (maxVitaminB6 != null) {
                    put("maxVitaminB6", listOf(maxVitaminB6.toString()))
                }
                if (minVitaminB12 != null) {
                    put("minVitaminB12", listOf(minVitaminB12.toString()))
                }
                if (maxVitaminB12 != null) {
                    put("maxVitaminB12", listOf(maxVitaminB12.toString()))
                }
                if (minFiber != null) {
                    put("minFiber", listOf(minFiber.toString()))
                }
                if (maxFiber != null) {
                    put("maxFiber", listOf(maxFiber.toString()))
                }
                if (minFolate != null) {
                    put("minFolate", listOf(minFolate.toString()))
                }
                if (maxFolate != null) {
                    put("maxFolate", listOf(maxFolate.toString()))
                }
                if (minFolicAcid != null) {
                    put("minFolicAcid", listOf(minFolicAcid.toString()))
                }
                if (maxFolicAcid != null) {
                    put("maxFolicAcid", listOf(maxFolicAcid.toString()))
                }
                if (minIodine != null) {
                    put("minIodine", listOf(minIodine.toString()))
                }
                if (maxIodine != null) {
                    put("maxIodine", listOf(maxIodine.toString()))
                }
                if (minIron != null) {
                    put("minIron", listOf(minIron.toString()))
                }
                if (maxIron != null) {
                    put("maxIron", listOf(maxIron.toString()))
                }
                if (minMagnesium != null) {
                    put("minMagnesium", listOf(minMagnesium.toString()))
                }
                if (maxMagnesium != null) {
                    put("maxMagnesium", listOf(maxMagnesium.toString()))
                }
                if (minManganese != null) {
                    put("minManganese", listOf(minManganese.toString()))
                }
                if (maxManganese != null) {
                    put("maxManganese", listOf(maxManganese.toString()))
                }
                if (minPhosphorus != null) {
                    put("minPhosphorus", listOf(minPhosphorus.toString()))
                }
                if (maxPhosphorus != null) {
                    put("maxPhosphorus", listOf(maxPhosphorus.toString()))
                }
                if (minPotassium != null) {
                    put("minPotassium", listOf(minPotassium.toString()))
                }
                if (maxPotassium != null) {
                    put("maxPotassium", listOf(maxPotassium.toString()))
                }
                if (minSelenium != null) {
                    put("minSelenium", listOf(minSelenium.toString()))
                }
                if (maxSelenium != null) {
                    put("maxSelenium", listOf(maxSelenium.toString()))
                }
                if (minSodium != null) {
                    put("minSodium", listOf(minSodium.toString()))
                }
                if (maxSodium != null) {
                    put("maxSodium", listOf(maxSodium.toString()))
                }
                if (minSugar != null) {
                    put("minSugar", listOf(minSugar.toString()))
                }
                if (maxSugar != null) {
                    put("maxSugar", listOf(maxSugar.toString()))
                }
                if (minZinc != null) {
                    put("minZinc", listOf(minZinc.toString()))
                }
                if (maxZinc != null) {
                    put("maxZinc", listOf(maxZinc.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (limitLicense != null) {
                    put("limitLicense", listOf(limitLicense.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/complexSearch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Recipes by Ingredients
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @return kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchRecipesByIngredients(ingredients: kotlin.String? = null, number: kotlin.Int? = 10, limitLicense: kotlin.Boolean? = true, ranking: java.math.BigDecimal? = null, ignorePantry: kotlin.Boolean? = false) : kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner> {
        val localVarResponse = searchRecipesByIngredientsWithHttpInfo(ingredients = ingredients, number = number, limitLicense = limitLicense, ranking = ranking, ignorePantry = ignorePantry)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Recipes by Ingredients
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @return ApiResponse<kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchRecipesByIngredientsWithHttpInfo(ingredients: kotlin.String?, number: kotlin.Int?, limitLicense: kotlin.Boolean?, ranking: java.math.BigDecimal?, ignorePantry: kotlin.Boolean?) : ApiResponse<kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>?> {
        val localVariableConfig = searchRecipesByIngredientsRequestConfig(ingredients = ingredients, number = number, limitLicense = limitLicense, ranking = ranking, ignorePantry = ignorePantry)

        return request<Unit, kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchRecipesByIngredients
     *
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @return RequestConfig
     */
    fun searchRecipesByIngredientsRequestConfig(ingredients: kotlin.String?, number: kotlin.Int?, limitLicense: kotlin.Boolean?, ranking: java.math.BigDecimal?, ignorePantry: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (ingredients != null) {
                    put("ingredients", listOf(ingredients.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (limitLicense != null) {
                    put("limitLicense", listOf(limitLicense.toString()))
                }
                if (ranking != null) {
                    put("ranking", listOf(ranking.toString()))
                }
                if (ignorePantry != null) {
                    put("ignorePantry", listOf(ignorePantry.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/findByIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchRecipesByNutrients(minCarbs: java.math.BigDecimal? = null, maxCarbs: java.math.BigDecimal? = null, minProtein: java.math.BigDecimal? = null, maxProtein: java.math.BigDecimal? = null, minCalories: java.math.BigDecimal? = null, maxCalories: java.math.BigDecimal? = null, minFat: java.math.BigDecimal? = null, maxFat: java.math.BigDecimal? = null, minAlcohol: java.math.BigDecimal? = null, maxAlcohol: java.math.BigDecimal? = null, minCaffeine: java.math.BigDecimal? = null, maxCaffeine: java.math.BigDecimal? = null, minCopper: java.math.BigDecimal? = null, maxCopper: java.math.BigDecimal? = null, minCalcium: java.math.BigDecimal? = null, maxCalcium: java.math.BigDecimal? = null, minCholine: java.math.BigDecimal? = null, maxCholine: java.math.BigDecimal? = null, minCholesterol: java.math.BigDecimal? = null, maxCholesterol: java.math.BigDecimal? = null, minFluoride: java.math.BigDecimal? = null, maxFluoride: java.math.BigDecimal? = null, minSaturatedFat: java.math.BigDecimal? = null, maxSaturatedFat: java.math.BigDecimal? = null, minVitaminA: java.math.BigDecimal? = null, maxVitaminA: java.math.BigDecimal? = null, minVitaminC: java.math.BigDecimal? = null, maxVitaminC: java.math.BigDecimal? = null, minVitaminD: java.math.BigDecimal? = null, maxVitaminD: java.math.BigDecimal? = null, minVitaminE: java.math.BigDecimal? = null, maxVitaminE: java.math.BigDecimal? = null, minVitaminK: java.math.BigDecimal? = null, maxVitaminK: java.math.BigDecimal? = null, minVitaminB1: java.math.BigDecimal? = null, maxVitaminB1: java.math.BigDecimal? = null, minVitaminB2: java.math.BigDecimal? = null, maxVitaminB2: java.math.BigDecimal? = null, minVitaminB5: java.math.BigDecimal? = null, maxVitaminB5: java.math.BigDecimal? = null, minVitaminB3: java.math.BigDecimal? = null, maxVitaminB3: java.math.BigDecimal? = null, minVitaminB6: java.math.BigDecimal? = null, maxVitaminB6: java.math.BigDecimal? = null, minVitaminB12: java.math.BigDecimal? = null, maxVitaminB12: java.math.BigDecimal? = null, minFiber: java.math.BigDecimal? = null, maxFiber: java.math.BigDecimal? = null, minFolate: java.math.BigDecimal? = null, maxFolate: java.math.BigDecimal? = null, minFolicAcid: java.math.BigDecimal? = null, maxFolicAcid: java.math.BigDecimal? = null, minIodine: java.math.BigDecimal? = null, maxIodine: java.math.BigDecimal? = null, minIron: java.math.BigDecimal? = null, maxIron: java.math.BigDecimal? = null, minMagnesium: java.math.BigDecimal? = null, maxMagnesium: java.math.BigDecimal? = null, minManganese: java.math.BigDecimal? = null, maxManganese: java.math.BigDecimal? = null, minPhosphorus: java.math.BigDecimal? = null, maxPhosphorus: java.math.BigDecimal? = null, minPotassium: java.math.BigDecimal? = null, maxPotassium: java.math.BigDecimal? = null, minSelenium: java.math.BigDecimal? = null, maxSelenium: java.math.BigDecimal? = null, minSodium: java.math.BigDecimal? = null, maxSodium: java.math.BigDecimal? = null, minSugar: java.math.BigDecimal? = null, maxSugar: java.math.BigDecimal? = null, minZinc: java.math.BigDecimal? = null, maxZinc: java.math.BigDecimal? = null, offset: kotlin.Int? = null, number: kotlin.Int? = 10, random: kotlin.Boolean? = null, limitLicense: kotlin.Boolean? = true) : kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner> {
        val localVarResponse = searchRecipesByNutrientsWithHttpInfo(minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minCalories = minCalories, maxCalories = maxCalories, minFat = minFat, maxFat = maxFat, minAlcohol = minAlcohol, maxAlcohol = maxAlcohol, minCaffeine = minCaffeine, maxCaffeine = maxCaffeine, minCopper = minCopper, maxCopper = maxCopper, minCalcium = minCalcium, maxCalcium = maxCalcium, minCholine = minCholine, maxCholine = maxCholine, minCholesterol = minCholesterol, maxCholesterol = maxCholesterol, minFluoride = minFluoride, maxFluoride = maxFluoride, minSaturatedFat = minSaturatedFat, maxSaturatedFat = maxSaturatedFat, minVitaminA = minVitaminA, maxVitaminA = maxVitaminA, minVitaminC = minVitaminC, maxVitaminC = maxVitaminC, minVitaminD = minVitaminD, maxVitaminD = maxVitaminD, minVitaminE = minVitaminE, maxVitaminE = maxVitaminE, minVitaminK = minVitaminK, maxVitaminK = maxVitaminK, minVitaminB1 = minVitaminB1, maxVitaminB1 = maxVitaminB1, minVitaminB2 = minVitaminB2, maxVitaminB2 = maxVitaminB2, minVitaminB5 = minVitaminB5, maxVitaminB5 = maxVitaminB5, minVitaminB3 = minVitaminB3, maxVitaminB3 = maxVitaminB3, minVitaminB6 = minVitaminB6, maxVitaminB6 = maxVitaminB6, minVitaminB12 = minVitaminB12, maxVitaminB12 = maxVitaminB12, minFiber = minFiber, maxFiber = maxFiber, minFolate = minFolate, maxFolate = maxFolate, minFolicAcid = minFolicAcid, maxFolicAcid = maxFolicAcid, minIodine = minIodine, maxIodine = maxIodine, minIron = minIron, maxIron = maxIron, minMagnesium = minMagnesium, maxMagnesium = maxMagnesium, minManganese = minManganese, maxManganese = maxManganese, minPhosphorus = minPhosphorus, maxPhosphorus = maxPhosphorus, minPotassium = minPotassium, maxPotassium = maxPotassium, minSelenium = minSelenium, maxSelenium = maxSelenium, minSodium = minSodium, maxSodium = maxSodium, minSugar = minSugar, maxSugar = maxSugar, minZinc = minZinc, maxZinc = maxZinc, offset = offset, number = number, random = random, limitLicense = limitLicense)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return ApiResponse<kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchRecipesByNutrientsWithHttpInfo(minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, minAlcohol: java.math.BigDecimal?, maxAlcohol: java.math.BigDecimal?, minCaffeine: java.math.BigDecimal?, maxCaffeine: java.math.BigDecimal?, minCopper: java.math.BigDecimal?, maxCopper: java.math.BigDecimal?, minCalcium: java.math.BigDecimal?, maxCalcium: java.math.BigDecimal?, minCholine: java.math.BigDecimal?, maxCholine: java.math.BigDecimal?, minCholesterol: java.math.BigDecimal?, maxCholesterol: java.math.BigDecimal?, minFluoride: java.math.BigDecimal?, maxFluoride: java.math.BigDecimal?, minSaturatedFat: java.math.BigDecimal?, maxSaturatedFat: java.math.BigDecimal?, minVitaminA: java.math.BigDecimal?, maxVitaminA: java.math.BigDecimal?, minVitaminC: java.math.BigDecimal?, maxVitaminC: java.math.BigDecimal?, minVitaminD: java.math.BigDecimal?, maxVitaminD: java.math.BigDecimal?, minVitaminE: java.math.BigDecimal?, maxVitaminE: java.math.BigDecimal?, minVitaminK: java.math.BigDecimal?, maxVitaminK: java.math.BigDecimal?, minVitaminB1: java.math.BigDecimal?, maxVitaminB1: java.math.BigDecimal?, minVitaminB2: java.math.BigDecimal?, maxVitaminB2: java.math.BigDecimal?, minVitaminB5: java.math.BigDecimal?, maxVitaminB5: java.math.BigDecimal?, minVitaminB3: java.math.BigDecimal?, maxVitaminB3: java.math.BigDecimal?, minVitaminB6: java.math.BigDecimal?, maxVitaminB6: java.math.BigDecimal?, minVitaminB12: java.math.BigDecimal?, maxVitaminB12: java.math.BigDecimal?, minFiber: java.math.BigDecimal?, maxFiber: java.math.BigDecimal?, minFolate: java.math.BigDecimal?, maxFolate: java.math.BigDecimal?, minFolicAcid: java.math.BigDecimal?, maxFolicAcid: java.math.BigDecimal?, minIodine: java.math.BigDecimal?, maxIodine: java.math.BigDecimal?, minIron: java.math.BigDecimal?, maxIron: java.math.BigDecimal?, minMagnesium: java.math.BigDecimal?, maxMagnesium: java.math.BigDecimal?, minManganese: java.math.BigDecimal?, maxManganese: java.math.BigDecimal?, minPhosphorus: java.math.BigDecimal?, maxPhosphorus: java.math.BigDecimal?, minPotassium: java.math.BigDecimal?, maxPotassium: java.math.BigDecimal?, minSelenium: java.math.BigDecimal?, maxSelenium: java.math.BigDecimal?, minSodium: java.math.BigDecimal?, maxSodium: java.math.BigDecimal?, minSugar: java.math.BigDecimal?, maxSugar: java.math.BigDecimal?, minZinc: java.math.BigDecimal?, maxZinc: java.math.BigDecimal?, offset: kotlin.Int?, number: kotlin.Int?, random: kotlin.Boolean?, limitLicense: kotlin.Boolean?) : ApiResponse<kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>?> {
        val localVariableConfig = searchRecipesByNutrientsRequestConfig(minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minCalories = minCalories, maxCalories = maxCalories, minFat = minFat, maxFat = maxFat, minAlcohol = minAlcohol, maxAlcohol = maxAlcohol, minCaffeine = minCaffeine, maxCaffeine = maxCaffeine, minCopper = minCopper, maxCopper = maxCopper, minCalcium = minCalcium, maxCalcium = maxCalcium, minCholine = minCholine, maxCholine = maxCholine, minCholesterol = minCholesterol, maxCholesterol = maxCholesterol, minFluoride = minFluoride, maxFluoride = maxFluoride, minSaturatedFat = minSaturatedFat, maxSaturatedFat = maxSaturatedFat, minVitaminA = minVitaminA, maxVitaminA = maxVitaminA, minVitaminC = minVitaminC, maxVitaminC = maxVitaminC, minVitaminD = minVitaminD, maxVitaminD = maxVitaminD, minVitaminE = minVitaminE, maxVitaminE = maxVitaminE, minVitaminK = minVitaminK, maxVitaminK = maxVitaminK, minVitaminB1 = minVitaminB1, maxVitaminB1 = maxVitaminB1, minVitaminB2 = minVitaminB2, maxVitaminB2 = maxVitaminB2, minVitaminB5 = minVitaminB5, maxVitaminB5 = maxVitaminB5, minVitaminB3 = minVitaminB3, maxVitaminB3 = maxVitaminB3, minVitaminB6 = minVitaminB6, maxVitaminB6 = maxVitaminB6, minVitaminB12 = minVitaminB12, maxVitaminB12 = maxVitaminB12, minFiber = minFiber, maxFiber = maxFiber, minFolate = minFolate, maxFolate = maxFolate, minFolicAcid = minFolicAcid, maxFolicAcid = maxFolicAcid, minIodine = minIodine, maxIodine = maxIodine, minIron = minIron, maxIron = maxIron, minMagnesium = minMagnesium, maxMagnesium = maxMagnesium, minManganese = minManganese, maxManganese = maxManganese, minPhosphorus = minPhosphorus, maxPhosphorus = maxPhosphorus, minPotassium = minPotassium, maxPotassium = maxPotassium, minSelenium = minSelenium, maxSelenium = maxSelenium, minSodium = minSodium, maxSodium = maxSodium, minSugar = minSugar, maxSugar = maxSugar, minZinc = minZinc, maxZinc = maxZinc, offset = offset, number = number, random = random, limitLicense = limitLicense)

        return request<Unit, kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchRecipesByNutrients
     *
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return RequestConfig
     */
    fun searchRecipesByNutrientsRequestConfig(minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, minAlcohol: java.math.BigDecimal?, maxAlcohol: java.math.BigDecimal?, minCaffeine: java.math.BigDecimal?, maxCaffeine: java.math.BigDecimal?, minCopper: java.math.BigDecimal?, maxCopper: java.math.BigDecimal?, minCalcium: java.math.BigDecimal?, maxCalcium: java.math.BigDecimal?, minCholine: java.math.BigDecimal?, maxCholine: java.math.BigDecimal?, minCholesterol: java.math.BigDecimal?, maxCholesterol: java.math.BigDecimal?, minFluoride: java.math.BigDecimal?, maxFluoride: java.math.BigDecimal?, minSaturatedFat: java.math.BigDecimal?, maxSaturatedFat: java.math.BigDecimal?, minVitaminA: java.math.BigDecimal?, maxVitaminA: java.math.BigDecimal?, minVitaminC: java.math.BigDecimal?, maxVitaminC: java.math.BigDecimal?, minVitaminD: java.math.BigDecimal?, maxVitaminD: java.math.BigDecimal?, minVitaminE: java.math.BigDecimal?, maxVitaminE: java.math.BigDecimal?, minVitaminK: java.math.BigDecimal?, maxVitaminK: java.math.BigDecimal?, minVitaminB1: java.math.BigDecimal?, maxVitaminB1: java.math.BigDecimal?, minVitaminB2: java.math.BigDecimal?, maxVitaminB2: java.math.BigDecimal?, minVitaminB5: java.math.BigDecimal?, maxVitaminB5: java.math.BigDecimal?, minVitaminB3: java.math.BigDecimal?, maxVitaminB3: java.math.BigDecimal?, minVitaminB6: java.math.BigDecimal?, maxVitaminB6: java.math.BigDecimal?, minVitaminB12: java.math.BigDecimal?, maxVitaminB12: java.math.BigDecimal?, minFiber: java.math.BigDecimal?, maxFiber: java.math.BigDecimal?, minFolate: java.math.BigDecimal?, maxFolate: java.math.BigDecimal?, minFolicAcid: java.math.BigDecimal?, maxFolicAcid: java.math.BigDecimal?, minIodine: java.math.BigDecimal?, maxIodine: java.math.BigDecimal?, minIron: java.math.BigDecimal?, maxIron: java.math.BigDecimal?, minMagnesium: java.math.BigDecimal?, maxMagnesium: java.math.BigDecimal?, minManganese: java.math.BigDecimal?, maxManganese: java.math.BigDecimal?, minPhosphorus: java.math.BigDecimal?, maxPhosphorus: java.math.BigDecimal?, minPotassium: java.math.BigDecimal?, maxPotassium: java.math.BigDecimal?, minSelenium: java.math.BigDecimal?, maxSelenium: java.math.BigDecimal?, minSodium: java.math.BigDecimal?, maxSodium: java.math.BigDecimal?, minSugar: java.math.BigDecimal?, maxSugar: java.math.BigDecimal?, minZinc: java.math.BigDecimal?, maxZinc: java.math.BigDecimal?, offset: kotlin.Int?, number: kotlin.Int?, random: kotlin.Boolean?, limitLicense: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (minCarbs != null) {
                    put("minCarbs", listOf(minCarbs.toString()))
                }
                if (maxCarbs != null) {
                    put("maxCarbs", listOf(maxCarbs.toString()))
                }
                if (minProtein != null) {
                    put("minProtein", listOf(minProtein.toString()))
                }
                if (maxProtein != null) {
                    put("maxProtein", listOf(maxProtein.toString()))
                }
                if (minCalories != null) {
                    put("minCalories", listOf(minCalories.toString()))
                }
                if (maxCalories != null) {
                    put("maxCalories", listOf(maxCalories.toString()))
                }
                if (minFat != null) {
                    put("minFat", listOf(minFat.toString()))
                }
                if (maxFat != null) {
                    put("maxFat", listOf(maxFat.toString()))
                }
                if (minAlcohol != null) {
                    put("minAlcohol", listOf(minAlcohol.toString()))
                }
                if (maxAlcohol != null) {
                    put("maxAlcohol", listOf(maxAlcohol.toString()))
                }
                if (minCaffeine != null) {
                    put("minCaffeine", listOf(minCaffeine.toString()))
                }
                if (maxCaffeine != null) {
                    put("maxCaffeine", listOf(maxCaffeine.toString()))
                }
                if (minCopper != null) {
                    put("minCopper", listOf(minCopper.toString()))
                }
                if (maxCopper != null) {
                    put("maxCopper", listOf(maxCopper.toString()))
                }
                if (minCalcium != null) {
                    put("minCalcium", listOf(minCalcium.toString()))
                }
                if (maxCalcium != null) {
                    put("maxCalcium", listOf(maxCalcium.toString()))
                }
                if (minCholine != null) {
                    put("minCholine", listOf(minCholine.toString()))
                }
                if (maxCholine != null) {
                    put("maxCholine", listOf(maxCholine.toString()))
                }
                if (minCholesterol != null) {
                    put("minCholesterol", listOf(minCholesterol.toString()))
                }
                if (maxCholesterol != null) {
                    put("maxCholesterol", listOf(maxCholesterol.toString()))
                }
                if (minFluoride != null) {
                    put("minFluoride", listOf(minFluoride.toString()))
                }
                if (maxFluoride != null) {
                    put("maxFluoride", listOf(maxFluoride.toString()))
                }
                if (minSaturatedFat != null) {
                    put("minSaturatedFat", listOf(minSaturatedFat.toString()))
                }
                if (maxSaturatedFat != null) {
                    put("maxSaturatedFat", listOf(maxSaturatedFat.toString()))
                }
                if (minVitaminA != null) {
                    put("minVitaminA", listOf(minVitaminA.toString()))
                }
                if (maxVitaminA != null) {
                    put("maxVitaminA", listOf(maxVitaminA.toString()))
                }
                if (minVitaminC != null) {
                    put("minVitaminC", listOf(minVitaminC.toString()))
                }
                if (maxVitaminC != null) {
                    put("maxVitaminC", listOf(maxVitaminC.toString()))
                }
                if (minVitaminD != null) {
                    put("minVitaminD", listOf(minVitaminD.toString()))
                }
                if (maxVitaminD != null) {
                    put("maxVitaminD", listOf(maxVitaminD.toString()))
                }
                if (minVitaminE != null) {
                    put("minVitaminE", listOf(minVitaminE.toString()))
                }
                if (maxVitaminE != null) {
                    put("maxVitaminE", listOf(maxVitaminE.toString()))
                }
                if (minVitaminK != null) {
                    put("minVitaminK", listOf(minVitaminK.toString()))
                }
                if (maxVitaminK != null) {
                    put("maxVitaminK", listOf(maxVitaminK.toString()))
                }
                if (minVitaminB1 != null) {
                    put("minVitaminB1", listOf(minVitaminB1.toString()))
                }
                if (maxVitaminB1 != null) {
                    put("maxVitaminB1", listOf(maxVitaminB1.toString()))
                }
                if (minVitaminB2 != null) {
                    put("minVitaminB2", listOf(minVitaminB2.toString()))
                }
                if (maxVitaminB2 != null) {
                    put("maxVitaminB2", listOf(maxVitaminB2.toString()))
                }
                if (minVitaminB5 != null) {
                    put("minVitaminB5", listOf(minVitaminB5.toString()))
                }
                if (maxVitaminB5 != null) {
                    put("maxVitaminB5", listOf(maxVitaminB5.toString()))
                }
                if (minVitaminB3 != null) {
                    put("minVitaminB3", listOf(minVitaminB3.toString()))
                }
                if (maxVitaminB3 != null) {
                    put("maxVitaminB3", listOf(maxVitaminB3.toString()))
                }
                if (minVitaminB6 != null) {
                    put("minVitaminB6", listOf(minVitaminB6.toString()))
                }
                if (maxVitaminB6 != null) {
                    put("maxVitaminB6", listOf(maxVitaminB6.toString()))
                }
                if (minVitaminB12 != null) {
                    put("minVitaminB12", listOf(minVitaminB12.toString()))
                }
                if (maxVitaminB12 != null) {
                    put("maxVitaminB12", listOf(maxVitaminB12.toString()))
                }
                if (minFiber != null) {
                    put("minFiber", listOf(minFiber.toString()))
                }
                if (maxFiber != null) {
                    put("maxFiber", listOf(maxFiber.toString()))
                }
                if (minFolate != null) {
                    put("minFolate", listOf(minFolate.toString()))
                }
                if (maxFolate != null) {
                    put("maxFolate", listOf(maxFolate.toString()))
                }
                if (minFolicAcid != null) {
                    put("minFolicAcid", listOf(minFolicAcid.toString()))
                }
                if (maxFolicAcid != null) {
                    put("maxFolicAcid", listOf(maxFolicAcid.toString()))
                }
                if (minIodine != null) {
                    put("minIodine", listOf(minIodine.toString()))
                }
                if (maxIodine != null) {
                    put("maxIodine", listOf(maxIodine.toString()))
                }
                if (minIron != null) {
                    put("minIron", listOf(minIron.toString()))
                }
                if (maxIron != null) {
                    put("maxIron", listOf(maxIron.toString()))
                }
                if (minMagnesium != null) {
                    put("minMagnesium", listOf(minMagnesium.toString()))
                }
                if (maxMagnesium != null) {
                    put("maxMagnesium", listOf(maxMagnesium.toString()))
                }
                if (minManganese != null) {
                    put("minManganese", listOf(minManganese.toString()))
                }
                if (maxManganese != null) {
                    put("maxManganese", listOf(maxManganese.toString()))
                }
                if (minPhosphorus != null) {
                    put("minPhosphorus", listOf(minPhosphorus.toString()))
                }
                if (maxPhosphorus != null) {
                    put("maxPhosphorus", listOf(maxPhosphorus.toString()))
                }
                if (minPotassium != null) {
                    put("minPotassium", listOf(minPotassium.toString()))
                }
                if (maxPotassium != null) {
                    put("maxPotassium", listOf(maxPotassium.toString()))
                }
                if (minSelenium != null) {
                    put("minSelenium", listOf(minSelenium.toString()))
                }
                if (maxSelenium != null) {
                    put("maxSelenium", listOf(maxSelenium.toString()))
                }
                if (minSodium != null) {
                    put("minSodium", listOf(minSodium.toString()))
                }
                if (maxSodium != null) {
                    put("maxSodium", listOf(maxSodium.toString()))
                }
                if (minSugar != null) {
                    put("minSugar", listOf(minSugar.toString()))
                }
                if (maxSugar != null) {
                    put("maxSugar", listOf(maxSugar.toString()))
                }
                if (minZinc != null) {
                    put("minZinc", listOf(minZinc.toString()))
                }
                if (maxZinc != null) {
                    put("maxZinc", listOf(maxZinc.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (random != null) {
                    put("random", listOf(random.toString()))
                }
                if (limitLicense != null) {
                    put("limitLicense", listOf(limitLicense.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/findByNutrients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The item&#39;s id.
     * @return SummarizeRecipe200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun summarizeRecipe(id: kotlin.Int) : SummarizeRecipe200Response {
        val localVarResponse = summarizeRecipeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SummarizeRecipe200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The item&#39;s id.
     * @return ApiResponse<SummarizeRecipe200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun summarizeRecipeWithHttpInfo(id: kotlin.Int) : ApiResponse<SummarizeRecipe200Response?> {
        val localVariableConfig = summarizeRecipeRequestConfig(id = id)

        return request<Unit, SummarizeRecipe200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation summarizeRecipe
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun summarizeRecipeRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/summary".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeVisualizeEquipment(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * enum for parameter accept
     */
     enum class AcceptVisualizeEquipment(val value: kotlin.String) {
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "text/html") textSlashHtml("text/html"),
         @Json(name = "media/_*") mediaSlashStar("media/_*")
     }

    /**
     * Equipment Widget
     * Visualize the equipment used to make a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeEquipment(contentType: ContentTypeVisualizeEquipment? = null, accept: AcceptVisualizeEquipment? = null) : kotlin.String {
        val localVarResponse = visualizeEquipmentWithHttpInfo(contentType = contentType, accept = accept)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Equipment Widget
     * Visualize the equipment used to make a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeEquipmentWithHttpInfo(contentType: ContentTypeVisualizeEquipment?, accept: AcceptVisualizeEquipment?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeEquipmentRequestConfig(contentType = contentType, accept = accept)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeEquipment
     *
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @return RequestConfig
     */
    fun visualizeEquipmentRequestConfig(contentType: ContentTypeVisualizeEquipment?, accept: AcceptVisualizeEquipment?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/visualizeEquipment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeVisualizePriceBreakdown(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * enum for parameter accept
     */
     enum class AcceptVisualizePriceBreakdown(val value: kotlin.String) {
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "text/html") textSlashHtml("text/html"),
         @Json(name = "media/_*") mediaSlashStar("media/_*")
     }

    /**
     * enum for parameter language
     */
     enum class LanguageVisualizePriceBreakdown(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * Price Breakdown Widget
     * Visualize the price breakdown of a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizePriceBreakdown(contentType: ContentTypeVisualizePriceBreakdown? = null, accept: AcceptVisualizePriceBreakdown? = null, language: LanguageVisualizePriceBreakdown? = null) : kotlin.String {
        val localVarResponse = visualizePriceBreakdownWithHttpInfo(contentType = contentType, accept = accept, language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Price Breakdown Widget
     * Visualize the price breakdown of a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizePriceBreakdownWithHttpInfo(contentType: ContentTypeVisualizePriceBreakdown?, accept: AcceptVisualizePriceBreakdown?, language: LanguageVisualizePriceBreakdown?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizePriceBreakdownRequestConfig(contentType = contentType, accept = accept, language = language)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizePriceBreakdown
     *
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return RequestConfig
     */
    fun visualizePriceBreakdownRequestConfig(contentType: ContentTypeVisualizePriceBreakdown?, accept: AcceptVisualizePriceBreakdown?, language: LanguageVisualizePriceBreakdown?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/visualizePriceEstimator",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Equipment by ID Widget
     * Visualize a recipe&#39;s equipment list.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipeEquipmentByID(id: kotlin.Int, defaultCss: kotlin.Boolean? = true) : kotlin.String {
        val localVarResponse = visualizeRecipeEquipmentByIDWithHttpInfo(id = id, defaultCss = defaultCss)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Equipment by ID Widget
     * Visualize a recipe&#39;s equipment list.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipeEquipmentByIDWithHttpInfo(id: kotlin.Int, defaultCss: kotlin.Boolean?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipeEquipmentByIDRequestConfig(id = id, defaultCss = defaultCss)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipeEquipmentByID
     *
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return RequestConfig
     */
    fun visualizeRecipeEquipmentByIDRequestConfig(id: kotlin.Int, defaultCss: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/equipmentWidget".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter measure
     */
     enum class MeasureVisualizeRecipeIngredientsByID(val value: kotlin.String) {
         @Json(name = "us") us("us"),
         @Json(name = "metric") metric("metric")
     }

    /**
     * Ingredients by ID Widget
     * Visualize a recipe&#39;s ingredient list.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipeIngredientsByID(id: kotlin.Int, defaultCss: kotlin.Boolean? = true, measure: MeasureVisualizeRecipeIngredientsByID? = null) : kotlin.String {
        val localVarResponse = visualizeRecipeIngredientsByIDWithHttpInfo(id = id, defaultCss = defaultCss, measure = measure)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Ingredients by ID Widget
     * Visualize a recipe&#39;s ingredient list.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipeIngredientsByIDWithHttpInfo(id: kotlin.Int, defaultCss: kotlin.Boolean?, measure: MeasureVisualizeRecipeIngredientsByID?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipeIngredientsByIDRequestConfig(id = id, defaultCss = defaultCss, measure = measure)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipeIngredientsByID
     *
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return RequestConfig
     */
    fun visualizeRecipeIngredientsByIDRequestConfig(id: kotlin.Int, defaultCss: kotlin.Boolean?, measure: MeasureVisualizeRecipeIngredientsByID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
                if (measure != null) {
                    put("measure", listOf(measure.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/ingredientWidget".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeVisualizeRecipeNutrition(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * enum for parameter accept
     */
     enum class AcceptVisualizeRecipeNutrition(val value: kotlin.String) {
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "text/html") textSlashHtml("text/html"),
         @Json(name = "media/_*") mediaSlashStar("media/_*")
     }

    /**
     * enum for parameter language
     */
     enum class LanguageVisualizeRecipeNutrition(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * Recipe Nutrition Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipeNutrition(contentType: ContentTypeVisualizeRecipeNutrition? = null, accept: AcceptVisualizeRecipeNutrition? = null, language: LanguageVisualizeRecipeNutrition? = null) : kotlin.String {
        val localVarResponse = visualizeRecipeNutritionWithHttpInfo(contentType = contentType, accept = accept, language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Nutrition Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipeNutritionWithHttpInfo(contentType: ContentTypeVisualizeRecipeNutrition?, accept: AcceptVisualizeRecipeNutrition?, language: LanguageVisualizeRecipeNutrition?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipeNutritionRequestConfig(contentType = contentType, accept = accept, language = language)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipeNutrition
     *
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return RequestConfig
     */
    fun visualizeRecipeNutritionRequestConfig(contentType: ContentTypeVisualizeRecipeNutrition?, accept: AcceptVisualizeRecipeNutrition?, language: LanguageVisualizeRecipeNutrition?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/visualizeNutrition",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter accept
     */
     enum class AcceptVisualizeRecipeNutritionByID(val value: kotlin.String) {
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "text/html") textSlashHtml("text/html"),
         @Json(name = "media/_*") mediaSlashStar("media/_*")
     }

    /**
     * Recipe Nutrition by ID Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipeNutritionByID(id: kotlin.Int, defaultCss: kotlin.Boolean? = true, accept: AcceptVisualizeRecipeNutritionByID? = null) : kotlin.String {
        val localVarResponse = visualizeRecipeNutritionByIDWithHttpInfo(id = id, defaultCss = defaultCss, accept = accept)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Nutrition by ID Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipeNutritionByIDWithHttpInfo(id: kotlin.Int, defaultCss: kotlin.Boolean?, accept: AcceptVisualizeRecipeNutritionByID?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipeNutritionByIDRequestConfig(id = id, defaultCss = defaultCss, accept = accept)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipeNutritionByID
     *
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return RequestConfig
     */
    fun visualizeRecipeNutritionByIDRequestConfig(id: kotlin.Int, defaultCss: kotlin.Boolean?, accept: AcceptVisualizeRecipeNutritionByID?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/nutritionWidget".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Price Breakdown by ID Widget
     * Visualize a recipe&#39;s price breakdown.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipePriceBreakdownByID(id: kotlin.Int, defaultCss: kotlin.Boolean? = true) : kotlin.String {
        val localVarResponse = visualizeRecipePriceBreakdownByIDWithHttpInfo(id = id, defaultCss = defaultCss)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Price Breakdown by ID Widget
     * Visualize a recipe&#39;s price breakdown.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipePriceBreakdownByIDWithHttpInfo(id: kotlin.Int, defaultCss: kotlin.Boolean?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipePriceBreakdownByIDRequestConfig(id = id, defaultCss = defaultCss)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipePriceBreakdownByID
     *
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return RequestConfig
     */
    fun visualizeRecipePriceBreakdownByIDRequestConfig(id: kotlin.Int, defaultCss: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/priceBreakdownWidget".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter language
     */
     enum class LanguageVisualizeRecipeTaste(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * enum for parameter contentType
     */
     enum class ContentTypeVisualizeRecipeTaste(val value: kotlin.String) {
         @Json(name = "application/x-www-form-urlencoded") applicationSlashXMinusWwwMinusFormMinusUrlencoded("application/x-www-form-urlencoded"),
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "multipart/form-data") multipartSlashFormMinusData("multipart/form-data")
     }

    /**
     * enum for parameter accept
     */
     enum class AcceptVisualizeRecipeTaste(val value: kotlin.String) {
         @Json(name = "application/json") applicationSlashJson("application/json"),
         @Json(name = "text/html") textSlashHtml("text/html"),
         @Json(name = "media/_*") mediaSlashStar("media/_*")
     }

    /**
     * Recipe Taste Widget
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipeTaste(language: LanguageVisualizeRecipeTaste? = null, contentType: ContentTypeVisualizeRecipeTaste? = null, accept: AcceptVisualizeRecipeTaste? = null, normalize: kotlin.Boolean? = null, rgb: kotlin.String? = null) : kotlin.String {
        val localVarResponse = visualizeRecipeTasteWithHttpInfo(language = language, contentType = contentType, accept = accept, normalize = normalize, rgb = rgb)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Taste Widget
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipeTasteWithHttpInfo(language: LanguageVisualizeRecipeTaste?, contentType: ContentTypeVisualizeRecipeTaste?, accept: AcceptVisualizeRecipeTaste?, normalize: kotlin.Boolean?, rgb: kotlin.String?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipeTasteRequestConfig(language = language, contentType = contentType, accept = accept, normalize = normalize, rgb = rgb)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipeTaste
     *
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return RequestConfig
     */
    fun visualizeRecipeTasteRequestConfig(language: LanguageVisualizeRecipeTaste?, contentType: ContentTypeVisualizeRecipeTaste?, accept: AcceptVisualizeRecipeTaste?, normalize: kotlin.Boolean?, rgb: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.value))
                }
                if (normalize != null) {
                    put("normalize", listOf(normalize.toString()))
                }
                if (rgb != null) {
                    put("rgb", listOf(rgb.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        contentType?.apply { localVariableHeaders["Content-Type"] = this.toString() }
        accept?.apply { localVariableHeaders["Accept"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/x-www-form-urlencoded"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/visualizeTaste",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recipe Taste by ID Widget
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id.
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeRecipeTasteByID(id: kotlin.Int, normalize: kotlin.Boolean? = true, rgb: kotlin.String? = null) : kotlin.String {
        val localVarResponse = visualizeRecipeTasteByIDWithHttpInfo(id = id, normalize = normalize, rgb = rgb)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recipe Taste by ID Widget
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id.
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeRecipeTasteByIDWithHttpInfo(id: kotlin.Int, normalize: kotlin.Boolean?, rgb: kotlin.String?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeRecipeTasteByIDRequestConfig(id = id, normalize = normalize, rgb = rgb)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeRecipeTasteByID
     *
     * @param id The item&#39;s id.
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return RequestConfig
     */
    fun visualizeRecipeTasteByIDRequestConfig(id: kotlin.Int, normalize: kotlin.Boolean?, rgb: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (normalize != null) {
                    put("normalize", listOf(normalize.toString()))
                }
                if (rgb != null) {
                    put("rgb", listOf(rgb.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/tasteWidget".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
