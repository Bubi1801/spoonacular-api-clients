{-
   spoonacular API
   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   The version of the OpenAPI document: 1.1
   Contact: mail@spoonacular.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.MealPlanning exposing
    ( addMealPlanTemplate
    , addToMealPlan
    , addToShoppingList
    , clearMealPlanDay
    , connectUser
    , deleteFromMealPlan
    , deleteFromShoppingList
    , deleteMealPlanTemplate
    , generateMealPlan
    , generateShoppingList
    , getMealPlanTemplate
    , getMealPlanTemplates
    , getMealPlanWeek
    , getShoppingList
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode

{-| Add a meal plan template for a user.
-}
addMealPlanTemplate : String -> String -> Api.Data.AddToMealPlanRequest -> Api.Request Api.Data.AddMealPlanTemplate200Response
addMealPlanTemplate username_path hash_query addToMealPlanRequest_body =
    Api.request
        "POST"
        "/mealplanner/{username}/templates"
        [ ( "username", identity username_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeAddToMealPlanRequest addToMealPlanRequest_body)))
        Api.Data.addMealPlanTemplate200ResponseDecoder


{-| Add an item to the user's meal plan.
-}
addToMealPlan : String -> String -> Api.Data.AddToMealPlanRequest -> Api.Request (Dict.Dict String Api.Data.Object)
addToMealPlan username_path hash_query addToMealPlanRequest_body =
    Api.request
        "POST"
        "/mealplanner/{username}/items"
        [ ( "username", identity username_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeAddToMealPlanRequest addToMealPlanRequest_body)))
        (Json.Decode.dict )


{-| Add an item to the current shopping list of a user.
-}
addToShoppingList : String -> String -> Api.Data.AddToMealPlanRequest -> Api.Request Api.Data.GenerateShoppingList200Response
addToShoppingList username_path hash_query addToMealPlanRequest_body =
    Api.request
        "POST"
        "/mealplanner/{username}/shopping-list/items"
        [ ( "username", identity username_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeAddToMealPlanRequest addToMealPlanRequest_body)))
        Api.Data.generateShoppingList200ResponseDecoder


{-| Delete all planned items from the user's meal plan for a specific day.
-}
clearMealPlanDay : String -> String -> String -> Api.Data.ClearMealPlanDayRequest -> Api.Request (Dict.Dict String Api.Data.Object)
clearMealPlanDay username_path date_path hash_query clearMealPlanDayRequest_body =
    Api.request
        "DELETE"
        "/mealplanner/{username}/day/{date}"
        [ ( "username", identity username_path ), ( "date", identity date_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeClearMealPlanDayRequest clearMealPlanDayRequest_body)))
        (Json.Decode.dict )


{-| In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.
-}
connectUser : Object -> Api.Request Api.Data.ConnectUser200Response
connectUser body_body =
    Api.request
        "POST"
        "/users/connect"
        []
        []
        []
        (Maybe.map Http.jsonBody (Just (encodeObject body_body)))
        Api.Data.connectUser200ResponseDecoder


{-| Delete an item from the user's meal plan.
-}
deleteFromMealPlan : String -> Float -> String -> Api.Data.DeleteFromMealPlanRequest -> Api.Request (Dict.Dict String Api.Data.Object)
deleteFromMealPlan username_path id_path hash_query deleteFromMealPlanRequest_body =
    Api.request
        "DELETE"
        "/mealplanner/{username}/items/{id}"
        [ ( "username", identity username_path ), ( "id", String.fromFloat id_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeDeleteFromMealPlanRequest deleteFromMealPlanRequest_body)))
        (Json.Decode.dict )


{-| Delete an item from the current shopping list of the user.
-}
deleteFromShoppingList : String -> Int -> String -> Api.Data.DeleteFromMealPlanRequest -> Api.Request (Dict.Dict String Api.Data.Object)
deleteFromShoppingList username_path id_path hash_query deleteFromMealPlanRequest_body =
    Api.request
        "DELETE"
        "/mealplanner/{username}/shopping-list/items/{id}"
        [ ( "username", identity username_path ), ( "id", String.fromInt id_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeDeleteFromMealPlanRequest deleteFromMealPlanRequest_body)))
        (Json.Decode.dict )


{-| Delete a meal plan template for a user.
-}
deleteMealPlanTemplate : String -> Int -> String -> Api.Data.DeleteFromMealPlanRequest -> Api.Request (Dict.Dict String Api.Data.Object)
deleteMealPlanTemplate username_path id_path hash_query deleteFromMealPlanRequest_body =
    Api.request
        "DELETE"
        "/mealplanner/{username}/templates/{id}"
        [ ( "username", identity username_path ), ( "id", String.fromInt id_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeDeleteFromMealPlanRequest deleteFromMealPlanRequest_body)))
        (Json.Decode.dict )


{-| Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
-}
generateMealPlan : Maybe String -> Maybe Float -> Maybe String -> Maybe String -> Api.Request Api.Data.GenerateMealPlan200Response
generateMealPlan timeFrame_query targetCalories_query diet_query exclude_query =
    Api.request
        "GET"
        "/mealplanner/generate"
        []
        [ ( "timeFrame", Maybe.map identity timeFrame_query ), ( "targetCalories", Maybe.map String.fromFloat targetCalories_query ), ( "diet", Maybe.map identity diet_query ), ( "exclude", Maybe.map identity exclude_query ) ]
        []
        Nothing
        Api.Data.generateMealPlan200ResponseDecoder


{-| Generate the shopping list for a user from the meal planner in a given time frame.
-}
generateShoppingList : String -> String -> String -> String -> Api.Data.GenerateShoppingListRequest -> Api.Request Api.Data.GenerateShoppingList200Response
generateShoppingList username_path startDate_path endDate_path hash_query generateShoppingListRequest_body =
    Api.request
        "POST"
        "/mealplanner/{username}/shopping-list/{start-date}/{end-date}"
        [ ( "username", identity username_path ), ( "startDate", identity startDate_path ), ( "endDate", identity endDate_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeGenerateShoppingListRequest generateShoppingListRequest_body)))
        Api.Data.generateShoppingList200ResponseDecoder


{-| Get information about a meal plan template.
-}
getMealPlanTemplate : String -> Int -> String -> Api.Request Api.Data.GetMealPlanTemplate200Response
getMealPlanTemplate username_path id_path hash_query =
    Api.request
        "GET"
        "/mealplanner/{username}/templates/{id}"
        [ ( "username", identity username_path ), ( "id", String.fromInt id_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        Nothing
        Api.Data.getMealPlanTemplate200ResponseDecoder


{-| Get meal plan templates from user or public ones.
-}
getMealPlanTemplates : String -> String -> Api.Request Api.Data.GetMealPlanTemplates200Response
getMealPlanTemplates username_path hash_query =
    Api.request
        "GET"
        "/mealplanner/{username}/templates"
        [ ( "username", identity username_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        Nothing
        Api.Data.getMealPlanTemplates200ResponseDecoder


{-| Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.
-}
getMealPlanWeek : String -> String -> String -> Api.Request Api.Data.GetMealPlanWeek200Response
getMealPlanWeek username_path startDate_path hash_query =
    Api.request
        "GET"
        "/mealplanner/{username}/week/{start-date}"
        [ ( "username", identity username_path ), ( "startDate", identity startDate_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        Nothing
        Api.Data.getMealPlanWeek200ResponseDecoder


{-| Get the current shopping list for the given user.
-}
getShoppingList : String -> String -> Api.Request Api.Data.GetShoppingList200Response
getShoppingList username_path hash_query =
    Api.request
        "GET"
        "/mealplanner/{username}/shopping-list"
        [ ( "username", identity username_path ) ]
        [ ( "hash", Just <| identity hash_query ) ]
        []
        Nothing
        Api.Data.getShoppingList200ResponseDecoder

