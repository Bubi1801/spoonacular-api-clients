{-
   spoonacular API
   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   The version of the OpenAPI document: 1.1
   Contact: mail@spoonacular.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Recipes exposing
    ( analyzeARecipeSearchQuery
    , analyzeRecipeInstructions, ContentType(..), contentTypeVariants
    , autocompleteRecipeSearch
    , classifyCuisine, ContentType(..), contentTypeVariants
    , computeGlycemicLoad, Language(..), languageVariants
    , convertAmounts
    , createRecipeCard, ContentType(..), contentTypeVariants
    , equipmentByIDImage
    , extractRecipeFromWebsite
    , getAnalyzedRecipeInstructions
    , getRandomRecipes
    , getRecipeEquipmentByID
    , getRecipeInformation
    , getRecipeInformationBulk
    , getRecipeIngredientsByID
    , getRecipeNutritionWidgetByID
    , getRecipePriceBreakdownByID
    , getRecipeTasteByID
    , getSimilarRecipes
    , guessNutritionByDishName
    , ingredientsByIDImage, Measure(..), measureVariants
    , parseIngredients, Language(..), languageVariants, ContentType(..), contentTypeVariants
    , priceBreakdownByIDImage
    , quickAnswer
    , recipeNutritionByIDImage
    , recipeNutritionLabelImage
    , recipeNutritionLabelWidget
    , recipeTasteByIDImage
    , searchRecipes
    , searchRecipesByIngredients
    , searchRecipesByNutrients
    , summarizeRecipe
    , visualizeEquipment, ContentType(..), contentTypeVariants, Accept(..), acceptVariants
    , visualizePriceBreakdown, Language(..), languageVariants, ContentType(..), contentTypeVariants, Accept(..), acceptVariants
    , visualizeRecipeEquipmentByID
    , visualizeRecipeIngredientsByID, Measure(..), measureVariants
    , visualizeRecipeNutrition, Language(..), languageVariants, ContentType(..), contentTypeVariants, Accept(..), acceptVariants
    , visualizeRecipeNutritionByID, Accept(..), acceptVariants
    , visualizeRecipePriceBreakdownByID
    , visualizeRecipeTaste, Language(..), languageVariants, ContentType(..), contentTypeVariants, Accept(..), acceptVariants
    , visualizeRecipeTasteByID
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode


type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type Language
    = LanguageEn
    | LanguageDe


languageVariants : List Language
languageVariants =
    [ LanguageEn
    , LanguageDe
    ]


stringFromLanguage : Language -> String
stringFromLanguage model =
    case model of
        LanguageEn ->
            "en"

        LanguageDe ->
            "de"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type Measure
    = MeasureUs
    | MeasureMetric


measureVariants : List Measure
measureVariants =
    [ MeasureUs
    , MeasureMetric
    ]


stringFromMeasure : Measure -> String
stringFromMeasure model =
    case model of
        MeasureUs ->
            "us"

        MeasureMetric ->
            "metric"




type Language
    = LanguageEn
    | LanguageDe


languageVariants : List Language
languageVariants =
    [ LanguageEn
    , LanguageDe
    ]


stringFromLanguage : Language -> String
stringFromLanguage model =
    case model of
        LanguageEn ->
            "en"

        LanguageDe ->
            "de"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type Accept
    = AcceptApplicationJson
    | AcceptTextHtml
    | AcceptMedia*


acceptVariants : List Accept
acceptVariants =
    [ AcceptApplicationJson
    , AcceptTextHtml
    , AcceptMedia*
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptApplicationJson ->
            "application/json"

        AcceptTextHtml ->
            "text/html"

        AcceptMedia* ->
            "media/_*"




type Language
    = LanguageEn
    | LanguageDe


languageVariants : List Language
languageVariants =
    [ LanguageEn
    , LanguageDe
    ]


stringFromLanguage : Language -> String
stringFromLanguage model =
    case model of
        LanguageEn ->
            "en"

        LanguageDe ->
            "de"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type Accept
    = AcceptApplicationJson
    | AcceptTextHtml
    | AcceptMedia*


acceptVariants : List Accept
acceptVariants =
    [ AcceptApplicationJson
    , AcceptTextHtml
    , AcceptMedia*
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptApplicationJson ->
            "application/json"

        AcceptTextHtml ->
            "text/html"

        AcceptMedia* ->
            "media/_*"




type Measure
    = MeasureUs
    | MeasureMetric


measureVariants : List Measure
measureVariants =
    [ MeasureUs
    , MeasureMetric
    ]


stringFromMeasure : Measure -> String
stringFromMeasure model =
    case model of
        MeasureUs ->
            "us"

        MeasureMetric ->
            "metric"




type Language
    = LanguageEn
    | LanguageDe


languageVariants : List Language
languageVariants =
    [ LanguageEn
    , LanguageDe
    ]


stringFromLanguage : Language -> String
stringFromLanguage model =
    case model of
        LanguageEn ->
            "en"

        LanguageDe ->
            "de"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type Accept
    = AcceptApplicationJson
    | AcceptTextHtml
    | AcceptMedia*


acceptVariants : List Accept
acceptVariants =
    [ AcceptApplicationJson
    , AcceptTextHtml
    , AcceptMedia*
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptApplicationJson ->
            "application/json"

        AcceptTextHtml ->
            "text/html"

        AcceptMedia* ->
            "media/_*"




type Accept
    = AcceptApplicationJson
    | AcceptTextHtml
    | AcceptMedia*


acceptVariants : List Accept
acceptVariants =
    [ AcceptApplicationJson
    , AcceptTextHtml
    , AcceptMedia*
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptApplicationJson ->
            "application/json"

        AcceptTextHtml ->
            "text/html"

        AcceptMedia* ->
            "media/_*"




type Language
    = LanguageEn
    | LanguageDe


languageVariants : List Language
languageVariants =
    [ LanguageEn
    , LanguageDe
    ]


stringFromLanguage : Language -> String
stringFromLanguage model =
    case model of
        LanguageEn ->
            "en"

        LanguageDe ->
            "de"




type ContentType
    = ContentTypeApplicationXWwwFormUrlencoded
    | ContentTypeApplicationJson
    | ContentTypeMultipartFormData


contentTypeVariants : List ContentType
contentTypeVariants =
    [ ContentTypeApplicationXWwwFormUrlencoded
    , ContentTypeApplicationJson
    , ContentTypeMultipartFormData
    ]


stringFromContentType : ContentType -> String
stringFromContentType model =
    case model of
        ContentTypeApplicationXWwwFormUrlencoded ->
            "application/x-www-form-urlencoded"

        ContentTypeApplicationJson ->
            "application/json"

        ContentTypeMultipartFormData ->
            "multipart/form-data"




type Accept
    = AcceptApplicationJson
    | AcceptTextHtml
    | AcceptMedia*


acceptVariants : List Accept
acceptVariants =
    [ AcceptApplicationJson
    , AcceptTextHtml
    , AcceptMedia*
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptApplicationJson ->
            "application/json"

        AcceptTextHtml ->
            "text/html"

        AcceptMedia* ->
            "media/_*"



{-| Parse a recipe search query to find out its intention.
-}
analyzeARecipeSearchQuery : String -> Api.Request Api.Data.AnalyzeARecipeSearchQuery200Response
analyzeARecipeSearchQuery q_query =
    Api.request
        "GET"
        "/recipes/queries/analyze"
        []
        [ ( "q", Just <| identity q_query ) ]
        []
        Nothing
        Api.Data.analyzeARecipeSearchQuery200ResponseDecoder


{-| This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
-}
analyzeRecipeInstructions : Maybe ContentType -> Api.Request Api.Data.AnalyzeRecipeInstructions200Response
analyzeRecipeInstructions contentType_header =
    Api.request
        "POST"
        "/recipes/analyzeInstructions"
        []
        []
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ) ]
        Nothing
        Api.Data.analyzeRecipeInstructions200ResponseDecoder


{-| Autocomplete a partial input to suggest possible recipe names.
-}
autocompleteRecipeSearch : Maybe String -> Maybe Int -> Api.Request (List Api.Data.AutocompleteRecipeSearch200ResponseInner)
autocompleteRecipeSearch query_query number_query =
    Api.request
        "GET"
        "/recipes/autocomplete"
        []
        [ ( "query", Maybe.map identity query_query ), ( "number", Maybe.map String.fromInt number_query ) ]
        []
        Nothing
        (Json.Decode.list Api.Data.autocompleteRecipeSearch200ResponseInnerDecoder)


{-| Classify the recipe's cuisine.
-}
classifyCuisine : Maybe ContentType -> Api.Request Api.Data.ClassifyCuisine200Response
classifyCuisine contentType_header =
    Api.request
        "POST"
        "/recipes/cuisine"
        []
        []
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ) ]
        Nothing
        Api.Data.classifyCuisine200ResponseDecoder


{-| Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
-}
computeGlycemicLoad : Maybe Language -> Api.Data.ComputeGlycemicLoadRequest -> Api.Request Api.Data.ComputeGlycemicLoad200Response
computeGlycemicLoad language_query computeGlycemicLoadRequest_body =
    Api.request
        "POST"
        "/food/ingredients/glycemicLoad"
        []
        [ ( "language", Maybe.map stringFromLanguage language_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeComputeGlycemicLoadRequest computeGlycemicLoadRequest_body)))
        Api.Data.computeGlycemicLoad200ResponseDecoder


{-| Convert amounts like \"2 cups of flour to grams\".
-}
convertAmounts : String -> Float -> String -> String -> Api.Request Api.Data.ConvertAmounts200Response
convertAmounts ingredientName_query sourceAmount_query sourceUnit_query targetUnit_query =
    Api.request
        "GET"
        "/recipes/convert"
        []
        [ ( "ingredientName", Just <| identity ingredientName_query ), ( "sourceAmount", Just <| String.fromFloat sourceAmount_query ), ( "sourceUnit", Just <| identity sourceUnit_query ), ( "targetUnit", Just <| identity targetUnit_query ) ]
        []
        Nothing
        Api.Data.convertAmounts200ResponseDecoder


{-| Generate a recipe card for a recipe.
-}
createRecipeCard : Maybe ContentType -> Api.Request Api.Data.CreateRecipeCard200Response
createRecipeCard contentType_header =
    Api.request
        "POST"
        "/recipes/visualizeRecipe"
        []
        []
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ) ]
        Nothing
        Api.Data.createRecipeCard200ResponseDecoder


{-| Visualize a recipe's equipment list as an image.
-}
equipmentByIDImage : Float -> Api.Request (Dict.Dict String Api.Data.Object)
equipmentByIDImage id_path =
    Api.request
        "GET"
        "/recipes/{id}/equipmentWidget.png"
        [ ( "id", String.fromFloat id_path ) ]
        []
        []
        Nothing
        (Json.Decode.dict )


{-| This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
-}
extractRecipeFromWebsite : String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Api.Request Api.Data.GetRecipeInformation200Response
extractRecipeFromWebsite url_query forceExtraction_query analyze_query includeNutrition_query includeTaste_query =
    Api.request
        "GET"
        "/recipes/extract"
        []
        [ ( "url", Just <| identity url_query ), ( "forceExtraction", Maybe.map (\val -> if val then "true" else "false") forceExtraction_query ), ( "analyze", Maybe.map (\val -> if val then "true" else "false") analyze_query ), ( "includeNutrition", Maybe.map (\val -> if val then "true" else "false") includeNutrition_query ), ( "includeTaste", Maybe.map (\val -> if val then "true" else "false") includeTaste_query ) ]
        []
        Nothing
        Api.Data.getRecipeInformation200ResponseDecoder


{-| Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
-}
getAnalyzedRecipeInstructions : Int -> Maybe Bool -> Api.Request Api.Data.GetAnalyzedRecipeInstructions200Response
getAnalyzedRecipeInstructions id_path stepBreakdown_query =
    Api.request
        "GET"
        "/recipes/{id}/analyzedInstructions"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "stepBreakdown", Maybe.map (\val -> if val then "true" else "false") stepBreakdown_query ) ]
        []
        Nothing
        Api.Data.getAnalyzedRecipeInstructions200ResponseDecoder


{-| Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
-}
getRandomRecipes : Maybe Bool -> Maybe String -> Maybe Int -> Api.Request Api.Data.GetRandomRecipes200Response
getRandomRecipes limitLicense_query tags_query number_query =
    Api.request
        "GET"
        "/recipes/random"
        []
        [ ( "limitLicense", Maybe.map (\val -> if val then "true" else "false") limitLicense_query ), ( "tags", Maybe.map identity tags_query ), ( "number", Maybe.map String.fromInt number_query ) ]
        []
        Nothing
        Api.Data.getRandomRecipes200ResponseDecoder


{-| Get a recipe's equipment list.
-}
getRecipeEquipmentByID : Int -> Api.Request Api.Data.GetRecipeEquipmentByID200Response
getRecipeEquipmentByID id_path =
    Api.request
        "GET"
        "/recipes/{id}/equipmentWidget.json"
        [ ( "id", String.fromInt id_path ) ]
        []
        []
        Nothing
        Api.Data.getRecipeEquipmentByID200ResponseDecoder


{-| Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
-}
getRecipeInformation : Int -> Maybe Bool -> Api.Request Api.Data.GetRecipeInformation200Response
getRecipeInformation id_path includeNutrition_query =
    Api.request
        "GET"
        "/recipes/{id}/information"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "includeNutrition", Maybe.map (\val -> if val then "true" else "false") includeNutrition_query ) ]
        []
        Nothing
        Api.Data.getRecipeInformation200ResponseDecoder


{-| Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
-}
getRecipeInformationBulk : String -> Maybe Bool -> Api.Request (List Api.Data.GetRecipeInformationBulk200ResponseInner)
getRecipeInformationBulk ids_query includeNutrition_query =
    Api.request
        "GET"
        "/recipes/informationBulk"
        []
        [ ( "ids", Just <| identity ids_query ), ( "includeNutrition", Maybe.map (\val -> if val then "true" else "false") includeNutrition_query ) ]
        []
        Nothing
        (Json.Decode.list Api.Data.getRecipeInformationBulk200ResponseInnerDecoder)


{-| Get a recipe's ingredient list.
-}
getRecipeIngredientsByID : Int -> Api.Request Api.Data.GetRecipeIngredientsByID200Response
getRecipeIngredientsByID id_path =
    Api.request
        "GET"
        "/recipes/{id}/ingredientWidget.json"
        [ ( "id", String.fromInt id_path ) ]
        []
        []
        Nothing
        Api.Data.getRecipeIngredientsByID200ResponseDecoder


{-| Get a recipe's nutrition data.
-}
getRecipeNutritionWidgetByID : Int -> Api.Request Api.Data.GetRecipeNutritionWidgetByID200Response
getRecipeNutritionWidgetByID id_path =
    Api.request
        "GET"
        "/recipes/{id}/nutritionWidget.json"
        [ ( "id", String.fromInt id_path ) ]
        []
        []
        Nothing
        Api.Data.getRecipeNutritionWidgetByID200ResponseDecoder


{-| Get a recipe's price breakdown data.
-}
getRecipePriceBreakdownByID : Int -> Api.Request Api.Data.GetRecipePriceBreakdownByID200Response
getRecipePriceBreakdownByID id_path =
    Api.request
        "GET"
        "/recipes/{id}/priceBreakdownWidget.json"
        [ ( "id", String.fromInt id_path ) ]
        []
        []
        Nothing
        Api.Data.getRecipePriceBreakdownByID200ResponseDecoder


{-| Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-}
getRecipeTasteByID : Int -> Maybe Bool -> Api.Request Api.Data.GetRecipeTasteByID200Response
getRecipeTasteByID id_path normalize_query =
    Api.request
        "GET"
        "/recipes/{id}/tasteWidget.json"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "normalize", Maybe.map (\val -> if val then "true" else "false") normalize_query ) ]
        []
        Nothing
        Api.Data.getRecipeTasteByID200ResponseDecoder


{-| Find recipes which are similar to the given one.
-}
getSimilarRecipes : Int -> Maybe Int -> Maybe Bool -> Api.Request (List Api.Data.GetSimilarRecipes200ResponseInner)
getSimilarRecipes id_path number_query limitLicense_query =
    Api.request
        "GET"
        "/recipes/{id}/similar"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "number", Maybe.map String.fromInt number_query ), ( "limitLicense", Maybe.map (\val -> if val then "true" else "false") limitLicense_query ) ]
        []
        Nothing
        (Json.Decode.list Api.Data.getSimilarRecipes200ResponseInnerDecoder)


{-| Estimate the macronutrients of a dish based on its title.
-}
guessNutritionByDishName : String -> Api.Request Api.Data.GuessNutritionByDishName200Response
guessNutritionByDishName title_query =
    Api.request
        "GET"
        "/recipes/guessNutrition"
        []
        [ ( "title", Just <| identity title_query ) ]
        []
        Nothing
        Api.Data.guessNutritionByDishName200ResponseDecoder


{-| Visualize a recipe's ingredient list.
-}
ingredientsByIDImage : Float -> Maybe Measure -> Api.Request (Dict.Dict String Api.Data.Object)
ingredientsByIDImage id_path measure_query =
    Api.request
        "GET"
        "/recipes/{id}/ingredientWidget.png"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "measure", Maybe.map stringFromMeasure measure_query ) ]
        []
        Nothing
        (Json.Decode.dict )


{-| Extract an ingredient from plain text.
-}
parseIngredients : Maybe Language -> Maybe ContentType -> Api.Request (List Api.Data.ParseIngredients200ResponseInner)
parseIngredients language_query contentType_header =
    Api.request
        "POST"
        "/recipes/parseIngredients"
        []
        [ ( "language", Maybe.map stringFromLanguage language_query ) ]
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ) ]
        Nothing
        (Json.Decode.list Api.Data.parseIngredients200ResponseInnerDecoder)


{-| Visualize a recipe's price breakdown.
-}
priceBreakdownByIDImage : Float -> Api.Request (Dict.Dict String Api.Data.Object)
priceBreakdownByIDImage id_path =
    Api.request
        "GET"
        "/recipes/{id}/priceBreakdownWidget.png"
        [ ( "id", String.fromFloat id_path ) ]
        []
        []
        Nothing
        (Json.Decode.dict )


{-| Answer a nutrition related natural language question.
-}
quickAnswer : String -> Api.Request Api.Data.QuickAnswer200Response
quickAnswer q_query =
    Api.request
        "GET"
        "/recipes/quickAnswer"
        []
        [ ( "q", Just <| identity q_query ) ]
        []
        Nothing
        Api.Data.quickAnswer200ResponseDecoder


{-| Visualize a recipe's nutritional information as an image.
-}
recipeNutritionByIDImage : Float -> Api.Request (Dict.Dict String Api.Data.Object)
recipeNutritionByIDImage id_path =
    Api.request
        "GET"
        "/recipes/{id}/nutritionWidget.png"
        [ ( "id", String.fromFloat id_path ) ]
        []
        []
        Nothing
        (Json.Decode.dict )


{-| Get a recipe's nutrition label as an image.
-}
recipeNutritionLabelImage : Float -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Api.Request (Dict.Dict String Api.Data.Object)
recipeNutritionLabelImage id_path showOptionalNutrients_query showZeroValues_query showIngredients_query =
    Api.request
        "GET"
        "/recipes/{id}/nutritionLabel.png"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "showOptionalNutrients", Maybe.map (\val -> if val then "true" else "false") showOptionalNutrients_query ), ( "showZeroValues", Maybe.map (\val -> if val then "true" else "false") showZeroValues_query ), ( "showIngredients", Maybe.map (\val -> if val then "true" else "false") showIngredients_query ) ]
        []
        Nothing
        (Json.Decode.dict )


{-| Get a recipe's nutrition label as an HTML widget.
-}
recipeNutritionLabelWidget : Float -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Api.Request String
recipeNutritionLabelWidget id_path defaultCss_query showOptionalNutrients_query showZeroValues_query showIngredients_query =
    Api.request
        "GET"
        "/recipes/{id}/nutritionLabel"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ), ( "showOptionalNutrients", Maybe.map (\val -> if val then "true" else "false") showOptionalNutrients_query ), ( "showZeroValues", Maybe.map (\val -> if val then "true" else "false") showZeroValues_query ), ( "showIngredients", Maybe.map (\val -> if val then "true" else "false") showIngredients_query ) ]
        []
        Nothing
        Json.Decode.string


{-| Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-}
recipeTasteByIDImage : Float -> Maybe Bool -> Maybe String -> Api.Request (Dict.Dict String Api.Data.Object)
recipeTasteByIDImage id_path normalize_query rgb_query =
    Api.request
        "GET"
        "/recipes/{id}/tasteWidget.png"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "normalize", Maybe.map (\val -> if val then "true" else "false") normalize_query ), ( "rgb", Maybe.map identity rgb_query ) ]
        []
        Nothing
        (Json.Decode.dict )


{-| Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
-}
searchRecipes : Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Float -> Maybe String -> Maybe Float -> Maybe Bool -> Maybe String -> Maybe String -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Int -> Maybe Int -> Maybe Bool -> Api.Request Api.Data.SearchRecipes200Response
searchRecipes query_query cuisine_query excludeCuisine_query diet_query intolerances_query equipment_query includeIngredients_query excludeIngredients_query type__query instructionsRequired_query fillIngredients_query addRecipeInformation_query addRecipeNutrition_query author_query tags_query recipeBoxId_query titleMatch_query maxReadyTime_query ignorePantry_query sort_query sortDirection_query minCarbs_query maxCarbs_query minProtein_query maxProtein_query minCalories_query maxCalories_query minFat_query maxFat_query minAlcohol_query maxAlcohol_query minCaffeine_query maxCaffeine_query minCopper_query maxCopper_query minCalcium_query maxCalcium_query minCholine_query maxCholine_query minCholesterol_query maxCholesterol_query minFluoride_query maxFluoride_query minSaturatedFat_query maxSaturatedFat_query minVitaminA_query maxVitaminA_query minVitaminC_query maxVitaminC_query minVitaminD_query maxVitaminD_query minVitaminE_query maxVitaminE_query minVitaminK_query maxVitaminK_query minVitaminB1_query maxVitaminB1_query minVitaminB2_query maxVitaminB2_query minVitaminB5_query maxVitaminB5_query minVitaminB3_query maxVitaminB3_query minVitaminB6_query maxVitaminB6_query minVitaminB12_query maxVitaminB12_query minFiber_query maxFiber_query minFolate_query maxFolate_query minFolicAcid_query maxFolicAcid_query minIodine_query maxIodine_query minIron_query maxIron_query minMagnesium_query maxMagnesium_query minManganese_query maxManganese_query minPhosphorus_query maxPhosphorus_query minPotassium_query maxPotassium_query minSelenium_query maxSelenium_query minSodium_query maxSodium_query minSugar_query maxSugar_query minZinc_query maxZinc_query offset_query number_query limitLicense_query =
    Api.request
        "GET"
        "/recipes/complexSearch"
        []
        [ ( "query", Maybe.map identity query_query ), ( "cuisine", Maybe.map identity cuisine_query ), ( "excludeCuisine", Maybe.map identity excludeCuisine_query ), ( "diet", Maybe.map identity diet_query ), ( "intolerances", Maybe.map identity intolerances_query ), ( "equipment", Maybe.map identity equipment_query ), ( "includeIngredients", Maybe.map identity includeIngredients_query ), ( "excludeIngredients", Maybe.map identity excludeIngredients_query ), ( "type", Maybe.map identity type__query ), ( "instructionsRequired", Maybe.map (\val -> if val then "true" else "false") instructionsRequired_query ), ( "fillIngredients", Maybe.map (\val -> if val then "true" else "false") fillIngredients_query ), ( "addRecipeInformation", Maybe.map (\val -> if val then "true" else "false") addRecipeInformation_query ), ( "addRecipeNutrition", Maybe.map (\val -> if val then "true" else "false") addRecipeNutrition_query ), ( "author", Maybe.map identity author_query ), ( "tags", Maybe.map identity tags_query ), ( "recipeBoxId", Maybe.map String.fromFloat recipeBoxId_query ), ( "titleMatch", Maybe.map identity titleMatch_query ), ( "maxReadyTime", Maybe.map String.fromFloat maxReadyTime_query ), ( "ignorePantry", Maybe.map (\val -> if val then "true" else "false") ignorePantry_query ), ( "sort", Maybe.map identity sort_query ), ( "sortDirection", Maybe.map identity sortDirection_query ), ( "minCarbs", Maybe.map String.fromFloat minCarbs_query ), ( "maxCarbs", Maybe.map String.fromFloat maxCarbs_query ), ( "minProtein", Maybe.map String.fromFloat minProtein_query ), ( "maxProtein", Maybe.map String.fromFloat maxProtein_query ), ( "minCalories", Maybe.map String.fromFloat minCalories_query ), ( "maxCalories", Maybe.map String.fromFloat maxCalories_query ), ( "minFat", Maybe.map String.fromFloat minFat_query ), ( "maxFat", Maybe.map String.fromFloat maxFat_query ), ( "minAlcohol", Maybe.map String.fromFloat minAlcohol_query ), ( "maxAlcohol", Maybe.map String.fromFloat maxAlcohol_query ), ( "minCaffeine", Maybe.map String.fromFloat minCaffeine_query ), ( "maxCaffeine", Maybe.map String.fromFloat maxCaffeine_query ), ( "minCopper", Maybe.map String.fromFloat minCopper_query ), ( "maxCopper", Maybe.map String.fromFloat maxCopper_query ), ( "minCalcium", Maybe.map String.fromFloat minCalcium_query ), ( "maxCalcium", Maybe.map String.fromFloat maxCalcium_query ), ( "minCholine", Maybe.map String.fromFloat minCholine_query ), ( "maxCholine", Maybe.map String.fromFloat maxCholine_query ), ( "minCholesterol", Maybe.map String.fromFloat minCholesterol_query ), ( "maxCholesterol", Maybe.map String.fromFloat maxCholesterol_query ), ( "minFluoride", Maybe.map String.fromFloat minFluoride_query ), ( "maxFluoride", Maybe.map String.fromFloat maxFluoride_query ), ( "minSaturatedFat", Maybe.map String.fromFloat minSaturatedFat_query ), ( "maxSaturatedFat", Maybe.map String.fromFloat maxSaturatedFat_query ), ( "minVitaminA", Maybe.map String.fromFloat minVitaminA_query ), ( "maxVitaminA", Maybe.map String.fromFloat maxVitaminA_query ), ( "minVitaminC", Maybe.map String.fromFloat minVitaminC_query ), ( "maxVitaminC", Maybe.map String.fromFloat maxVitaminC_query ), ( "minVitaminD", Maybe.map String.fromFloat minVitaminD_query ), ( "maxVitaminD", Maybe.map String.fromFloat maxVitaminD_query ), ( "minVitaminE", Maybe.map String.fromFloat minVitaminE_query ), ( "maxVitaminE", Maybe.map String.fromFloat maxVitaminE_query ), ( "minVitaminK", Maybe.map String.fromFloat minVitaminK_query ), ( "maxVitaminK", Maybe.map String.fromFloat maxVitaminK_query ), ( "minVitaminB1", Maybe.map String.fromFloat minVitaminB1_query ), ( "maxVitaminB1", Maybe.map String.fromFloat maxVitaminB1_query ), ( "minVitaminB2", Maybe.map String.fromFloat minVitaminB2_query ), ( "maxVitaminB2", Maybe.map String.fromFloat maxVitaminB2_query ), ( "minVitaminB5", Maybe.map String.fromFloat minVitaminB5_query ), ( "maxVitaminB5", Maybe.map String.fromFloat maxVitaminB5_query ), ( "minVitaminB3", Maybe.map String.fromFloat minVitaminB3_query ), ( "maxVitaminB3", Maybe.map String.fromFloat maxVitaminB3_query ), ( "minVitaminB6", Maybe.map String.fromFloat minVitaminB6_query ), ( "maxVitaminB6", Maybe.map String.fromFloat maxVitaminB6_query ), ( "minVitaminB12", Maybe.map String.fromFloat minVitaminB12_query ), ( "maxVitaminB12", Maybe.map String.fromFloat maxVitaminB12_query ), ( "minFiber", Maybe.map String.fromFloat minFiber_query ), ( "maxFiber", Maybe.map String.fromFloat maxFiber_query ), ( "minFolate", Maybe.map String.fromFloat minFolate_query ), ( "maxFolate", Maybe.map String.fromFloat maxFolate_query ), ( "minFolicAcid", Maybe.map String.fromFloat minFolicAcid_query ), ( "maxFolicAcid", Maybe.map String.fromFloat maxFolicAcid_query ), ( "minIodine", Maybe.map String.fromFloat minIodine_query ), ( "maxIodine", Maybe.map String.fromFloat maxIodine_query ), ( "minIron", Maybe.map String.fromFloat minIron_query ), ( "maxIron", Maybe.map String.fromFloat maxIron_query ), ( "minMagnesium", Maybe.map String.fromFloat minMagnesium_query ), ( "maxMagnesium", Maybe.map String.fromFloat maxMagnesium_query ), ( "minManganese", Maybe.map String.fromFloat minManganese_query ), ( "maxManganese", Maybe.map String.fromFloat maxManganese_query ), ( "minPhosphorus", Maybe.map String.fromFloat minPhosphorus_query ), ( "maxPhosphorus", Maybe.map String.fromFloat maxPhosphorus_query ), ( "minPotassium", Maybe.map String.fromFloat minPotassium_query ), ( "maxPotassium", Maybe.map String.fromFloat maxPotassium_query ), ( "minSelenium", Maybe.map String.fromFloat minSelenium_query ), ( "maxSelenium", Maybe.map String.fromFloat maxSelenium_query ), ( "minSodium", Maybe.map String.fromFloat minSodium_query ), ( "maxSodium", Maybe.map String.fromFloat maxSodium_query ), ( "minSugar", Maybe.map String.fromFloat minSugar_query ), ( "maxSugar", Maybe.map String.fromFloat maxSugar_query ), ( "minZinc", Maybe.map String.fromFloat minZinc_query ), ( "maxZinc", Maybe.map String.fromFloat maxZinc_query ), ( "offset", Maybe.map String.fromInt offset_query ), ( "number", Maybe.map String.fromInt number_query ), ( "limitLicense", Maybe.map (\val -> if val then "true" else "false") limitLicense_query ) ]
        []
        Nothing
        Api.Data.searchRecipes200ResponseDecoder


{-|  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
-}
searchRecipesByIngredients : Maybe String -> Maybe Int -> Maybe Bool -> Maybe Float -> Maybe Bool -> Api.Request (List Api.Data.SearchRecipesByIngredients200ResponseInner)
searchRecipesByIngredients ingredients_query number_query limitLicense_query ranking_query ignorePantry_query =
    Api.request
        "GET"
        "/recipes/findByIngredients"
        []
        [ ( "ingredients", Maybe.map identity ingredients_query ), ( "number", Maybe.map String.fromInt number_query ), ( "limitLicense", Maybe.map (\val -> if val then "true" else "false") limitLicense_query ), ( "ranking", Maybe.map String.fromFloat ranking_query ), ( "ignorePantry", Maybe.map (\val -> if val then "true" else "false") ignorePantry_query ) ]
        []
        Nothing
        (Json.Decode.list Api.Data.searchRecipesByIngredients200ResponseInnerDecoder)


{-| Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
-}
searchRecipesByNutrients : Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Bool -> Api.Request (List Api.Data.SearchRecipesByNutrients200ResponseInner)
searchRecipesByNutrients minCarbs_query maxCarbs_query minProtein_query maxProtein_query minCalories_query maxCalories_query minFat_query maxFat_query minAlcohol_query maxAlcohol_query minCaffeine_query maxCaffeine_query minCopper_query maxCopper_query minCalcium_query maxCalcium_query minCholine_query maxCholine_query minCholesterol_query maxCholesterol_query minFluoride_query maxFluoride_query minSaturatedFat_query maxSaturatedFat_query minVitaminA_query maxVitaminA_query minVitaminC_query maxVitaminC_query minVitaminD_query maxVitaminD_query minVitaminE_query maxVitaminE_query minVitaminK_query maxVitaminK_query minVitaminB1_query maxVitaminB1_query minVitaminB2_query maxVitaminB2_query minVitaminB5_query maxVitaminB5_query minVitaminB3_query maxVitaminB3_query minVitaminB6_query maxVitaminB6_query minVitaminB12_query maxVitaminB12_query minFiber_query maxFiber_query minFolate_query maxFolate_query minFolicAcid_query maxFolicAcid_query minIodine_query maxIodine_query minIron_query maxIron_query minMagnesium_query maxMagnesium_query minManganese_query maxManganese_query minPhosphorus_query maxPhosphorus_query minPotassium_query maxPotassium_query minSelenium_query maxSelenium_query minSodium_query maxSodium_query minSugar_query maxSugar_query minZinc_query maxZinc_query offset_query number_query random_query limitLicense_query =
    Api.request
        "GET"
        "/recipes/findByNutrients"
        []
        [ ( "minCarbs", Maybe.map String.fromFloat minCarbs_query ), ( "maxCarbs", Maybe.map String.fromFloat maxCarbs_query ), ( "minProtein", Maybe.map String.fromFloat minProtein_query ), ( "maxProtein", Maybe.map String.fromFloat maxProtein_query ), ( "minCalories", Maybe.map String.fromFloat minCalories_query ), ( "maxCalories", Maybe.map String.fromFloat maxCalories_query ), ( "minFat", Maybe.map String.fromFloat minFat_query ), ( "maxFat", Maybe.map String.fromFloat maxFat_query ), ( "minAlcohol", Maybe.map String.fromFloat minAlcohol_query ), ( "maxAlcohol", Maybe.map String.fromFloat maxAlcohol_query ), ( "minCaffeine", Maybe.map String.fromFloat minCaffeine_query ), ( "maxCaffeine", Maybe.map String.fromFloat maxCaffeine_query ), ( "minCopper", Maybe.map String.fromFloat minCopper_query ), ( "maxCopper", Maybe.map String.fromFloat maxCopper_query ), ( "minCalcium", Maybe.map String.fromFloat minCalcium_query ), ( "maxCalcium", Maybe.map String.fromFloat maxCalcium_query ), ( "minCholine", Maybe.map String.fromFloat minCholine_query ), ( "maxCholine", Maybe.map String.fromFloat maxCholine_query ), ( "minCholesterol", Maybe.map String.fromFloat minCholesterol_query ), ( "maxCholesterol", Maybe.map String.fromFloat maxCholesterol_query ), ( "minFluoride", Maybe.map String.fromFloat minFluoride_query ), ( "maxFluoride", Maybe.map String.fromFloat maxFluoride_query ), ( "minSaturatedFat", Maybe.map String.fromFloat minSaturatedFat_query ), ( "maxSaturatedFat", Maybe.map String.fromFloat maxSaturatedFat_query ), ( "minVitaminA", Maybe.map String.fromFloat minVitaminA_query ), ( "maxVitaminA", Maybe.map String.fromFloat maxVitaminA_query ), ( "minVitaminC", Maybe.map String.fromFloat minVitaminC_query ), ( "maxVitaminC", Maybe.map String.fromFloat maxVitaminC_query ), ( "minVitaminD", Maybe.map String.fromFloat minVitaminD_query ), ( "maxVitaminD", Maybe.map String.fromFloat maxVitaminD_query ), ( "minVitaminE", Maybe.map String.fromFloat minVitaminE_query ), ( "maxVitaminE", Maybe.map String.fromFloat maxVitaminE_query ), ( "minVitaminK", Maybe.map String.fromFloat minVitaminK_query ), ( "maxVitaminK", Maybe.map String.fromFloat maxVitaminK_query ), ( "minVitaminB1", Maybe.map String.fromFloat minVitaminB1_query ), ( "maxVitaminB1", Maybe.map String.fromFloat maxVitaminB1_query ), ( "minVitaminB2", Maybe.map String.fromFloat minVitaminB2_query ), ( "maxVitaminB2", Maybe.map String.fromFloat maxVitaminB2_query ), ( "minVitaminB5", Maybe.map String.fromFloat minVitaminB5_query ), ( "maxVitaminB5", Maybe.map String.fromFloat maxVitaminB5_query ), ( "minVitaminB3", Maybe.map String.fromFloat minVitaminB3_query ), ( "maxVitaminB3", Maybe.map String.fromFloat maxVitaminB3_query ), ( "minVitaminB6", Maybe.map String.fromFloat minVitaminB6_query ), ( "maxVitaminB6", Maybe.map String.fromFloat maxVitaminB6_query ), ( "minVitaminB12", Maybe.map String.fromFloat minVitaminB12_query ), ( "maxVitaminB12", Maybe.map String.fromFloat maxVitaminB12_query ), ( "minFiber", Maybe.map String.fromFloat minFiber_query ), ( "maxFiber", Maybe.map String.fromFloat maxFiber_query ), ( "minFolate", Maybe.map String.fromFloat minFolate_query ), ( "maxFolate", Maybe.map String.fromFloat maxFolate_query ), ( "minFolicAcid", Maybe.map String.fromFloat minFolicAcid_query ), ( "maxFolicAcid", Maybe.map String.fromFloat maxFolicAcid_query ), ( "minIodine", Maybe.map String.fromFloat minIodine_query ), ( "maxIodine", Maybe.map String.fromFloat maxIodine_query ), ( "minIron", Maybe.map String.fromFloat minIron_query ), ( "maxIron", Maybe.map String.fromFloat maxIron_query ), ( "minMagnesium", Maybe.map String.fromFloat minMagnesium_query ), ( "maxMagnesium", Maybe.map String.fromFloat maxMagnesium_query ), ( "minManganese", Maybe.map String.fromFloat minManganese_query ), ( "maxManganese", Maybe.map String.fromFloat maxManganese_query ), ( "minPhosphorus", Maybe.map String.fromFloat minPhosphorus_query ), ( "maxPhosphorus", Maybe.map String.fromFloat maxPhosphorus_query ), ( "minPotassium", Maybe.map String.fromFloat minPotassium_query ), ( "maxPotassium", Maybe.map String.fromFloat maxPotassium_query ), ( "minSelenium", Maybe.map String.fromFloat minSelenium_query ), ( "maxSelenium", Maybe.map String.fromFloat maxSelenium_query ), ( "minSodium", Maybe.map String.fromFloat minSodium_query ), ( "maxSodium", Maybe.map String.fromFloat maxSodium_query ), ( "minSugar", Maybe.map String.fromFloat minSugar_query ), ( "maxSugar", Maybe.map String.fromFloat maxSugar_query ), ( "minZinc", Maybe.map String.fromFloat minZinc_query ), ( "maxZinc", Maybe.map String.fromFloat maxZinc_query ), ( "offset", Maybe.map String.fromInt offset_query ), ( "number", Maybe.map String.fromInt number_query ), ( "random", Maybe.map (\val -> if val then "true" else "false") random_query ), ( "limitLicense", Maybe.map (\val -> if val then "true" else "false") limitLicense_query ) ]
        []
        Nothing
        (Json.Decode.list Api.Data.searchRecipesByNutrients200ResponseInnerDecoder)


{-| Automatically generate a short description that summarizes key information about the recipe.
-}
summarizeRecipe : Int -> Api.Request Api.Data.SummarizeRecipe200Response
summarizeRecipe id_path =
    Api.request
        "GET"
        "/recipes/{id}/summary"
        [ ( "id", String.fromInt id_path ) ]
        []
        []
        Nothing
        Api.Data.summarizeRecipe200ResponseDecoder


{-| Visualize the equipment used to make a recipe.
-}
visualizeEquipment : Maybe ContentType -> Maybe Accept -> Api.Request String
visualizeEquipment contentType_header accept_header =
    Api.request
        "POST"
        "/recipes/visualizeEquipment"
        []
        []
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ), ( "Accept", Maybe.map stringFromAccept accept_header ) ]
        Nothing
        Json.Decode.string


{-| Visualize the price breakdown of a recipe.
-}
visualizePriceBreakdown : Maybe Language -> Maybe ContentType -> Maybe Accept -> Api.Request String
visualizePriceBreakdown language_query contentType_header accept_header =
    Api.request
        "POST"
        "/recipes/visualizePriceEstimator"
        []
        [ ( "language", Maybe.map stringFromLanguage language_query ) ]
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ), ( "Accept", Maybe.map stringFromAccept accept_header ) ]
        Nothing
        Json.Decode.string


{-| Visualize a recipe's equipment list.
-}
visualizeRecipeEquipmentByID : Int -> Maybe Bool -> Api.Request String
visualizeRecipeEquipmentByID id_path defaultCss_query =
    Api.request
        "GET"
        "/recipes/{id}/equipmentWidget"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ) ]
        []
        Nothing
        Json.Decode.string


{-| Visualize a recipe's ingredient list.
-}
visualizeRecipeIngredientsByID : Int -> Maybe Bool -> Maybe Measure -> Api.Request String
visualizeRecipeIngredientsByID id_path defaultCss_query measure_query =
    Api.request
        "GET"
        "/recipes/{id}/ingredientWidget"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ), ( "measure", Maybe.map stringFromMeasure measure_query ) ]
        []
        Nothing
        Json.Decode.string


{-| Visualize a recipe's nutritional information as HTML including CSS.
-}
visualizeRecipeNutrition : Maybe Language -> Maybe ContentType -> Maybe Accept -> Api.Request String
visualizeRecipeNutrition language_query contentType_header accept_header =
    Api.request
        "POST"
        "/recipes/visualizeNutrition"
        []
        [ ( "language", Maybe.map stringFromLanguage language_query ) ]
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ), ( "Accept", Maybe.map stringFromAccept accept_header ) ]
        Nothing
        Json.Decode.string


{-| Visualize a recipe's nutritional information as HTML including CSS.
-}
visualizeRecipeNutritionByID : Int -> Maybe Bool -> Maybe Accept -> Api.Request String
visualizeRecipeNutritionByID id_path defaultCss_query accept_header =
    Api.request
        "GET"
        "/recipes/{id}/nutritionWidget"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ) ]
        [ ( "Accept", Maybe.map stringFromAccept accept_header ) ]
        Nothing
        Json.Decode.string


{-| Visualize a recipe's price breakdown.
-}
visualizeRecipePriceBreakdownByID : Int -> Maybe Bool -> Api.Request String
visualizeRecipePriceBreakdownByID id_path defaultCss_query =
    Api.request
        "GET"
        "/recipes/{id}/priceBreakdownWidget"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ) ]
        []
        Nothing
        Json.Decode.string


{-| Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
-}
visualizeRecipeTaste : Maybe Language -> Maybe Bool -> Maybe String -> Maybe ContentType -> Maybe Accept -> Api.Request String
visualizeRecipeTaste language_query normalize_query rgb_query contentType_header accept_header =
    Api.request
        "POST"
        "/recipes/visualizeTaste"
        []
        [ ( "language", Maybe.map stringFromLanguage language_query ), ( "normalize", Maybe.map (\val -> if val then "true" else "false") normalize_query ), ( "rgb", Maybe.map identity rgb_query ) ]
        [ ( "Content-Type", Maybe.map stringFromContentType contentType_header ), ( "Accept", Maybe.map stringFromAccept accept_header ) ]
        Nothing
        Json.Decode.string


{-| Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
-}
visualizeRecipeTasteByID : Int -> Maybe Bool -> Maybe String -> Api.Request String
visualizeRecipeTasteByID id_path normalize_query rgb_query =
    Api.request
        "GET"
        "/recipes/{id}/tasteWidget"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "normalize", Maybe.map (\val -> if val then "true" else "false") normalize_query ), ( "rgb", Maybe.map identity rgb_query ) ]
        []
        Nothing
        Json.Decode.string

