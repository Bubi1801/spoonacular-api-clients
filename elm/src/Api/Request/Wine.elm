{-
   spoonacular API
   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   The version of the OpenAPI document: 1.1
   Contact: mail@spoonacular.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Wine exposing
    ( getDishPairingForWine
    , getWineDescription
    , getWinePairing
    , getWineRecommendation
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode

{-| Find a dish that goes well with a given wine.
-}
getDishPairingForWine : String -> Api.Request Api.Data.GetDishPairingForWine200Response
getDishPairingForWine wine_query =
    Api.request
        "GET"
        "/food/wine/dishes"
        []
        [ ( "wine", Just <| identity wine_query ) ]
        []
        Nothing
        Api.Data.getDishPairingForWine200ResponseDecoder


{-| Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
-}
getWineDescription : String -> Api.Request Api.Data.GetWineDescription200Response
getWineDescription wine_query =
    Api.request
        "GET"
        "/food/wine/description"
        []
        [ ( "wine", Just <| identity wine_query ) ]
        []
        Nothing
        Api.Data.getWineDescription200ResponseDecoder


{-| Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
-}
getWinePairing : String -> Maybe Float -> Api.Request Api.Data.GetWinePairing200Response
getWinePairing food_query maxPrice_query =
    Api.request
        "GET"
        "/food/wine/pairing"
        []
        [ ( "food", Just <| identity food_query ), ( "maxPrice", Maybe.map String.fromFloat maxPrice_query ) ]
        []
        Nothing
        Api.Data.getWinePairing200ResponseDecoder


{-| Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
-}
getWineRecommendation : String -> Maybe Float -> Maybe Float -> Maybe Float -> Api.Request Api.Data.GetWineRecommendation200Response
getWineRecommendation wine_query maxPrice_query minRating_query number_query =
    Api.request
        "GET"
        "/food/wine/recommendation"
        []
        [ ( "wine", Just <| identity wine_query ), ( "maxPrice", Maybe.map String.fromFloat maxPrice_query ), ( "minRating", Maybe.map String.fromFloat minRating_query ), ( "number", Maybe.map String.fromFloat number_query ) ]
        []
        Nothing
        Api.Data.getWineRecommendation200ResponseDecoder

