{-
   spoonacular API
   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   The version of the OpenAPI document: 1.1
   Contact: mail@spoonacular.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.MenuItems exposing
    ( autocompleteMenuItemSearch
    , getMenuItemInformation
    , menuItemNutritionByIDImage
    , menuItemNutritionLabelImage
    , menuItemNutritionLabelWidget
    , searchMenuItems
    , visualizeMenuItemNutritionByID
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode
import File exposing (File)

{-| Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
-}
autocompleteMenuItemSearch : String -> Maybe Float -> Api.Request Api.Data.AutocompleteMenuItemSearch200Response
autocompleteMenuItemSearch query_query number_query =
    Api.request
        "GET"
        "/food/menuItems/suggest"
        []
        [ ( "query", Just <| identity query_query ), ( "number", Maybe.map String.fromFloat number_query ) ]
        []
        Nothing
        Api.Data.autocompleteMenuItemSearch200ResponseDecoder


{-| Use a menu item id to get all available information about a menu item, such as nutrition.
-}
getMenuItemInformation : Int -> Api.Request Api.Data.GetMenuItemInformation200Response
getMenuItemInformation id_path =
    Api.request
        "GET"
        "/food/menuItems/{id}"
        [ ( "id", String.fromInt id_path ) ]
        []
        []
        Nothing
        Api.Data.getMenuItemInformation200ResponseDecoder


{-| Visualize a menu item's nutritional information as HTML including CSS.
-}
menuItemNutritionByIDImage : Float -> Api.Request File
menuItemNutritionByIDImage id_path =
    Api.request
        "GET"
        "/food/menuItems/{id}/nutritionWidget.png"
        [ ( "id", String.fromFloat id_path ) ]
        []
        []
        Nothing
        File.decoder


{-| Visualize a menu item's nutritional label information as an image.
-}
menuItemNutritionLabelImage : Float -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Api.Request File
menuItemNutritionLabelImage id_path showOptionalNutrients_query showZeroValues_query showIngredients_query =
    Api.request
        "GET"
        "/food/menuItems/{id}/nutritionLabel.png"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "showOptionalNutrients", Maybe.map (\val -> if val then "true" else "false") showOptionalNutrients_query ), ( "showZeroValues", Maybe.map (\val -> if val then "true" else "false") showZeroValues_query ), ( "showIngredients", Maybe.map (\val -> if val then "true" else "false") showIngredients_query ) ]
        []
        Nothing
        File.decoder


{-| Visualize a menu item's nutritional label information as HTML including CSS.
-}
menuItemNutritionLabelWidget : Float -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Api.Request String
menuItemNutritionLabelWidget id_path defaultCss_query showOptionalNutrients_query showZeroValues_query showIngredients_query =
    Api.request
        "GET"
        "/food/menuItems/{id}/nutritionLabel"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ), ( "showOptionalNutrients", Maybe.map (\val -> if val then "true" else "false") showOptionalNutrients_query ), ( "showZeroValues", Maybe.map (\val -> if val then "true" else "false") showZeroValues_query ), ( "showIngredients", Maybe.map (\val -> if val then "true" else "false") showIngredients_query ) ]
        []
        Nothing
        Json.Decode.string


{-| Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.
-}
searchMenuItems : Maybe String -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Bool -> Maybe Int -> Maybe Int -> Api.Request Api.Data.SearchMenuItems200Response
searchMenuItems query_query minCalories_query maxCalories_query minCarbs_query maxCarbs_query minProtein_query maxProtein_query minFat_query maxFat_query addMenuItemInformation_query offset_query number_query =
    Api.request
        "GET"
        "/food/menuItems/search"
        []
        [ ( "query", Maybe.map identity query_query ), ( "minCalories", Maybe.map String.fromFloat minCalories_query ), ( "maxCalories", Maybe.map String.fromFloat maxCalories_query ), ( "minCarbs", Maybe.map String.fromFloat minCarbs_query ), ( "maxCarbs", Maybe.map String.fromFloat maxCarbs_query ), ( "minProtein", Maybe.map String.fromFloat minProtein_query ), ( "maxProtein", Maybe.map String.fromFloat maxProtein_query ), ( "minFat", Maybe.map String.fromFloat minFat_query ), ( "maxFat", Maybe.map String.fromFloat maxFat_query ), ( "addMenuItemInformation", Maybe.map (\val -> if val then "true" else "false") addMenuItemInformation_query ), ( "offset", Maybe.map String.fromInt offset_query ), ( "number", Maybe.map String.fromInt number_query ) ]
        []
        Nothing
        Api.Data.searchMenuItems200ResponseDecoder


{-| Visualize a menu item's nutritional information as HTML including CSS.
-}
visualizeMenuItemNutritionByID : Int -> Maybe Bool -> Api.Request String
visualizeMenuItemNutritionByID id_path defaultCss_query =
    Api.request
        "GET"
        "/food/menuItems/{id}/nutritionWidget"
        [ ( "id", String.fromInt id_path ) ]
        [ ( "defaultCss", Maybe.map (\val -> if val then "true" else "false") defaultCss_query ) ]
        []
        Nothing
        Json.Decode.string

