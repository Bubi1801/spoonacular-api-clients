{-
   spoonacular API
   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   The version of the OpenAPI document: 1.1
   Contact: mail@spoonacular.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Default exposing
    ( analyzeRecipe
    , createRecipeCardGet
    , searchRestaurants
    )

import Api
import Api.Data exposing (..)
import Dict
import Http
import Json.Decode
import Json.Encode

{-| This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
-}
analyzeRecipe : Maybe String -> Maybe Bool -> Maybe Bool -> Api.Data.AnalyzeRecipeRequest -> Api.Request (Dict.Dict String Api.Data.Object)
analyzeRecipe language_query includeNutrition_query includeTaste_query analyzeRecipeRequest_body =
    Api.request
        "POST"
        "/recipes/analyze"
        []
        [ ( "language", Maybe.map identity language_query ), ( "includeNutrition", Maybe.map (\val -> if val then "true" else "false") includeNutrition_query ), ( "includeTaste", Maybe.map (\val -> if val then "true" else "false") includeTaste_query ) ]
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeAnalyzeRecipeRequest analyzeRecipeRequest_body)))
        (Json.Decode.dict )


{-| Generate a recipe card for a recipe.
-}
createRecipeCardGet : Float -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Api.Request (Dict.Dict String Api.Data.Object)
createRecipeCardGet id_path mask_query backgroundImage_query backgroundColor_query fontColor_query =
    Api.request
        "GET"
        "/recipes/{id}/card"
        [ ( "id", String.fromFloat id_path ) ]
        [ ( "mask", Maybe.map identity mask_query ), ( "backgroundImage", Maybe.map identity backgroundImage_query ), ( "backgroundColor", Maybe.map identity backgroundColor_query ), ( "fontColor", Maybe.map identity fontColor_query ) ]
        []
        Nothing
        (Json.Decode.dict )


{-| Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
-}
searchRestaurants : Maybe String -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe Float -> Maybe String -> Maybe Float -> Maybe Bool -> Maybe String -> Maybe Float -> Api.Request Api.Data.SearchRestaurants200Response
searchRestaurants query_query lat_query lng_query distance_query budget_query cuisine_query minRating_query isOpen_query sort_query page_query =
    Api.request
        "GET"
        "/food/restaurants/search"
        []
        [ ( "query", Maybe.map identity query_query ), ( "lat", Maybe.map String.fromFloat lat_query ), ( "lng", Maybe.map String.fromFloat lng_query ), ( "distance", Maybe.map String.fromFloat distance_query ), ( "budget", Maybe.map String.fromFloat budget_query ), ( "cuisine", Maybe.map identity cuisine_query ), ( "min-rating", Maybe.map String.fromFloat minRating_query ), ( "is-open", Maybe.map (\val -> if val then "true" else "false") isOpen_query ), ( "sort", Maybe.map identity sort_query ), ( "page", Maybe.map String.fromFloat page_query ) ]
        []
        Nothing
        Api.Data.searchRestaurants200ResponseDecoder

