{-
   spoonacular API
   The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

   The version of the OpenAPI document: 1.1
   Contact: mail@spoonacular.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AddMealPlanTemplate200Response
    , AddMealPlanTemplate200ResponseItemsInner
    , AddMealPlanTemplate200ResponseItemsInnerValue
    , AddToMealPlanRequest
    , AddToMealPlanRequestValue
    , AddToMealPlanRequestValueIngredientsInner
    , AddToShoppingListRequest
    , AnalyzeARecipeSearchQuery200Response
    , AnalyzeARecipeSearchQuery200ResponseDishesInner
    , AnalyzeARecipeSearchQuery200ResponseIngredientsInner
    , AnalyzeRecipeInstructions200Response
    , AnalyzeRecipeInstructions200ResponseIngredientsInner
    , AnalyzeRecipeInstructions200ResponseParsedInstructionsInner
    , AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
    , AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
    , AnalyzeRecipeRequest
    , AutocompleteIngredientSearch200ResponseInner
    , AutocompleteMenuItemSearch200Response
    , AutocompleteProductSearch200Response
    , AutocompleteProductSearch200ResponseResultsInner
    , AutocompleteRecipeSearch200ResponseInner
    , ClassifyCuisine200Response
    , ClassifyGroceryProduct200Response
    , ClassifyGroceryProductBulk200ResponseInner
    , ClassifyGroceryProductBulkRequestInner
    , ClassifyGroceryProductRequest
    , ComputeGlycemicLoad200Response
    , ComputeGlycemicLoad200ResponseIngredientsInner
    , ComputeGlycemicLoadRequest
    , ComputeIngredientAmount200Response
    , ConnectUser200Response
    , ConnectUserRequest
    , ConvertAmounts200Response
    , CreateRecipeCard200Response
    , DetectFoodInText200Response
    , DetectFoodInText200ResponseAnnotationsInner
    , GenerateMealPlan200Response
    , GenerateMealPlan200ResponseNutrients
    , GenerateShoppingList200Response
    , GetARandomFoodJoke200Response
    , GetAnalyzedRecipeInstructions200Response
    , GetAnalyzedRecipeInstructions200ResponseIngredientsInner
    , GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner
    , GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
    , GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
    , GetComparableProducts200Response
    , GetComparableProducts200ResponseComparableProducts
    , GetComparableProducts200ResponseComparableProductsProteinInner
    , GetConversationSuggests200Response
    , GetConversationSuggests200ResponseSuggests
    , GetConversationSuggests200ResponseSuggestsInner
    , GetDishPairingForWine200Response
    , GetIngredientInformation200Response
    , GetIngredientInformation200ResponseNutrition
    , GetIngredientSubstitutes200Response
    , GetMealPlanTemplate200Response
    , GetMealPlanTemplate200ResponseDaysInner
    , GetMealPlanTemplate200ResponseDaysInnerItemsInner
    , GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue
    , GetMealPlanTemplates200Response
    , GetMealPlanWeek200Response
    , GetMealPlanWeek200ResponseDaysInner
    , GetMealPlanWeek200ResponseDaysInnerItemsInner
    , GetMealPlanWeek200ResponseDaysInnerItemsInnerValue
    , GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner
    , GetMenuItemInformation200Response
    , GetProductInformation200Response
    , GetProductInformation200ResponseIngredientsInner
    , GetRandomFoodTrivia200Response
    , GetRandomRecipes200Response
    , GetRandomRecipes200ResponseRecipesInner
    , GetRecipeEquipmentByID200Response
    , GetRecipeEquipmentByID200ResponseEquipmentInner
    , GetRecipeInformation200Response
    , GetRecipeInformation200ResponseExtendedIngredientsInner
    , GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures
    , GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric
    , GetRecipeInformation200ResponseWinePairing
    , GetRecipeInformation200ResponseWinePairingProductMatchesInner
    , GetRecipeInformationBulk200ResponseInner
    , GetRecipeIngredientsByID200Response
    , GetRecipeIngredientsByID200ResponseIngredientsInner
    , GetRecipeNutritionWidgetByID200Response
    , GetRecipeNutritionWidgetByID200ResponseBadInner
    , GetRecipeNutritionWidgetByID200ResponseGoodInner
    , GetRecipePriceBreakdownByID200Response
    , GetRecipePriceBreakdownByID200ResponseIngredientsInner
    , GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount
    , GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
    , GetRecipeTasteByID200Response
    , GetShoppingList200Response
    , GetShoppingList200ResponseAislesInner
    , GetShoppingList200ResponseAislesInnerItemsInner
    , GetShoppingList200ResponseAislesInnerItemsInnerMeasures
    , GetSimilarRecipes200ResponseInner
    , GetWineDescription200Response
    , GetWinePairing200Response
    , GetWinePairing200ResponseProductMatchesInner
    , GetWineRecommendation200Response
    , GetWineRecommendation200ResponseRecommendedWinesInner
    , GuessNutritionByDishName200Response
    , GuessNutritionByDishName200ResponseCalories
    , GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent
    , ImageAnalysisByURL200Response
    , ImageAnalysisByURL200ResponseCategory
    , ImageAnalysisByURL200ResponseNutrition
    , ImageAnalysisByURL200ResponseNutritionCalories
    , ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
    , ImageAnalysisByURL200ResponseRecipesInner
    , ImageClassificationByURL200Response
    , IngredientSearch200Response
    , IngredientSearch200ResponseResultsInner
    , MapIngredientsToGroceryProducts200ResponseInner
    , MapIngredientsToGroceryProducts200ResponseInnerProductsInner
    , MapIngredientsToGroceryProductsRequest
    , ParseIngredients200ResponseInner
    , ParseIngredients200ResponseInnerEstimatedCost
    , ParseIngredients200ResponseInnerNutrition
    , ParseIngredients200ResponseInnerNutritionCaloricBreakdown
    , ParseIngredients200ResponseInnerNutritionNutrientsInner
    , ParseIngredients200ResponseInnerNutritionPropertiesInner
    , ParseIngredients200ResponseInnerNutritionWeightPerServing
    , QuickAnswer200Response
    , SearchAllFood200Response
    , SearchAllFood200ResponseSearchResultsInner
    , SearchAllFood200ResponseSearchResultsInnerResultsInner
    , SearchCustomFoods200Response
    , SearchCustomFoods200ResponseCustomFoodsInner
    , SearchFoodVideos200Response
    , SearchFoodVideos200ResponseVideosInner
    , SearchGroceryProducts200Response
    , SearchGroceryProductsByUPC200Response
    , SearchGroceryProductsByUPC200ResponseIngredientsInner
    , SearchGroceryProductsByUPC200ResponseNutrition
    , SearchGroceryProductsByUPC200ResponseServings
    , SearchMenuItems200Response
    , SearchMenuItems200ResponseMenuItemsInner
    , SearchRecipes200Response
    , SearchRecipes200ResponseResultsInner
    , SearchRecipesByIngredients200ResponseInner
    , SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
    , SearchRecipesByNutrients200ResponseInner
    , SearchRestaurants200Response
    , SearchRestaurants200ResponseRestaurantsInner
    , SearchRestaurants200ResponseRestaurantsInnerAddress
    , SearchRestaurants200ResponseRestaurantsInnerLocalHours
    , SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    , SearchSiteContent200Response
    , SearchSiteContent200ResponseArticlesInner
    , SearchSiteContent200ResponseArticlesInnerDataPointsInner
    , SummarizeRecipe200Response
    , TalkToChatbot200Response
    , TalkToChatbot200ResponseMediaInner
    , encodeAddMealPlanTemplate200Response
    , encodeAddMealPlanTemplate200ResponseItemsInner
    , encodeAddMealPlanTemplate200ResponseItemsInnerValue
    , encodeAddToMealPlanRequest
    , encodeAddToMealPlanRequestValue
    , encodeAddToMealPlanRequestValueIngredientsInner
    , encodeAddToShoppingListRequest
    , encodeAnalyzeARecipeSearchQuery200Response
    , encodeAnalyzeARecipeSearchQuery200ResponseDishesInner
    , encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInner
    , encodeAnalyzeRecipeInstructions200Response
    , encodeAnalyzeRecipeInstructions200ResponseIngredientsInner
    , encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInner
    , encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
    , encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
    , encodeAnalyzeRecipeRequest
    , encodeAutocompleteIngredientSearch200ResponseInner
    , encodeAutocompleteMenuItemSearch200Response
    , encodeAutocompleteProductSearch200Response
    , encodeAutocompleteProductSearch200ResponseResultsInner
    , encodeAutocompleteRecipeSearch200ResponseInner
    , encodeClassifyCuisine200Response
    , encodeClassifyGroceryProduct200Response
    , encodeClassifyGroceryProductBulk200ResponseInner
    , encodeClassifyGroceryProductBulkRequestInner
    , encodeClassifyGroceryProductRequest
    , encodeComputeGlycemicLoad200Response
    , encodeComputeGlycemicLoad200ResponseIngredientsInner
    , encodeComputeGlycemicLoadRequest
    , encodeComputeIngredientAmount200Response
    , encodeConnectUser200Response
    , encodeConnectUserRequest
    , encodeConvertAmounts200Response
    , encodeCreateRecipeCard200Response
    , encodeDetectFoodInText200Response
    , encodeDetectFoodInText200ResponseAnnotationsInner
    , encodeGenerateMealPlan200Response
    , encodeGenerateMealPlan200ResponseNutrients
    , encodeGenerateShoppingList200Response
    , encodeGetARandomFoodJoke200Response
    , encodeGetAnalyzedRecipeInstructions200Response
    , encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInner
    , encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner
    , encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
    , encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
    , encodeGetComparableProducts200Response
    , encodeGetComparableProducts200ResponseComparableProducts
    , encodeGetComparableProducts200ResponseComparableProductsProteinInner
    , encodeGetConversationSuggests200Response
    , encodeGetConversationSuggests200ResponseSuggests
    , encodeGetConversationSuggests200ResponseSuggestsInner
    , encodeGetDishPairingForWine200Response
    , encodeGetIngredientInformation200Response
    , encodeGetIngredientInformation200ResponseNutrition
    , encodeGetIngredientSubstitutes200Response
    , encodeGetMealPlanTemplate200Response
    , encodeGetMealPlanTemplate200ResponseDaysInner
    , encodeGetMealPlanTemplate200ResponseDaysInnerItemsInner
    , encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValue
    , encodeGetMealPlanTemplates200Response
    , encodeGetMealPlanWeek200Response
    , encodeGetMealPlanWeek200ResponseDaysInner
    , encodeGetMealPlanWeek200ResponseDaysInnerItemsInner
    , encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValue
    , encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner
    , encodeGetMenuItemInformation200Response
    , encodeGetProductInformation200Response
    , encodeGetProductInformation200ResponseIngredientsInner
    , encodeGetRandomFoodTrivia200Response
    , encodeGetRandomRecipes200Response
    , encodeGetRandomRecipes200ResponseRecipesInner
    , encodeGetRecipeEquipmentByID200Response
    , encodeGetRecipeEquipmentByID200ResponseEquipmentInner
    , encodeGetRecipeInformation200Response
    , encodeGetRecipeInformation200ResponseExtendedIngredientsInner
    , encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasures
    , encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric
    , encodeGetRecipeInformation200ResponseWinePairing
    , encodeGetRecipeInformation200ResponseWinePairingProductMatchesInner
    , encodeGetRecipeInformationBulk200ResponseInner
    , encodeGetRecipeIngredientsByID200Response
    , encodeGetRecipeIngredientsByID200ResponseIngredientsInner
    , encodeGetRecipeNutritionWidgetByID200Response
    , encodeGetRecipeNutritionWidgetByID200ResponseBadInner
    , encodeGetRecipeNutritionWidgetByID200ResponseGoodInner
    , encodeGetRecipePriceBreakdownByID200Response
    , encodeGetRecipePriceBreakdownByID200ResponseIngredientsInner
    , encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount
    , encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
    , encodeGetRecipeTasteByID200Response
    , encodeGetShoppingList200Response
    , encodeGetShoppingList200ResponseAislesInner
    , encodeGetShoppingList200ResponseAislesInnerItemsInner
    , encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasures
    , encodeGetSimilarRecipes200ResponseInner
    , encodeGetWineDescription200Response
    , encodeGetWinePairing200Response
    , encodeGetWinePairing200ResponseProductMatchesInner
    , encodeGetWineRecommendation200Response
    , encodeGetWineRecommendation200ResponseRecommendedWinesInner
    , encodeGuessNutritionByDishName200Response
    , encodeGuessNutritionByDishName200ResponseCalories
    , encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent
    , encodeImageAnalysisByURL200Response
    , encodeImageAnalysisByURL200ResponseCategory
    , encodeImageAnalysisByURL200ResponseNutrition
    , encodeImageAnalysisByURL200ResponseNutritionCalories
    , encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
    , encodeImageAnalysisByURL200ResponseRecipesInner
    , encodeImageClassificationByURL200Response
    , encodeIngredientSearch200Response
    , encodeIngredientSearch200ResponseResultsInner
    , encodeMapIngredientsToGroceryProducts200ResponseInner
    , encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInner
    , encodeMapIngredientsToGroceryProductsRequest
    , encodeParseIngredients200ResponseInner
    , encodeParseIngredients200ResponseInnerEstimatedCost
    , encodeParseIngredients200ResponseInnerNutrition
    , encodeParseIngredients200ResponseInnerNutritionCaloricBreakdown
    , encodeParseIngredients200ResponseInnerNutritionNutrientsInner
    , encodeParseIngredients200ResponseInnerNutritionPropertiesInner
    , encodeParseIngredients200ResponseInnerNutritionWeightPerServing
    , encodeQuickAnswer200Response
    , encodeSearchAllFood200Response
    , encodeSearchAllFood200ResponseSearchResultsInner
    , encodeSearchAllFood200ResponseSearchResultsInnerResultsInner
    , encodeSearchCustomFoods200Response
    , encodeSearchCustomFoods200ResponseCustomFoodsInner
    , encodeSearchFoodVideos200Response
    , encodeSearchFoodVideos200ResponseVideosInner
    , encodeSearchGroceryProducts200Response
    , encodeSearchGroceryProductsByUPC200Response
    , encodeSearchGroceryProductsByUPC200ResponseIngredientsInner
    , encodeSearchGroceryProductsByUPC200ResponseNutrition
    , encodeSearchGroceryProductsByUPC200ResponseServings
    , encodeSearchMenuItems200Response
    , encodeSearchMenuItems200ResponseMenuItemsInner
    , encodeSearchRecipes200Response
    , encodeSearchRecipes200ResponseResultsInner
    , encodeSearchRecipesByIngredients200ResponseInner
    , encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
    , encodeSearchRecipesByNutrients200ResponseInner
    , encodeSearchRestaurants200Response
    , encodeSearchRestaurants200ResponseRestaurantsInner
    , encodeSearchRestaurants200ResponseRestaurantsInnerAddress
    , encodeSearchRestaurants200ResponseRestaurantsInnerLocalHours
    , encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    , encodeSearchSiteContent200Response
    , encodeSearchSiteContent200ResponseArticlesInner
    , encodeSearchSiteContent200ResponseArticlesInnerDataPointsInner
    , encodeSummarizeRecipe200Response
    , encodeTalkToChatbot200Response
    , encodeTalkToChatbot200ResponseMediaInner
    , addMealPlanTemplate200ResponseDecoder
    , addMealPlanTemplate200ResponseItemsInnerDecoder
    , addMealPlanTemplate200ResponseItemsInnerValueDecoder
    , addToMealPlanRequestDecoder
    , addToMealPlanRequestValueDecoder
    , addToMealPlanRequestValueIngredientsInnerDecoder
    , addToShoppingListRequestDecoder
    , analyzeARecipeSearchQuery200ResponseDecoder
    , analyzeARecipeSearchQuery200ResponseDishesInnerDecoder
    , analyzeARecipeSearchQuery200ResponseIngredientsInnerDecoder
    , analyzeRecipeInstructions200ResponseDecoder
    , analyzeRecipeInstructions200ResponseIngredientsInnerDecoder
    , analyzeRecipeInstructions200ResponseParsedInstructionsInnerDecoder
    , analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder
    , analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder
    , analyzeRecipeRequestDecoder
    , autocompleteIngredientSearch200ResponseInnerDecoder
    , autocompleteMenuItemSearch200ResponseDecoder
    , autocompleteProductSearch200ResponseDecoder
    , autocompleteProductSearch200ResponseResultsInnerDecoder
    , autocompleteRecipeSearch200ResponseInnerDecoder
    , classifyCuisine200ResponseDecoder
    , classifyGroceryProduct200ResponseDecoder
    , classifyGroceryProductBulk200ResponseInnerDecoder
    , classifyGroceryProductBulkRequestInnerDecoder
    , classifyGroceryProductRequestDecoder
    , computeGlycemicLoad200ResponseDecoder
    , computeGlycemicLoad200ResponseIngredientsInnerDecoder
    , computeGlycemicLoadRequestDecoder
    , computeIngredientAmount200ResponseDecoder
    , connectUser200ResponseDecoder
    , connectUserRequestDecoder
    , convertAmounts200ResponseDecoder
    , createRecipeCard200ResponseDecoder
    , detectFoodInText200ResponseDecoder
    , detectFoodInText200ResponseAnnotationsInnerDecoder
    , generateMealPlan200ResponseDecoder
    , generateMealPlan200ResponseNutrientsDecoder
    , generateShoppingList200ResponseDecoder
    , getARandomFoodJoke200ResponseDecoder
    , getAnalyzedRecipeInstructions200ResponseDecoder
    , getAnalyzedRecipeInstructions200ResponseIngredientsInnerDecoder
    , getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerDecoder
    , getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder
    , getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder
    , getComparableProducts200ResponseDecoder
    , getComparableProducts200ResponseComparableProductsDecoder
    , getComparableProducts200ResponseComparableProductsProteinInnerDecoder
    , getConversationSuggests200ResponseDecoder
    , getConversationSuggests200ResponseSuggestsDecoder
    , getConversationSuggests200ResponseSuggestsInnerDecoder
    , getDishPairingForWine200ResponseDecoder
    , getIngredientInformation200ResponseDecoder
    , getIngredientInformation200ResponseNutritionDecoder
    , getIngredientSubstitutes200ResponseDecoder
    , getMealPlanTemplate200ResponseDecoder
    , getMealPlanTemplate200ResponseDaysInnerDecoder
    , getMealPlanTemplate200ResponseDaysInnerItemsInnerDecoder
    , getMealPlanTemplate200ResponseDaysInnerItemsInnerValueDecoder
    , getMealPlanTemplates200ResponseDecoder
    , getMealPlanWeek200ResponseDecoder
    , getMealPlanWeek200ResponseDaysInnerDecoder
    , getMealPlanWeek200ResponseDaysInnerItemsInnerDecoder
    , getMealPlanWeek200ResponseDaysInnerItemsInnerValueDecoder
    , getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder
    , getMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerDecoder
    , getMenuItemInformation200ResponseDecoder
    , getProductInformation200ResponseDecoder
    , getProductInformation200ResponseIngredientsInnerDecoder
    , getRandomFoodTrivia200ResponseDecoder
    , getRandomRecipes200ResponseDecoder
    , getRandomRecipes200ResponseRecipesInnerDecoder
    , getRecipeEquipmentByID200ResponseDecoder
    , getRecipeEquipmentByID200ResponseEquipmentInnerDecoder
    , getRecipeInformation200ResponseDecoder
    , getRecipeInformation200ResponseExtendedIngredientsInnerDecoder
    , getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresDecoder
    , getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricDecoder
    , getRecipeInformation200ResponseWinePairingDecoder
    , getRecipeInformation200ResponseWinePairingProductMatchesInnerDecoder
    , getRecipeInformationBulk200ResponseInnerDecoder
    , getRecipeIngredientsByID200ResponseDecoder
    , getRecipeIngredientsByID200ResponseIngredientsInnerDecoder
    , getRecipeNutritionWidgetByID200ResponseDecoder
    , getRecipeNutritionWidgetByID200ResponseBadInnerDecoder
    , getRecipeNutritionWidgetByID200ResponseGoodInnerDecoder
    , getRecipePriceBreakdownByID200ResponseDecoder
    , getRecipePriceBreakdownByID200ResponseIngredientsInnerDecoder
    , getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountDecoder
    , getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricDecoder
    , getRecipeTasteByID200ResponseDecoder
    , getShoppingList200ResponseDecoder
    , getShoppingList200ResponseAislesInnerDecoder
    , getShoppingList200ResponseAislesInnerItemsInnerDecoder
    , getShoppingList200ResponseAislesInnerItemsInnerMeasuresDecoder
    , getSimilarRecipes200ResponseInnerDecoder
    , getWineDescription200ResponseDecoder
    , getWinePairing200ResponseDecoder
    , getWinePairing200ResponseProductMatchesInnerDecoder
    , getWineRecommendation200ResponseDecoder
    , getWineRecommendation200ResponseRecommendedWinesInnerDecoder
    , guessNutritionByDishName200ResponseDecoder
    , guessNutritionByDishName200ResponseCaloriesDecoder
    , guessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentDecoder
    , imageAnalysisByURL200ResponseDecoder
    , imageAnalysisByURL200ResponseCategoryDecoder
    , imageAnalysisByURL200ResponseNutritionDecoder
    , imageAnalysisByURL200ResponseNutritionCaloriesDecoder
    , imageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentDecoder
    , imageAnalysisByURL200ResponseRecipesInnerDecoder
    , imageClassificationByURL200ResponseDecoder
    , ingredientSearch200ResponseDecoder
    , ingredientSearch200ResponseResultsInnerDecoder
    , mapIngredientsToGroceryProducts200ResponseInnerDecoder
    , mapIngredientsToGroceryProducts200ResponseInnerProductsInnerDecoder
    , mapIngredientsToGroceryProductsRequestDecoder
    , parseIngredients200ResponseInnerDecoder
    , parseIngredients200ResponseInnerEstimatedCostDecoder
    , parseIngredients200ResponseInnerNutritionDecoder
    , parseIngredients200ResponseInnerNutritionCaloricBreakdownDecoder
    , parseIngredients200ResponseInnerNutritionNutrientsInnerDecoder
    , parseIngredients200ResponseInnerNutritionPropertiesInnerDecoder
    , parseIngredients200ResponseInnerNutritionWeightPerServingDecoder
    , quickAnswer200ResponseDecoder
    , searchAllFood200ResponseDecoder
    , searchAllFood200ResponseSearchResultsInnerDecoder
    , searchAllFood200ResponseSearchResultsInnerResultsInnerDecoder
    , searchCustomFoods200ResponseDecoder
    , searchCustomFoods200ResponseCustomFoodsInnerDecoder
    , searchFoodVideos200ResponseDecoder
    , searchFoodVideos200ResponseVideosInnerDecoder
    , searchGroceryProducts200ResponseDecoder
    , searchGroceryProductsByUPC200ResponseDecoder
    , searchGroceryProductsByUPC200ResponseIngredientsInnerDecoder
    , searchGroceryProductsByUPC200ResponseNutritionDecoder
    , searchGroceryProductsByUPC200ResponseServingsDecoder
    , searchMenuItems200ResponseDecoder
    , searchMenuItems200ResponseMenuItemsInnerDecoder
    , searchRecipes200ResponseDecoder
    , searchRecipes200ResponseResultsInnerDecoder
    , searchRecipesByIngredients200ResponseInnerDecoder
    , searchRecipesByIngredients200ResponseInnerMissedIngredientsInnerDecoder
    , searchRecipesByNutrients200ResponseInnerDecoder
    , searchRestaurants200ResponseDecoder
    , searchRestaurants200ResponseRestaurantsInnerDecoder
    , searchRestaurants200ResponseRestaurantsInnerAddressDecoder
    , searchRestaurants200ResponseRestaurantsInnerLocalHoursDecoder
    , searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder
    , searchSiteContent200ResponseDecoder
    , searchSiteContent200ResponseArticlesInnerDecoder
    , searchSiteContent200ResponseArticlesInnerDataPointsInnerDecoder
    , summarizeRecipe200ResponseDecoder
    , talkToChatbot200ResponseDecoder
    , talkToChatbot200ResponseMediaInnerDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


{-| 
-}
type alias AddMealPlanTemplate200Response =
    { name : String
    , items : List AddMealPlanTemplate200ResponseItemsInner
    , publishAsPublic : Bool
    }


type alias AddMealPlanTemplate200ResponseItemsInner =
    { day : Int
    , slot : Int
    , position : Int
    , type_ : String
    , value : Maybe AddMealPlanTemplate200ResponseItemsInnerValue
    }


type alias AddMealPlanTemplate200ResponseItemsInnerValue =
    { id : Maybe Int
    , servings : Maybe Float
    , title : Maybe String
    , imageType : Maybe String
    }


{-| 
-}
type alias AddToMealPlanRequest =
    { date : Float
    , slot : Int
    , position : Int
    , type_ : String
    , value : AddToMealPlanRequestValue
    }


type alias AddToMealPlanRequestValue =
    { ingredients : List AddToMealPlanRequestValueIngredientsInner
    }


type alias AddToMealPlanRequestValueIngredientsInner =
    { name : String
    }


{-| 
-}
type alias AddToShoppingListRequest =
    { item : String
    , aisle : String
    , parse : Bool
    }


{-| 
-}
type alias AnalyzeARecipeSearchQuery200Response =
    { dishes : List AnalyzeARecipeSearchQuery200ResponseDishesInner
    , ingredients : List AnalyzeARecipeSearchQuery200ResponseIngredientsInner
    , cuisines : List String
    , modifiers : List String
    }


type alias AnalyzeARecipeSearchQuery200ResponseDishesInner =
    { image : String
    , name : String
    }


type alias AnalyzeARecipeSearchQuery200ResponseIngredientsInner =
    { image : String
    , include : Bool
    , name : String
    }


{-| 
-}
type alias AnalyzeRecipeInstructions200Response =
    { parsedInstructions : List AnalyzeRecipeInstructions200ResponseParsedInstructionsInner
    , ingredients : List AnalyzeRecipeInstructions200ResponseIngredientsInner
    , equipment : List AnalyzeRecipeInstructions200ResponseIngredientsInner
    }


type alias AnalyzeRecipeInstructions200ResponseIngredientsInner =
    { id : Float
    , name : String
    }


type alias AnalyzeRecipeInstructions200ResponseParsedInstructionsInner =
    { name : String
    , steps : Maybe ( List AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner )
    }


type alias AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner =
    { number : Float
    , step : String
    , ingredients : Maybe ( List AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner )
    , equipment : Maybe ( List AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner )
    }


type alias AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner =
    { id : Float
    , name : String
    , localizedName : String
    , image : String
    }


type alias AnalyzeRecipeRequest =
    { title : Maybe String
    , servings : Maybe Int
    , ingredients : Maybe ( List String )
    , instructions : Maybe String
    }


type alias AutocompleteIngredientSearch200ResponseInner =
    { name : String
    , image : String
    , id : Maybe Int
    , aisle : Maybe String
    , possibleUnits : Maybe ( List String )
    }


{-| 
-}
type alias AutocompleteMenuItemSearch200Response =
    { results : List AutocompleteProductSearch200ResponseResultsInner
    }


{-| 
-}
type alias AutocompleteProductSearch200Response =
    { results : List AutocompleteProductSearch200ResponseResultsInner
    }


type alias AutocompleteProductSearch200ResponseResultsInner =
    { id : Int
    , title : String
    }


type alias AutocompleteRecipeSearch200ResponseInner =
    { id : Int
    , title : String
    , imageType : String
    }


{-| 
-}
type alias ClassifyCuisine200Response =
    { cuisine : String
    , cuisines : List String
    , confidence : Float
    }


{-| 
-}
type alias ClassifyGroceryProduct200Response =
    { cleanTitle : String
    , image : String
    , category : String
    , breadcrumbs : List String
    , usdaCode : Int
    }


type alias ClassifyGroceryProductBulk200ResponseInner =
    { cleanTitle : String
    , image : String
    , category : String
    , breadcrumbs : List String
    , usdaCode : Int
    }


type alias ClassifyGroceryProductBulkRequestInner =
    { title : String
    , upc : String
    , pluCode : String
    }


{-| 
-}
type alias ClassifyGroceryProductRequest =
    { title : String
    , upc : String
    , pluCode : String
    }


{-| 
-}
type alias ComputeGlycemicLoad200Response =
    { totalGlycemicLoad : Float
    , ingredients : List ComputeGlycemicLoad200ResponseIngredientsInner
    }


type alias ComputeGlycemicLoad200ResponseIngredientsInner =
    { id : Int
    , original : String
    , glycemicIndex : Float
    , glycemicLoad : Float
    }


{-| 
-}
type alias ComputeGlycemicLoadRequest =
    { ingredients : List String
    }


{-| 
-}
type alias ComputeIngredientAmount200Response =
    { amount : Float
    , unit : String
    }


{-| 
-}
type alias ConnectUser200Response =
    { username : String
    , hash : String
    }


{-| 
-}
type alias ConnectUserRequest =
    { username : String
    , firstName : String
    , lastName : String
    , email : String
    }


{-| 
-}
type alias ConvertAmounts200Response =
    { sourceAmount : Float
    , sourceUnit : String
    , targetAmount : Float
    , targetUnit : String
    , answer : String
    }


{-| 
-}
type alias CreateRecipeCard200Response =
    { url : String
    }


{-| 
-}
type alias DetectFoodInText200Response =
    { annotations : List DetectFoodInText200ResponseAnnotationsInner
    }


type alias DetectFoodInText200ResponseAnnotationsInner =
    { annotation : String
    , image : String
    , tag : String
    }


{-| 
-}
type alias GenerateMealPlan200Response =
    { meals : List GetSimilarRecipes200ResponseInner
    , nutrients : GenerateMealPlan200ResponseNutrients
    }


type alias GenerateMealPlan200ResponseNutrients =
    { calories : Float
    , carbohydrates : Float
    , fat : Float
    , protein : Float
    }


{-| 
-}
type alias GenerateShoppingList200Response =
    { aisles : List GetShoppingList200ResponseAislesInner
    , cost : Float
    , startDate : Float
    , endDate : Float
    }


{-| 
-}
type alias GetARandomFoodJoke200Response =
    { text : String
    }


{-| 
-}
type alias GetAnalyzedRecipeInstructions200Response =
    { parsedInstructions : List GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner
    , ingredients : List GetAnalyzedRecipeInstructions200ResponseIngredientsInner
    , equipment : List GetAnalyzedRecipeInstructions200ResponseIngredientsInner
    }


type alias GetAnalyzedRecipeInstructions200ResponseIngredientsInner =
    { id : Int
    , name : String
    }


type alias GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner =
    { name : String
    , steps : Maybe ( List GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner )
    }


type alias GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner =
    { number : Float
    , step : String
    , ingredients : Maybe ( List GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner )
    , equipment : Maybe ( List GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner )
    }


type alias GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner =
    { id : Int
    , name : String
    , localizedName : String
    , image : String
    }


{-| 
-}
type alias GetComparableProducts200Response =
    { comparableProducts : GetComparableProducts200ResponseComparableProducts
    }


type alias GetComparableProducts200ResponseComparableProducts =
    { calories : List Object
    , likes : List Object
    , price : List Object
    , protein : List GetComparableProducts200ResponseComparableProductsProteinInner
    , spoonacularScore : List GetComparableProducts200ResponseComparableProductsProteinInner
    , sugar : List Object
    }


type alias GetComparableProducts200ResponseComparableProductsProteinInner =
    { difference : Float
    , id : Int
    , image : String
    , title : String
    }


{-| 
-}
type alias GetConversationSuggests200Response =
    { suggests : GetConversationSuggests200ResponseSuggests
    , words : List String
    }


type alias GetConversationSuggests200ResponseSuggests =
    {  : List GetConversationSuggests200ResponseSuggestsInner
    }


type alias GetConversationSuggests200ResponseSuggestsInner =
    { name : String
    }


{-| 
-}
type alias GetDishPairingForWine200Response =
    { pairings : List String
    , text : String
    }


{-| 
-}
type alias GetIngredientInformation200Response =
    { id : Int
    , original : String
    , originalName : String
    , name : String
    , nameClean : String
    , amount : Float
    , unit : String
    , unitShort : String
    , unitLong : String
    , possibleUnits : List String
    , estimatedCost : ParseIngredients200ResponseInnerEstimatedCost
    , consistency : String
    , shoppingListUnits : List String
    , aisle : String
    , image : String
    , meta : List Object
    , nutrition : GetIngredientInformation200ResponseNutrition
    , categoryPath : List String
    }


type alias GetIngredientInformation200ResponseNutrition =
    { nutrients : List ParseIngredients200ResponseInnerNutritionNutrientsInner
    , properties : List ParseIngredients200ResponseInnerNutritionPropertiesInner
    , caloricBreakdown : ParseIngredients200ResponseInnerNutritionCaloricBreakdown
    , weightPerServing : ParseIngredients200ResponseInnerNutritionWeightPerServing
    }


{-| 
-}
type alias GetIngredientSubstitutes200Response =
    { ingredient : String
    , substitutes : List String
    , message : String
    }


{-| 
-}
type alias GetMealPlanTemplate200Response =
    { id : Int
    , name : String
    , days : List GetMealPlanTemplate200ResponseDaysInner
    }


type alias GetMealPlanTemplate200ResponseDaysInner =
    { nutritionSummary : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , nutritionSummaryBreakfast : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , nutritionSummaryLunch : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , nutritionSummaryDinner : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , day : String
    , items : Maybe ( List GetMealPlanTemplate200ResponseDaysInnerItemsInner )
    }


type alias GetMealPlanTemplate200ResponseDaysInnerItemsInner =
    { id : Int
    , slot : Int
    , position : Int
    , type_ : String
    , value : Maybe GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue
    }


type alias GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue =
    { id : Float
    , title : String
    , imageType : String
    }


{-| 
-}
type alias GetMealPlanTemplates200Response =
    { templates : List GetAnalyzedRecipeInstructions200ResponseIngredientsInner
    }


{-| 
-}
type alias GetMealPlanWeek200Response =
    { days : List GetMealPlanWeek200ResponseDaysInner
    }


type alias GetMealPlanWeek200ResponseDaysInner =
    { nutritionSummary : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , nutritionSummaryBreakfast : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , nutritionSummaryLunch : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , nutritionSummaryDinner : Maybe GetMealPlanWeek200ResponseDaysInnerNutritionSummary
    , date : Float
    , day : String
    , items : Maybe ( List GetMealPlanWeek200ResponseDaysInnerItemsInner )
    }


type alias GetMealPlanWeek200ResponseDaysInnerItemsInner =
    { id : Int
    , slot : Int
    , position : Int
    , type_ : String
    , value : Maybe GetMealPlanWeek200ResponseDaysInnerItemsInnerValue
    }


type alias GetMealPlanWeek200ResponseDaysInnerItemsInnerValue =
    { servings : Float
    , id : Float
    , title : String
    , imageType : String
    }


type alias GetMealPlanWeek200ResponseDaysInnerNutritionSummary =
    { nutrients : List GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner
    }


type alias GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner =
    { name : String
    , amount : Float
    , unit : String
    , percentDailyNeeds : Float
    }


{-| 
-}
type alias GetMenuItemInformation200Response =
    { id : Int
    , title : String
    , restaurantChain : String
    , nutrition : SearchGroceryProductsByUPC200ResponseNutrition
    , badges : List String
    , breadcrumbs : List String
    , generatedText : Maybe String
    , imageType : String
    , likes : Float
    , servings : SearchGroceryProductsByUPC200ResponseServings
    , price : Maybe Float
    , spoonacularScore : Maybe Float
    }


{-| 
-}
type alias GetProductInformation200Response =
    { id : Int
    , title : String
    , breadcrumbs : List String
    , imageType : String
    , badges : List String
    , importantBadges : List String
    , ingredientCount : Int
    , generatedText : Maybe String
    , ingredientList : String
    , ingredients : List GetProductInformation200ResponseIngredientsInner
    , likes : Float
    , aisle : String
    , nutrition : SearchGroceryProductsByUPC200ResponseNutrition
    , price : Float
    , servings : SearchGroceryProductsByUPC200ResponseServings
    , spoonacularScore : Float
    }


type alias GetProductInformation200ResponseIngredientsInner =
    { description : Maybe String
    , name : String
    , safetyLevel : Maybe String
    }


{-| 
-}
type alias GetRandomFoodTrivia200Response =
    { text : String
    }


{-| 
-}
type alias GetRandomRecipes200Response =
    { recipes : List GetRandomRecipes200ResponseRecipesInner
    }


type alias GetRandomRecipes200ResponseRecipesInner =
    { id : Int
    , title : String
    , image : String
    , imageType : String
    , servings : Float
    , readyInMinutes : Int
    , license : String
    , sourceName : String
    , sourceUrl : String
    , spoonacularSourceUrl : String
    , aggregateLikes : Float
    , healthScore : Float
    , spoonacularScore : Float
    , pricePerServing : Float
    , analyzedInstructions : Maybe ( List Object )
    , cheap : Bool
    , creditsText : String
    , cuisines : Maybe ( List String )
    , dairyFree : Bool
    , diets : Maybe ( List String )
    , gaps : String
    , glutenFree : Bool
    , instructions : String
    , ketogenic : Bool
    , lowFodmap : Bool
    , occasions : Maybe ( List String )
    , sustainable : Bool
    , vegan : Bool
    , vegetarian : Bool
    , veryHealthy : Bool
    , veryPopular : Bool
    , whole30 : Bool
    , weightWatcherSmartPoints : Float
    , dishTypes : Maybe ( List String )
    , extendedIngredients : Maybe ( List GetRecipeInformation200ResponseExtendedIngredientsInner )
    , summary : String
    , winePairing : Maybe GetRecipeInformation200ResponseWinePairing
    }


{-| 
-}
type alias GetRecipeEquipmentByID200Response =
    { equipment : List GetRecipeEquipmentByID200ResponseEquipmentInner
    }


type alias GetRecipeEquipmentByID200ResponseEquipmentInner =
    { image : String
    , name : String
    }


{-| 
-}
type alias GetRecipeInformation200Response =
    { id : Int
    , title : String
    , image : String
    , imageType : String
    , servings : Float
    , readyInMinutes : Int
    , license : String
    , sourceName : String
    , sourceUrl : String
    , spoonacularSourceUrl : String
    , aggregateLikes : Int
    , healthScore : Float
    , spoonacularScore : Float
    , pricePerServing : Float
    , analyzedInstructions : List Object
    , cheap : Bool
    , creditsText : String
    , cuisines : List String
    , dairyFree : Bool
    , diets : List String
    , gaps : String
    , glutenFree : Bool
    , instructions : String
    , ketogenic : Bool
    , lowFodmap : Bool
    , occasions : List String
    , sustainable : Bool
    , vegan : Bool
    , vegetarian : Bool
    , veryHealthy : Bool
    , veryPopular : Bool
    , whole30 : Bool
    , weightWatcherSmartPoints : Float
    , dishTypes : List String
    , extendedIngredients : List GetRecipeInformation200ResponseExtendedIngredientsInner
    , summary : String
    , winePairing : GetRecipeInformation200ResponseWinePairing
    }


type alias GetRecipeInformation200ResponseExtendedIngredientsInner =
    { aisle : String
    , amount : Float
    , consitency : String
    , id : Int
    , image : String
    , measures : Maybe GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures
    , meta : Maybe ( List String )
    , name : String
    , original : String
    , originalName : String
    , unit : String
    }


type alias GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures =
    { metric : GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric
    , us : GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric
    }


type alias GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric =
    { amount : Float
    , unitLong : String
    , unitShort : String
    }


type alias GetRecipeInformation200ResponseWinePairing =
    { pairedWines : List String
    , pairingText : String
    , productMatches : List GetRecipeInformation200ResponseWinePairingProductMatchesInner
    }


type alias GetRecipeInformation200ResponseWinePairingProductMatchesInner =
    { id : Int
    , title : String
    , description : String
    , price : String
    , imageUrl : String
    , averageRating : Float
    , ratingCount : Int
    , score : Float
    , link : String
    }


type alias GetRecipeInformationBulk200ResponseInner =
    { id : Int
    , title : String
    , image : String
    , imageType : String
    , servings : Float
    , readyInMinutes : Int
    , license : String
    , sourceName : String
    , sourceUrl : String
    , spoonacularSourceUrl : String
    , aggregateLikes : Int
    , healthScore : Float
    , spoonacularScore : Float
    , pricePerServing : Float
    , analyzedInstructions : List String
    , cheap : Bool
    , creditsText : String
    , cuisines : List String
    , dairyFree : Bool
    , diets : List String
    , gaps : String
    , glutenFree : Bool
    , instructions : String
    , ketogenic : Bool
    , lowFodmap : Bool
    , occasions : List String
    , sustainable : Bool
    , vegan : Bool
    , vegetarian : Bool
    , veryHealthy : Bool
    , veryPopular : Bool
    , whole30 : Bool
    , weightWatcherSmartPoints : Float
    , dishTypes : List String
    , extendedIngredients : List GetRecipeInformation200ResponseExtendedIngredientsInner
    , summary : String
    , winePairing : GetRecipeInformation200ResponseWinePairing
    }


{-| 
-}
type alias GetRecipeIngredientsByID200Response =
    { ingredients : List GetRecipeIngredientsByID200ResponseIngredientsInner
    }


type alias GetRecipeIngredientsByID200ResponseIngredientsInner =
    { amount : Maybe GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount
    , image : String
    , name : String
    }


{-| 
-}
type alias GetRecipeNutritionWidgetByID200Response =
    { calories : String
    , carbs : String
    , fat : String
    , protein : String
    , bad : List GetRecipeNutritionWidgetByID200ResponseBadInner
    , good : List GetRecipeNutritionWidgetByID200ResponseGoodInner
    }


type alias GetRecipeNutritionWidgetByID200ResponseBadInner =
    { name : String
    , amount : String
    , indented : Bool
    , percentOfDailyNeeds : Float
    }


type alias GetRecipeNutritionWidgetByID200ResponseGoodInner =
    { amount : String
    , indented : Bool
    , percentOfDailyNeeds : Float
    , name : String
    }


{-| 
-}
type alias GetRecipePriceBreakdownByID200Response =
    { ingredients : List GetRecipePriceBreakdownByID200ResponseIngredientsInner
    , totalCost : Float
    , totalCostPerServing : Float
    }


type alias GetRecipePriceBreakdownByID200ResponseIngredientsInner =
    { amount : Maybe GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount
    , image : String
    , name : String
    , price : Float
    }


type alias GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount =
    { metric : GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
    , us : GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
    }


type alias GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric =
    { unit : String
    , value : Float
    }


{-| 
-}
type alias GetRecipeTasteByID200Response =
    { sweetness : Float
    , saltiness : Float
    , sourness : Float
    , bitterness : Float
    , savoriness : Float
    , fattiness : Float
    , spiciness : Float
    }


{-| 
-}
type alias GetShoppingList200Response =
    { aisles : List GetShoppingList200ResponseAislesInner
    , cost : Float
    , startDate : Float
    , endDate : Float
    }


type alias GetShoppingList200ResponseAislesInner =
    { aisle : String
    , items : Maybe ( List GetShoppingList200ResponseAislesInnerItemsInner )
    }


type alias GetShoppingList200ResponseAislesInnerItemsInner =
    { id : Int
    , name : String
    , measures : Maybe GetShoppingList200ResponseAislesInnerItemsInnerMeasures
    , pantryItem : Bool
    , aisle : String
    , cost : Float
    , ingredientId : Int
    }


type alias GetShoppingList200ResponseAislesInnerItemsInnerMeasures =
    { original : ParseIngredients200ResponseInnerNutritionWeightPerServing
    , metric : ParseIngredients200ResponseInnerNutritionWeightPerServing
    , us : ParseIngredients200ResponseInnerNutritionWeightPerServing
    }


type alias GetSimilarRecipes200ResponseInner =
    { id : Int
    , title : String
    , imageType : String
    , readyInMinutes : Int
    , servings : Float
    , sourceUrl : String
    }


{-| 
-}
type alias GetWineDescription200Response =
    { wineDescription : String
    }


{-| 
-}
type alias GetWinePairing200Response =
    { pairedWines : List String
    , pairingText : String
    , productMatches : List GetWinePairing200ResponseProductMatchesInner
    }


type alias GetWinePairing200ResponseProductMatchesInner =
    { id : Int
    , title : String
    , averageRating : Float
    , description : Maybe String
    , imageUrl : String
    , link : String
    , price : String
    , ratingCount : Int
    , score : Float
    }


{-| 
-}
type alias GetWineRecommendation200Response =
    { recommendedWines : List GetWineRecommendation200ResponseRecommendedWinesInner
    , totalFound : Int
    }


type alias GetWineRecommendation200ResponseRecommendedWinesInner =
    { id : Int
    , title : String
    , averageRating : Float
    , description : String
    , imageUrl : String
    , link : String
    , price : String
    , ratingCount : Int
    , score : Float
    }


{-| 
-}
type alias GuessNutritionByDishName200Response =
    { calories : GuessNutritionByDishName200ResponseCalories
    , carbs : GuessNutritionByDishName200ResponseCalories
    , fat : GuessNutritionByDishName200ResponseCalories
    , protein : GuessNutritionByDishName200ResponseCalories
    , recipesUsed : Int
    }


type alias GuessNutritionByDishName200ResponseCalories =
    { confidenceRange95Percent : GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent
    , standardDeviation : Float
    , unit : String
    , value : Float
    }


type alias GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent =
    { max : Float
    , min : Float
    }


{-| 
-}
type alias ImageAnalysisByURL200Response =
    { nutrition : ImageAnalysisByURL200ResponseNutrition
    , category : ImageAnalysisByURL200ResponseCategory
    , recipes : List ImageAnalysisByURL200ResponseRecipesInner
    }


type alias ImageAnalysisByURL200ResponseCategory =
    { name : String
    , probability : Float
    }


type alias ImageAnalysisByURL200ResponseNutrition =
    { recipesUsed : Int
    , calories : ImageAnalysisByURL200ResponseNutritionCalories
    , fat : ImageAnalysisByURL200ResponseNutritionCalories
    , protein : ImageAnalysisByURL200ResponseNutritionCalories
    , carbs : ImageAnalysisByURL200ResponseNutritionCalories
    }


type alias ImageAnalysisByURL200ResponseNutritionCalories =
    { value : Float
    , unit : String
    , confidenceRange95Percent : ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
    , standardDeviation : Float
    }


type alias ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent =
    { min : Float
    , max : Float
    }


type alias ImageAnalysisByURL200ResponseRecipesInner =
    { id : Int
    , title : String
    , imageType : String
    , url : String
    }


{-| 
-}
type alias ImageClassificationByURL200Response =
    { category : String
    , probability : Float
    }


{-| 
-}
type alias IngredientSearch200Response =
    { results : List IngredientSearch200ResponseResultsInner
    , offset : Int
    , number : Int
    , totalResults : Int
    }


type alias IngredientSearch200ResponseResultsInner =
    { id : Int
    , name : String
    , image : String
    }


type alias MapIngredientsToGroceryProducts200ResponseInner =
    { original : String
    , originalName : String
    , ingredientImage : String
    , meta : List String
    , products : List MapIngredientsToGroceryProducts200ResponseInnerProductsInner
    }


type alias MapIngredientsToGroceryProducts200ResponseInnerProductsInner =
    { id : Int
    , title : String
    , upc : String
    }


{-| 
-}
type alias MapIngredientsToGroceryProductsRequest =
    { ingredients : List String
    , servings : Float
    }


type alias ParseIngredients200ResponseInner =
    { id : Int
    , original : String
    , originalName : String
    , name : String
    , nameClean : String
    , amount : Float
    , unit : String
    , unitShort : String
    , unitLong : String
    , possibleUnits : List String
    , estimatedCost : ParseIngredients200ResponseInnerEstimatedCost
    , consistency : String
    , aisle : String
    , image : String
    , meta : List String
    , nutrition : ParseIngredients200ResponseInnerNutrition
    }


type alias ParseIngredients200ResponseInnerEstimatedCost =
    { value : Float
    , unit : String
    }


type alias ParseIngredients200ResponseInnerNutrition =
    { nutrients : List ParseIngredients200ResponseInnerNutritionNutrientsInner
    , properties : List ParseIngredients200ResponseInnerNutritionPropertiesInner
    , flavonoids : List ParseIngredients200ResponseInnerNutritionPropertiesInner
    , caloricBreakdown : ParseIngredients200ResponseInnerNutritionCaloricBreakdown
    , weightPerServing : ParseIngredients200ResponseInnerNutritionWeightPerServing
    }


type alias ParseIngredients200ResponseInnerNutritionCaloricBreakdown =
    { percentProtein : Float
    , percentFat : Float
    , percentCarbs : Float
    }


type alias ParseIngredients200ResponseInnerNutritionNutrientsInner =
    { name : String
    , amount : Float
    , unit : String
    , percentOfDailyNeeds : Float
    }


type alias ParseIngredients200ResponseInnerNutritionPropertiesInner =
    { name : String
    , amount : Float
    , unit : String
    }


type alias ParseIngredients200ResponseInnerNutritionWeightPerServing =
    { amount : Float
    , unit : String
    }


{-| 
-}
type alias QuickAnswer200Response =
    { answer : String
    , image : String
    }


{-| 
-}
type alias SearchAllFood200Response =
    { query : String
    , totalResults : Int
    , limit : Int
    , offset : Int
    , searchResults : List SearchAllFood200ResponseSearchResultsInner
    }


type alias SearchAllFood200ResponseSearchResultsInner =
    { name : String
    , totalResults : Int
    , results : Maybe ( List SearchAllFood200ResponseSearchResultsInnerResultsInner )
    }


type alias SearchAllFood200ResponseSearchResultsInnerResultsInner =
    { id : String
    , name : String
    , image : Maybe String
    , link : Maybe String
    , type_ : String
    , relevance : Float
    , content : Maybe String
    }


{-| 
-}
type alias SearchCustomFoods200Response =
    { customFoods : List SearchCustomFoods200ResponseCustomFoodsInner
    , type_ : String
    , offset : Int
    , number : Int
    }


type alias SearchCustomFoods200ResponseCustomFoodsInner =
    { id : Int
    , title : String
    , servings : Float
    , imageUrl : String
    , price : Float
    }


{-| 
-}
type alias SearchFoodVideos200Response =
    { videos : List SearchFoodVideos200ResponseVideosInner
    , totalResults : Int
    }


type alias SearchFoodVideos200ResponseVideosInner =
    { title : String
    , length : Int
    , rating : Float
    , shortTitle : String
    , thumbnail : String
    , views : Int
    , youTubeId : String
    }


{-| 
-}
type alias SearchGroceryProducts200Response =
    { products : List AutocompleteRecipeSearch200ResponseInner
    , totalProducts : Int
    , type_ : String
    , offset : Int
    , number : Int
    }


{-| 
-}
type alias SearchGroceryProductsByUPC200Response =
    { id : Int
    , title : String
    , badges : List String
    , importantBadges : List String
    , breadcrumbs : List String
    , generatedText : String
    , imageType : String
    , ingredientCount : Maybe Int
    , ingredientList : String
    , ingredients : List SearchGroceryProductsByUPC200ResponseIngredientsInner
    , likes : Float
    , nutrition : SearchGroceryProductsByUPC200ResponseNutrition
    , price : Float
    , servings : SearchGroceryProductsByUPC200ResponseServings
    , spoonacularScore : Float
    }


type alias SearchGroceryProductsByUPC200ResponseIngredientsInner =
    { description : Maybe String
    , name : String
    , safetyLevel : Maybe String
    }


type alias SearchGroceryProductsByUPC200ResponseNutrition =
    { nutrients : List ParseIngredients200ResponseInnerNutritionNutrientsInner
    , caloricBreakdown : ParseIngredients200ResponseInnerNutritionCaloricBreakdown
    }


type alias SearchGroceryProductsByUPC200ResponseServings =
    { number : Float
    , size : Float
    , unit : String
    }


{-| 
-}
type alias SearchMenuItems200Response =
    { menuItems : List SearchMenuItems200ResponseMenuItemsInner
    , totalMenuItems : Int
    , type_ : String
    , offset : Int
    , number : Int
    }


type alias SearchMenuItems200ResponseMenuItemsInner =
    { id : Int
    , title : String
    , restaurantChain : String
    , image : String
    , imageType : String
    , servings : Maybe SearchGroceryProductsByUPC200ResponseServings
    }


{-| 
-}
type alias SearchRecipes200Response =
    { offset : Int
    , number : Int
    , results : List SearchRecipes200ResponseResultsInner
    , totalResults : Int
    }


type alias SearchRecipes200ResponseResultsInner =
    { id : Int
    , title : String
    , image : String
    , imageType : String
    }


type alias SearchRecipesByIngredients200ResponseInner =
    { id : Int
    , image : String
    , imageType : String
    , likes : Int
    , missedIngredientCount : Int
    , missedIngredients : List SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
    , title : String
    , unusedIngredients : List Object
    , usedIngredientCount : Float
    , usedIngredients : List SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
    }


type alias SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner =
    { aisle : String
    , amount : Float
    , id : Int
    , image : String
    , meta : Maybe ( List String )
    , name : String
    , extendedName : Maybe String
    , original : String
    , originalName : String
    , unit : String
    , unitLong : String
    , unitShort : String
    }


type alias SearchRecipesByNutrients200ResponseInner =
    { calories : Float
    , carbs : String
    , fat : String
    , id : Int
    , image : String
    , imageType : String
    , protein : String
    , title : String
    }


type alias SearchRestaurants200Response =
    { restaurants : Maybe ( List SearchRestaurants200ResponseRestaurantsInner )
    }


type alias SearchRestaurants200ResponseRestaurantsInner =
    { id : Maybe String
    , name : Maybe String
    , phoneNumber : Maybe Int
    , address : Maybe SearchRestaurants200ResponseRestaurantsInnerAddress
    , type_ : Maybe String
    , description : Maybe String
    , localHours : Maybe SearchRestaurants200ResponseRestaurantsInnerLocalHours
    , cuisines : Maybe ( List String )
    , foodPhotos : Maybe ( List String )
    , logoPhotos : Maybe ( List String )
    , storePhotos : Maybe ( List String )
    , dollarSigns : Maybe Int
    , pickupEnabled : Maybe Bool
    , deliveryEnabled : Maybe Bool
    , isOpen : Maybe Bool
    , offersFirstPartyDelivery : Maybe Bool
    , offersThirdPartyDelivery : Maybe Bool
    , miles : Maybe Float
    , weightedRatingValue : Maybe Float
    , aggregatedRatingCount : Maybe Int
    }


type alias SearchRestaurants200ResponseRestaurantsInnerAddress =
    { streetAddr : Maybe String
    , city : Maybe String
    , state : Maybe String
    , zipcode : Maybe String
    , country : Maybe String
    , lat : Maybe Float
    , lon : Maybe Float
    , streetAddr2 : Maybe String
    , latitude : Maybe Float
    , longitude : Maybe Float
    }


type alias SearchRestaurants200ResponseRestaurantsInnerLocalHours =
    { operational : Maybe SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    , delivery : Maybe SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    , pickup : Maybe SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    , dineIn : Maybe SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    }


type alias SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational =
    { monday : Maybe String
    , tuesday : Maybe String
    , wednesday : Maybe String
    , thursday : Maybe String
    , friday : Maybe String
    , saturday : Maybe String
    , sunday : Maybe String
    }


{-| 
-}
type alias SearchSiteContent200Response =
    { articles : List SearchSiteContent200ResponseArticlesInner
    , groceryProducts : List SearchSiteContent200ResponseArticlesInner
    , menuItems : List SearchSiteContent200ResponseArticlesInner
    , recipes : List SearchSiteContent200ResponseArticlesInner
    }


type alias SearchSiteContent200ResponseArticlesInner =
    { dataPoints : Maybe ( List SearchSiteContent200ResponseArticlesInnerDataPointsInner )
    , image : String
    , link : String
    , name : String
    }


type alias SearchSiteContent200ResponseArticlesInnerDataPointsInner =
    { key : String
    , value : String
    }


{-| 
-}
type alias SummarizeRecipe200Response =
    { id : Int
    , summary : String
    , title : String
    }


{-| 
-}
type alias TalkToChatbot200Response =
    { answerText : String
    , media : List TalkToChatbot200ResponseMediaInner
    }


type alias TalkToChatbot200ResponseMediaInner =
    { title : Maybe String
    , image : Maybe String
    , link : Maybe String
    }


-- ENCODER


encodeAddMealPlanTemplate200Response : AddMealPlanTemplate200Response -> Json.Encode.Value
encodeAddMealPlanTemplate200Response =
    encodeObject << encodeAddMealPlanTemplate200ResponsePairs


encodeAddMealPlanTemplate200ResponseWithTag : ( String, String ) -> AddMealPlanTemplate200Response -> Json.Encode.Value
encodeAddMealPlanTemplate200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeAddMealPlanTemplate200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddMealPlanTemplate200ResponsePairs : AddMealPlanTemplate200Response -> List EncodedField
encodeAddMealPlanTemplate200ResponsePairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "items" (Json.Encode.list encodeAddMealPlanTemplate200ResponseItemsInner) model.items
            , encode "publishAsPublic" Json.Encode.bool model.publishAsPublic
            ]
    in
    pairs


encodeAddMealPlanTemplate200ResponseItemsInner : AddMealPlanTemplate200ResponseItemsInner -> Json.Encode.Value
encodeAddMealPlanTemplate200ResponseItemsInner =
    encodeObject << encodeAddMealPlanTemplate200ResponseItemsInnerPairs


encodeAddMealPlanTemplate200ResponseItemsInnerWithTag : ( String, String ) -> AddMealPlanTemplate200ResponseItemsInner -> Json.Encode.Value
encodeAddMealPlanTemplate200ResponseItemsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAddMealPlanTemplate200ResponseItemsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddMealPlanTemplate200ResponseItemsInnerPairs : AddMealPlanTemplate200ResponseItemsInner -> List EncodedField
encodeAddMealPlanTemplate200ResponseItemsInnerPairs model =
    let
        pairs =
            [ encode "day" Json.Encode.int model.day
            , encode "slot" Json.Encode.int model.slot
            , encode "position" Json.Encode.int model.position
            , encode "type" Json.Encode.string model.type_
            , maybeEncode "value" encodeAddMealPlanTemplate200ResponseItemsInnerValue model.value
            ]
    in
    pairs


encodeAddMealPlanTemplate200ResponseItemsInnerValue : AddMealPlanTemplate200ResponseItemsInnerValue -> Json.Encode.Value
encodeAddMealPlanTemplate200ResponseItemsInnerValue =
    encodeObject << encodeAddMealPlanTemplate200ResponseItemsInnerValuePairs


encodeAddMealPlanTemplate200ResponseItemsInnerValueWithTag : ( String, String ) -> AddMealPlanTemplate200ResponseItemsInnerValue -> Json.Encode.Value
encodeAddMealPlanTemplate200ResponseItemsInnerValueWithTag (tagField, tag) model =
    encodeObject (encodeAddMealPlanTemplate200ResponseItemsInnerValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddMealPlanTemplate200ResponseItemsInnerValuePairs : AddMealPlanTemplate200ResponseItemsInnerValue -> List EncodedField
encodeAddMealPlanTemplate200ResponseItemsInnerValuePairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "servings" Json.Encode.float model.servings
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "imageType" Json.Encode.string model.imageType
            ]
    in
    pairs


encodeAddToMealPlanRequest : AddToMealPlanRequest -> Json.Encode.Value
encodeAddToMealPlanRequest =
    encodeObject << encodeAddToMealPlanRequestPairs


encodeAddToMealPlanRequestWithTag : ( String, String ) -> AddToMealPlanRequest -> Json.Encode.Value
encodeAddToMealPlanRequestWithTag (tagField, tag) model =
    encodeObject (encodeAddToMealPlanRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddToMealPlanRequestPairs : AddToMealPlanRequest -> List EncodedField
encodeAddToMealPlanRequestPairs model =
    let
        pairs =
            [ encode "date" Json.Encode.float model.date
            , encode "slot" Json.Encode.int model.slot
            , encode "position" Json.Encode.int model.position
            , encode "type" Json.Encode.string model.type_
            , encode "value" encodeAddToMealPlanRequestValue model.value
            ]
    in
    pairs


encodeAddToMealPlanRequestValue : AddToMealPlanRequestValue -> Json.Encode.Value
encodeAddToMealPlanRequestValue =
    encodeObject << encodeAddToMealPlanRequestValuePairs


encodeAddToMealPlanRequestValueWithTag : ( String, String ) -> AddToMealPlanRequestValue -> Json.Encode.Value
encodeAddToMealPlanRequestValueWithTag (tagField, tag) model =
    encodeObject (encodeAddToMealPlanRequestValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddToMealPlanRequestValuePairs : AddToMealPlanRequestValue -> List EncodedField
encodeAddToMealPlanRequestValuePairs model =
    let
        pairs =
            [ encode "ingredients" (Json.Encode.list encodeAddToMealPlanRequestValueIngredientsInner) model.ingredients
            ]
    in
    pairs


encodeAddToMealPlanRequestValueIngredientsInner : AddToMealPlanRequestValueIngredientsInner -> Json.Encode.Value
encodeAddToMealPlanRequestValueIngredientsInner =
    encodeObject << encodeAddToMealPlanRequestValueIngredientsInnerPairs


encodeAddToMealPlanRequestValueIngredientsInnerWithTag : ( String, String ) -> AddToMealPlanRequestValueIngredientsInner -> Json.Encode.Value
encodeAddToMealPlanRequestValueIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAddToMealPlanRequestValueIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddToMealPlanRequestValueIngredientsInnerPairs : AddToMealPlanRequestValueIngredientsInner -> List EncodedField
encodeAddToMealPlanRequestValueIngredientsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeAddToShoppingListRequest : AddToShoppingListRequest -> Json.Encode.Value
encodeAddToShoppingListRequest =
    encodeObject << encodeAddToShoppingListRequestPairs


encodeAddToShoppingListRequestWithTag : ( String, String ) -> AddToShoppingListRequest -> Json.Encode.Value
encodeAddToShoppingListRequestWithTag (tagField, tag) model =
    encodeObject (encodeAddToShoppingListRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddToShoppingListRequestPairs : AddToShoppingListRequest -> List EncodedField
encodeAddToShoppingListRequestPairs model =
    let
        pairs =
            [ encode "item" Json.Encode.string model.item
            , encode "aisle" Json.Encode.string model.aisle
            , encode "parse" Json.Encode.bool model.parse
            ]
    in
    pairs


encodeAnalyzeARecipeSearchQuery200Response : AnalyzeARecipeSearchQuery200Response -> Json.Encode.Value
encodeAnalyzeARecipeSearchQuery200Response =
    encodeObject << encodeAnalyzeARecipeSearchQuery200ResponsePairs


encodeAnalyzeARecipeSearchQuery200ResponseWithTag : ( String, String ) -> AnalyzeARecipeSearchQuery200Response -> Json.Encode.Value
encodeAnalyzeARecipeSearchQuery200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeARecipeSearchQuery200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeARecipeSearchQuery200ResponsePairs : AnalyzeARecipeSearchQuery200Response -> List EncodedField
encodeAnalyzeARecipeSearchQuery200ResponsePairs model =
    let
        pairs =
            [ encode "dishes" (Json.Encode.list encodeAnalyzeARecipeSearchQuery200ResponseDishesInner) model.dishes
            , encode "ingredients" (Json.Encode.list encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInner) model.ingredients
            , encode "cuisines" (Json.Encode.list Json.Encode.string) model.cuisines
            , encode "modifiers" (Json.Encode.list Json.Encode.string) model.modifiers
            ]
    in
    pairs


encodeAnalyzeARecipeSearchQuery200ResponseDishesInner : AnalyzeARecipeSearchQuery200ResponseDishesInner -> Json.Encode.Value
encodeAnalyzeARecipeSearchQuery200ResponseDishesInner =
    encodeObject << encodeAnalyzeARecipeSearchQuery200ResponseDishesInnerPairs


encodeAnalyzeARecipeSearchQuery200ResponseDishesInnerWithTag : ( String, String ) -> AnalyzeARecipeSearchQuery200ResponseDishesInner -> Json.Encode.Value
encodeAnalyzeARecipeSearchQuery200ResponseDishesInnerWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeARecipeSearchQuery200ResponseDishesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeARecipeSearchQuery200ResponseDishesInnerPairs : AnalyzeARecipeSearchQuery200ResponseDishesInner -> List EncodedField
encodeAnalyzeARecipeSearchQuery200ResponseDishesInnerPairs model =
    let
        pairs =
            [ encode "image" Json.Encode.string model.image
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInner : AnalyzeARecipeSearchQuery200ResponseIngredientsInner -> Json.Encode.Value
encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInner =
    encodeObject << encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInnerPairs


encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInnerWithTag : ( String, String ) -> AnalyzeARecipeSearchQuery200ResponseIngredientsInner -> Json.Encode.Value
encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInnerPairs : AnalyzeARecipeSearchQuery200ResponseIngredientsInner -> List EncodedField
encodeAnalyzeARecipeSearchQuery200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ encode "image" Json.Encode.string model.image
            , encode "include" Json.Encode.bool model.include
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeAnalyzeRecipeInstructions200Response : AnalyzeRecipeInstructions200Response -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200Response =
    encodeObject << encodeAnalyzeRecipeInstructions200ResponsePairs


encodeAnalyzeRecipeInstructions200ResponseWithTag : ( String, String ) -> AnalyzeRecipeInstructions200Response -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeRecipeInstructions200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeRecipeInstructions200ResponsePairs : AnalyzeRecipeInstructions200Response -> List EncodedField
encodeAnalyzeRecipeInstructions200ResponsePairs model =
    let
        pairs =
            [ encode "parsedInstructions" (Json.Encode.list encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInner) model.parsedInstructions
            , encode "ingredients" (Json.Encode.list encodeAnalyzeRecipeInstructions200ResponseIngredientsInner) model.ingredients
            , encode "equipment" (Json.Encode.list encodeAnalyzeRecipeInstructions200ResponseIngredientsInner) model.equipment
            ]
    in
    pairs


encodeAnalyzeRecipeInstructions200ResponseIngredientsInner : AnalyzeRecipeInstructions200ResponseIngredientsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseIngredientsInner =
    encodeObject << encodeAnalyzeRecipeInstructions200ResponseIngredientsInnerPairs


encodeAnalyzeRecipeInstructions200ResponseIngredientsInnerWithTag : ( String, String ) -> AnalyzeRecipeInstructions200ResponseIngredientsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeRecipeInstructions200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeRecipeInstructions200ResponseIngredientsInnerPairs : AnalyzeRecipeInstructions200ResponseIngredientsInner -> List EncodedField
encodeAnalyzeRecipeInstructions200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.float model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInner : AnalyzeRecipeInstructions200ResponseParsedInstructionsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInner =
    encodeObject << encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerPairs


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerWithTag : ( String, String ) -> AnalyzeRecipeInstructions200ResponseParsedInstructionsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerPairs : AnalyzeRecipeInstructions200ResponseParsedInstructionsInner -> List EncodedField
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , maybeEncode "steps" (Json.Encode.list encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner) model.steps
            ]
    in
    pairs


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner : AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner =
    encodeObject << encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerWithTag : ( String, String ) -> AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs : AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner -> List EncodedField
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs model =
    let
        pairs =
            [ encode "number" Json.Encode.float model.number
            , encode "step" Json.Encode.string model.step
            , maybeEncode "ingredients" (Json.Encode.list encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) model.ingredients
            , maybeEncode "equipment" (Json.Encode.list encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) model.equipment
            ]
    in
    pairs


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner : AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner =
    encodeObject << encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerWithTag : ( String, String ) -> AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner -> Json.Encode.Value
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs : AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner -> List EncodedField
encodeAnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.float model.id
            , encode "name" Json.Encode.string model.name
            , encode "localizedName" Json.Encode.string model.localizedName
            , encode "image" Json.Encode.string model.image
            ]
    in
    pairs


encodeAnalyzeRecipeRequest : AnalyzeRecipeRequest -> Json.Encode.Value
encodeAnalyzeRecipeRequest =
    encodeObject << encodeAnalyzeRecipeRequestPairs


encodeAnalyzeRecipeRequestWithTag : ( String, String ) -> AnalyzeRecipeRequest -> Json.Encode.Value
encodeAnalyzeRecipeRequestWithTag (tagField, tag) model =
    encodeObject (encodeAnalyzeRecipeRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAnalyzeRecipeRequestPairs : AnalyzeRecipeRequest -> List EncodedField
encodeAnalyzeRecipeRequestPairs model =
    let
        pairs =
            [ maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "servings" Json.Encode.int model.servings
            , maybeEncode "ingredients" (Json.Encode.list Json.Encode.string) model.ingredients
            , maybeEncode "instructions" Json.Encode.string model.instructions
            ]
    in
    pairs


encodeAutocompleteIngredientSearch200ResponseInner : AutocompleteIngredientSearch200ResponseInner -> Json.Encode.Value
encodeAutocompleteIngredientSearch200ResponseInner =
    encodeObject << encodeAutocompleteIngredientSearch200ResponseInnerPairs


encodeAutocompleteIngredientSearch200ResponseInnerWithTag : ( String, String ) -> AutocompleteIngredientSearch200ResponseInner -> Json.Encode.Value
encodeAutocompleteIngredientSearch200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeAutocompleteIngredientSearch200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAutocompleteIngredientSearch200ResponseInnerPairs : AutocompleteIngredientSearch200ResponseInner -> List EncodedField
encodeAutocompleteIngredientSearch200ResponseInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "image" Json.Encode.string model.image
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "aisle" Json.Encode.string model.aisle
            , maybeEncode "possibleUnits" (Json.Encode.list Json.Encode.string) model.possibleUnits
            ]
    in
    pairs


encodeAutocompleteMenuItemSearch200Response : AutocompleteMenuItemSearch200Response -> Json.Encode.Value
encodeAutocompleteMenuItemSearch200Response =
    encodeObject << encodeAutocompleteMenuItemSearch200ResponsePairs


encodeAutocompleteMenuItemSearch200ResponseWithTag : ( String, String ) -> AutocompleteMenuItemSearch200Response -> Json.Encode.Value
encodeAutocompleteMenuItemSearch200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeAutocompleteMenuItemSearch200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAutocompleteMenuItemSearch200ResponsePairs : AutocompleteMenuItemSearch200Response -> List EncodedField
encodeAutocompleteMenuItemSearch200ResponsePairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeAutocompleteProductSearch200ResponseResultsInner) model.results
            ]
    in
    pairs


encodeAutocompleteProductSearch200Response : AutocompleteProductSearch200Response -> Json.Encode.Value
encodeAutocompleteProductSearch200Response =
    encodeObject << encodeAutocompleteProductSearch200ResponsePairs


encodeAutocompleteProductSearch200ResponseWithTag : ( String, String ) -> AutocompleteProductSearch200Response -> Json.Encode.Value
encodeAutocompleteProductSearch200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeAutocompleteProductSearch200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAutocompleteProductSearch200ResponsePairs : AutocompleteProductSearch200Response -> List EncodedField
encodeAutocompleteProductSearch200ResponsePairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeAutocompleteProductSearch200ResponseResultsInner) model.results
            ]
    in
    pairs


encodeAutocompleteProductSearch200ResponseResultsInner : AutocompleteProductSearch200ResponseResultsInner -> Json.Encode.Value
encodeAutocompleteProductSearch200ResponseResultsInner =
    encodeObject << encodeAutocompleteProductSearch200ResponseResultsInnerPairs


encodeAutocompleteProductSearch200ResponseResultsInnerWithTag : ( String, String ) -> AutocompleteProductSearch200ResponseResultsInner -> Json.Encode.Value
encodeAutocompleteProductSearch200ResponseResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeAutocompleteProductSearch200ResponseResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAutocompleteProductSearch200ResponseResultsInnerPairs : AutocompleteProductSearch200ResponseResultsInner -> List EncodedField
encodeAutocompleteProductSearch200ResponseResultsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            ]
    in
    pairs


encodeAutocompleteRecipeSearch200ResponseInner : AutocompleteRecipeSearch200ResponseInner -> Json.Encode.Value
encodeAutocompleteRecipeSearch200ResponseInner =
    encodeObject << encodeAutocompleteRecipeSearch200ResponseInnerPairs


encodeAutocompleteRecipeSearch200ResponseInnerWithTag : ( String, String ) -> AutocompleteRecipeSearch200ResponseInner -> Json.Encode.Value
encodeAutocompleteRecipeSearch200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeAutocompleteRecipeSearch200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAutocompleteRecipeSearch200ResponseInnerPairs : AutocompleteRecipeSearch200ResponseInner -> List EncodedField
encodeAutocompleteRecipeSearch200ResponseInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "imageType" Json.Encode.string model.imageType
            ]
    in
    pairs


encodeClassifyCuisine200Response : ClassifyCuisine200Response -> Json.Encode.Value
encodeClassifyCuisine200Response =
    encodeObject << encodeClassifyCuisine200ResponsePairs


encodeClassifyCuisine200ResponseWithTag : ( String, String ) -> ClassifyCuisine200Response -> Json.Encode.Value
encodeClassifyCuisine200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeClassifyCuisine200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClassifyCuisine200ResponsePairs : ClassifyCuisine200Response -> List EncodedField
encodeClassifyCuisine200ResponsePairs model =
    let
        pairs =
            [ encode "cuisine" Json.Encode.string model.cuisine
            , encode "cuisines" (Json.Encode.list Json.Encode.string) model.cuisines
            , encode "confidence" Json.Encode.float model.confidence
            ]
    in
    pairs


encodeClassifyGroceryProduct200Response : ClassifyGroceryProduct200Response -> Json.Encode.Value
encodeClassifyGroceryProduct200Response =
    encodeObject << encodeClassifyGroceryProduct200ResponsePairs


encodeClassifyGroceryProduct200ResponseWithTag : ( String, String ) -> ClassifyGroceryProduct200Response -> Json.Encode.Value
encodeClassifyGroceryProduct200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeClassifyGroceryProduct200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClassifyGroceryProduct200ResponsePairs : ClassifyGroceryProduct200Response -> List EncodedField
encodeClassifyGroceryProduct200ResponsePairs model =
    let
        pairs =
            [ encode "cleanTitle" Json.Encode.string model.cleanTitle
            , encode "image" Json.Encode.string model.image
            , encode "category" Json.Encode.string model.category
            , encode "breadcrumbs" (Json.Encode.list Json.Encode.string) model.breadcrumbs
            , encode "usdaCode" Json.Encode.int model.usdaCode
            ]
    in
    pairs


encodeClassifyGroceryProductBulk200ResponseInner : ClassifyGroceryProductBulk200ResponseInner -> Json.Encode.Value
encodeClassifyGroceryProductBulk200ResponseInner =
    encodeObject << encodeClassifyGroceryProductBulk200ResponseInnerPairs


encodeClassifyGroceryProductBulk200ResponseInnerWithTag : ( String, String ) -> ClassifyGroceryProductBulk200ResponseInner -> Json.Encode.Value
encodeClassifyGroceryProductBulk200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeClassifyGroceryProductBulk200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClassifyGroceryProductBulk200ResponseInnerPairs : ClassifyGroceryProductBulk200ResponseInner -> List EncodedField
encodeClassifyGroceryProductBulk200ResponseInnerPairs model =
    let
        pairs =
            [ encode "cleanTitle" Json.Encode.string model.cleanTitle
            , encode "image" Json.Encode.string model.image
            , encode "category" Json.Encode.string model.category
            , encode "breadcrumbs" (Json.Encode.list Json.Encode.string) model.breadcrumbs
            , encode "usdaCode" Json.Encode.int model.usdaCode
            ]
    in
    pairs


encodeClassifyGroceryProductBulkRequestInner : ClassifyGroceryProductBulkRequestInner -> Json.Encode.Value
encodeClassifyGroceryProductBulkRequestInner =
    encodeObject << encodeClassifyGroceryProductBulkRequestInnerPairs


encodeClassifyGroceryProductBulkRequestInnerWithTag : ( String, String ) -> ClassifyGroceryProductBulkRequestInner -> Json.Encode.Value
encodeClassifyGroceryProductBulkRequestInnerWithTag (tagField, tag) model =
    encodeObject (encodeClassifyGroceryProductBulkRequestInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClassifyGroceryProductBulkRequestInnerPairs : ClassifyGroceryProductBulkRequestInner -> List EncodedField
encodeClassifyGroceryProductBulkRequestInnerPairs model =
    let
        pairs =
            [ encode "title" Json.Encode.string model.title
            , encode "upc" Json.Encode.string model.upc
            , encode "plu_code" Json.Encode.string model.pluCode
            ]
    in
    pairs


encodeClassifyGroceryProductRequest : ClassifyGroceryProductRequest -> Json.Encode.Value
encodeClassifyGroceryProductRequest =
    encodeObject << encodeClassifyGroceryProductRequestPairs


encodeClassifyGroceryProductRequestWithTag : ( String, String ) -> ClassifyGroceryProductRequest -> Json.Encode.Value
encodeClassifyGroceryProductRequestWithTag (tagField, tag) model =
    encodeObject (encodeClassifyGroceryProductRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClassifyGroceryProductRequestPairs : ClassifyGroceryProductRequest -> List EncodedField
encodeClassifyGroceryProductRequestPairs model =
    let
        pairs =
            [ encode "title" Json.Encode.string model.title
            , encode "upc" Json.Encode.string model.upc
            , encode "plu_code" Json.Encode.string model.pluCode
            ]
    in
    pairs


encodeComputeGlycemicLoad200Response : ComputeGlycemicLoad200Response -> Json.Encode.Value
encodeComputeGlycemicLoad200Response =
    encodeObject << encodeComputeGlycemicLoad200ResponsePairs


encodeComputeGlycemicLoad200ResponseWithTag : ( String, String ) -> ComputeGlycemicLoad200Response -> Json.Encode.Value
encodeComputeGlycemicLoad200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeComputeGlycemicLoad200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComputeGlycemicLoad200ResponsePairs : ComputeGlycemicLoad200Response -> List EncodedField
encodeComputeGlycemicLoad200ResponsePairs model =
    let
        pairs =
            [ encode "totalGlycemicLoad" Json.Encode.float model.totalGlycemicLoad
            , encode "ingredients" (Json.Encode.list encodeComputeGlycemicLoad200ResponseIngredientsInner) model.ingredients
            ]
    in
    pairs


encodeComputeGlycemicLoad200ResponseIngredientsInner : ComputeGlycemicLoad200ResponseIngredientsInner -> Json.Encode.Value
encodeComputeGlycemicLoad200ResponseIngredientsInner =
    encodeObject << encodeComputeGlycemicLoad200ResponseIngredientsInnerPairs


encodeComputeGlycemicLoad200ResponseIngredientsInnerWithTag : ( String, String ) -> ComputeGlycemicLoad200ResponseIngredientsInner -> Json.Encode.Value
encodeComputeGlycemicLoad200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeComputeGlycemicLoad200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComputeGlycemicLoad200ResponseIngredientsInnerPairs : ComputeGlycemicLoad200ResponseIngredientsInner -> List EncodedField
encodeComputeGlycemicLoad200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "original" Json.Encode.string model.original
            , encode "glycemicIndex" Json.Encode.float model.glycemicIndex
            , encode "glycemicLoad" Json.Encode.float model.glycemicLoad
            ]
    in
    pairs


encodeComputeGlycemicLoadRequest : ComputeGlycemicLoadRequest -> Json.Encode.Value
encodeComputeGlycemicLoadRequest =
    encodeObject << encodeComputeGlycemicLoadRequestPairs


encodeComputeGlycemicLoadRequestWithTag : ( String, String ) -> ComputeGlycemicLoadRequest -> Json.Encode.Value
encodeComputeGlycemicLoadRequestWithTag (tagField, tag) model =
    encodeObject (encodeComputeGlycemicLoadRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComputeGlycemicLoadRequestPairs : ComputeGlycemicLoadRequest -> List EncodedField
encodeComputeGlycemicLoadRequestPairs model =
    let
        pairs =
            [ encode "ingredients" (Json.Encode.list Json.Encode.string) model.ingredients
            ]
    in
    pairs


encodeComputeIngredientAmount200Response : ComputeIngredientAmount200Response -> Json.Encode.Value
encodeComputeIngredientAmount200Response =
    encodeObject << encodeComputeIngredientAmount200ResponsePairs


encodeComputeIngredientAmount200ResponseWithTag : ( String, String ) -> ComputeIngredientAmount200Response -> Json.Encode.Value
encodeComputeIngredientAmount200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeComputeIngredientAmount200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComputeIngredientAmount200ResponsePairs : ComputeIngredientAmount200Response -> List EncodedField
encodeComputeIngredientAmount200ResponsePairs model =
    let
        pairs =
            [ encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            ]
    in
    pairs


encodeConnectUser200Response : ConnectUser200Response -> Json.Encode.Value
encodeConnectUser200Response =
    encodeObject << encodeConnectUser200ResponsePairs


encodeConnectUser200ResponseWithTag : ( String, String ) -> ConnectUser200Response -> Json.Encode.Value
encodeConnectUser200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeConnectUser200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeConnectUser200ResponsePairs : ConnectUser200Response -> List EncodedField
encodeConnectUser200ResponsePairs model =
    let
        pairs =
            [ encode "username" Json.Encode.string model.username
            , encode "hash" Json.Encode.string model.hash
            ]
    in
    pairs


encodeConnectUserRequest : ConnectUserRequest -> Json.Encode.Value
encodeConnectUserRequest =
    encodeObject << encodeConnectUserRequestPairs


encodeConnectUserRequestWithTag : ( String, String ) -> ConnectUserRequest -> Json.Encode.Value
encodeConnectUserRequestWithTag (tagField, tag) model =
    encodeObject (encodeConnectUserRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeConnectUserRequestPairs : ConnectUserRequest -> List EncodedField
encodeConnectUserRequestPairs model =
    let
        pairs =
            [ encode "username" Json.Encode.string model.username
            , encode "firstName" Json.Encode.string model.firstName
            , encode "lastName" Json.Encode.string model.lastName
            , encode "email" Json.Encode.string model.email
            ]
    in
    pairs


encodeConvertAmounts200Response : ConvertAmounts200Response -> Json.Encode.Value
encodeConvertAmounts200Response =
    encodeObject << encodeConvertAmounts200ResponsePairs


encodeConvertAmounts200ResponseWithTag : ( String, String ) -> ConvertAmounts200Response -> Json.Encode.Value
encodeConvertAmounts200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeConvertAmounts200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeConvertAmounts200ResponsePairs : ConvertAmounts200Response -> List EncodedField
encodeConvertAmounts200ResponsePairs model =
    let
        pairs =
            [ encode "sourceAmount" Json.Encode.float model.sourceAmount
            , encode "sourceUnit" Json.Encode.string model.sourceUnit
            , encode "targetAmount" Json.Encode.float model.targetAmount
            , encode "targetUnit" Json.Encode.string model.targetUnit
            , encode "answer" Json.Encode.string model.answer
            ]
    in
    pairs


encodeCreateRecipeCard200Response : CreateRecipeCard200Response -> Json.Encode.Value
encodeCreateRecipeCard200Response =
    encodeObject << encodeCreateRecipeCard200ResponsePairs


encodeCreateRecipeCard200ResponseWithTag : ( String, String ) -> CreateRecipeCard200Response -> Json.Encode.Value
encodeCreateRecipeCard200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateRecipeCard200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateRecipeCard200ResponsePairs : CreateRecipeCard200Response -> List EncodedField
encodeCreateRecipeCard200ResponsePairs model =
    let
        pairs =
            [ encode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeDetectFoodInText200Response : DetectFoodInText200Response -> Json.Encode.Value
encodeDetectFoodInText200Response =
    encodeObject << encodeDetectFoodInText200ResponsePairs


encodeDetectFoodInText200ResponseWithTag : ( String, String ) -> DetectFoodInText200Response -> Json.Encode.Value
encodeDetectFoodInText200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeDetectFoodInText200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDetectFoodInText200ResponsePairs : DetectFoodInText200Response -> List EncodedField
encodeDetectFoodInText200ResponsePairs model =
    let
        pairs =
            [ encode "annotations" (Json.Encode.list encodeDetectFoodInText200ResponseAnnotationsInner) model.annotations
            ]
    in
    pairs


encodeDetectFoodInText200ResponseAnnotationsInner : DetectFoodInText200ResponseAnnotationsInner -> Json.Encode.Value
encodeDetectFoodInText200ResponseAnnotationsInner =
    encodeObject << encodeDetectFoodInText200ResponseAnnotationsInnerPairs


encodeDetectFoodInText200ResponseAnnotationsInnerWithTag : ( String, String ) -> DetectFoodInText200ResponseAnnotationsInner -> Json.Encode.Value
encodeDetectFoodInText200ResponseAnnotationsInnerWithTag (tagField, tag) model =
    encodeObject (encodeDetectFoodInText200ResponseAnnotationsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDetectFoodInText200ResponseAnnotationsInnerPairs : DetectFoodInText200ResponseAnnotationsInner -> List EncodedField
encodeDetectFoodInText200ResponseAnnotationsInnerPairs model =
    let
        pairs =
            [ encode "annotation" Json.Encode.string model.annotation
            , encode "image" Json.Encode.string model.image
            , encode "tag" Json.Encode.string model.tag
            ]
    in
    pairs


encodeGenerateMealPlan200Response : GenerateMealPlan200Response -> Json.Encode.Value
encodeGenerateMealPlan200Response =
    encodeObject << encodeGenerateMealPlan200ResponsePairs


encodeGenerateMealPlan200ResponseWithTag : ( String, String ) -> GenerateMealPlan200Response -> Json.Encode.Value
encodeGenerateMealPlan200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGenerateMealPlan200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateMealPlan200ResponsePairs : GenerateMealPlan200Response -> List EncodedField
encodeGenerateMealPlan200ResponsePairs model =
    let
        pairs =
            [ encode "meals" (Json.Encode.list encodeGetSimilarRecipes200ResponseInner) model.meals
            , encode "nutrients" encodeGenerateMealPlan200ResponseNutrients model.nutrients
            ]
    in
    pairs


encodeGenerateMealPlan200ResponseNutrients : GenerateMealPlan200ResponseNutrients -> Json.Encode.Value
encodeGenerateMealPlan200ResponseNutrients =
    encodeObject << encodeGenerateMealPlan200ResponseNutrientsPairs


encodeGenerateMealPlan200ResponseNutrientsWithTag : ( String, String ) -> GenerateMealPlan200ResponseNutrients -> Json.Encode.Value
encodeGenerateMealPlan200ResponseNutrientsWithTag (tagField, tag) model =
    encodeObject (encodeGenerateMealPlan200ResponseNutrientsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateMealPlan200ResponseNutrientsPairs : GenerateMealPlan200ResponseNutrients -> List EncodedField
encodeGenerateMealPlan200ResponseNutrientsPairs model =
    let
        pairs =
            [ encode "calories" Json.Encode.float model.calories
            , encode "carbohydrates" Json.Encode.float model.carbohydrates
            , encode "fat" Json.Encode.float model.fat
            , encode "protein" Json.Encode.float model.protein
            ]
    in
    pairs


encodeGenerateShoppingList200Response : GenerateShoppingList200Response -> Json.Encode.Value
encodeGenerateShoppingList200Response =
    encodeObject << encodeGenerateShoppingList200ResponsePairs


encodeGenerateShoppingList200ResponseWithTag : ( String, String ) -> GenerateShoppingList200Response -> Json.Encode.Value
encodeGenerateShoppingList200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGenerateShoppingList200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateShoppingList200ResponsePairs : GenerateShoppingList200Response -> List EncodedField
encodeGenerateShoppingList200ResponsePairs model =
    let
        pairs =
            [ encode "aisles" (Json.Encode.list encodeGetShoppingList200ResponseAislesInner) model.aisles
            , encode "cost" Json.Encode.float model.cost
            , encode "startDate" Json.Encode.float model.startDate
            , encode "endDate" Json.Encode.float model.endDate
            ]
    in
    pairs


encodeGetARandomFoodJoke200Response : GetARandomFoodJoke200Response -> Json.Encode.Value
encodeGetARandomFoodJoke200Response =
    encodeObject << encodeGetARandomFoodJoke200ResponsePairs


encodeGetARandomFoodJoke200ResponseWithTag : ( String, String ) -> GetARandomFoodJoke200Response -> Json.Encode.Value
encodeGetARandomFoodJoke200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetARandomFoodJoke200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetARandomFoodJoke200ResponsePairs : GetARandomFoodJoke200Response -> List EncodedField
encodeGetARandomFoodJoke200ResponsePairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeGetAnalyzedRecipeInstructions200Response : GetAnalyzedRecipeInstructions200Response -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200Response =
    encodeObject << encodeGetAnalyzedRecipeInstructions200ResponsePairs


encodeGetAnalyzedRecipeInstructions200ResponseWithTag : ( String, String ) -> GetAnalyzedRecipeInstructions200Response -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetAnalyzedRecipeInstructions200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetAnalyzedRecipeInstructions200ResponsePairs : GetAnalyzedRecipeInstructions200Response -> List EncodedField
encodeGetAnalyzedRecipeInstructions200ResponsePairs model =
    let
        pairs =
            [ encode "parsedInstructions" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner) model.parsedInstructions
            , encode "ingredients" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInner) model.ingredients
            , encode "equipment" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInner) model.equipment
            ]
    in
    pairs


encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInner : GetAnalyzedRecipeInstructions200ResponseIngredientsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInner =
    encodeObject << encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInnerPairs


encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInnerWithTag : ( String, String ) -> GetAnalyzedRecipeInstructions200ResponseIngredientsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInnerPairs : GetAnalyzedRecipeInstructions200ResponseIngredientsInner -> List EncodedField
encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner : GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner =
    encodeObject << encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerPairs


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerWithTag : ( String, String ) -> GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerPairs : GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner -> List EncodedField
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , maybeEncode "steps" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner) model.steps
            ]
    in
    pairs


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner : GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner =
    encodeObject << encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerWithTag : ( String, String ) -> GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs : GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner -> List EncodedField
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerPairs model =
    let
        pairs =
            [ encode "number" Json.Encode.float model.number
            , encode "step" Json.Encode.string model.step
            , maybeEncode "ingredients" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) model.ingredients
            , maybeEncode "equipment" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner) model.equipment
            ]
    in
    pairs


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner : GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner =
    encodeObject << encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerWithTag : ( String, String ) -> GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner -> Json.Encode.Value
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs : GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner -> List EncodedField
encodeGetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "localizedName" Json.Encode.string model.localizedName
            , encode "image" Json.Encode.string model.image
            ]
    in
    pairs


encodeGetComparableProducts200Response : GetComparableProducts200Response -> Json.Encode.Value
encodeGetComparableProducts200Response =
    encodeObject << encodeGetComparableProducts200ResponsePairs


encodeGetComparableProducts200ResponseWithTag : ( String, String ) -> GetComparableProducts200Response -> Json.Encode.Value
encodeGetComparableProducts200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetComparableProducts200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetComparableProducts200ResponsePairs : GetComparableProducts200Response -> List EncodedField
encodeGetComparableProducts200ResponsePairs model =
    let
        pairs =
            [ encode "comparableProducts" encodeGetComparableProducts200ResponseComparableProducts model.comparableProducts
            ]
    in
    pairs


encodeGetComparableProducts200ResponseComparableProducts : GetComparableProducts200ResponseComparableProducts -> Json.Encode.Value
encodeGetComparableProducts200ResponseComparableProducts =
    encodeObject << encodeGetComparableProducts200ResponseComparableProductsPairs


encodeGetComparableProducts200ResponseComparableProductsWithTag : ( String, String ) -> GetComparableProducts200ResponseComparableProducts -> Json.Encode.Value
encodeGetComparableProducts200ResponseComparableProductsWithTag (tagField, tag) model =
    encodeObject (encodeGetComparableProducts200ResponseComparableProductsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetComparableProducts200ResponseComparableProductsPairs : GetComparableProducts200ResponseComparableProducts -> List EncodedField
encodeGetComparableProducts200ResponseComparableProductsPairs model =
    let
        pairs =
            [ encode "calories" (Json.Encode.list encodeObject) model.calories
            , encode "likes" (Json.Encode.list encodeObject) model.likes
            , encode "price" (Json.Encode.list encodeObject) model.price
            , encode "protein" (Json.Encode.list encodeGetComparableProducts200ResponseComparableProductsProteinInner) model.protein
            , encode "spoonacularScore" (Json.Encode.list encodeGetComparableProducts200ResponseComparableProductsProteinInner) model.spoonacularScore
            , encode "sugar" (Json.Encode.list encodeObject) model.sugar
            ]
    in
    pairs


encodeGetComparableProducts200ResponseComparableProductsProteinInner : GetComparableProducts200ResponseComparableProductsProteinInner -> Json.Encode.Value
encodeGetComparableProducts200ResponseComparableProductsProteinInner =
    encodeObject << encodeGetComparableProducts200ResponseComparableProductsProteinInnerPairs


encodeGetComparableProducts200ResponseComparableProductsProteinInnerWithTag : ( String, String ) -> GetComparableProducts200ResponseComparableProductsProteinInner -> Json.Encode.Value
encodeGetComparableProducts200ResponseComparableProductsProteinInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetComparableProducts200ResponseComparableProductsProteinInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetComparableProducts200ResponseComparableProductsProteinInnerPairs : GetComparableProducts200ResponseComparableProductsProteinInner -> List EncodedField
encodeGetComparableProducts200ResponseComparableProductsProteinInnerPairs model =
    let
        pairs =
            [ encode "difference" Json.Encode.float model.difference
            , encode "id" Json.Encode.int model.id
            , encode "image" Json.Encode.string model.image
            , encode "title" Json.Encode.string model.title
            ]
    in
    pairs


encodeGetConversationSuggests200Response : GetConversationSuggests200Response -> Json.Encode.Value
encodeGetConversationSuggests200Response =
    encodeObject << encodeGetConversationSuggests200ResponsePairs


encodeGetConversationSuggests200ResponseWithTag : ( String, String ) -> GetConversationSuggests200Response -> Json.Encode.Value
encodeGetConversationSuggests200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetConversationSuggests200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetConversationSuggests200ResponsePairs : GetConversationSuggests200Response -> List EncodedField
encodeGetConversationSuggests200ResponsePairs model =
    let
        pairs =
            [ encode "suggests" encodeGetConversationSuggests200ResponseSuggests model.suggests
            , encode "words" (Json.Encode.list Json.Encode.string) model.words
            ]
    in
    pairs


encodeGetConversationSuggests200ResponseSuggests : GetConversationSuggests200ResponseSuggests -> Json.Encode.Value
encodeGetConversationSuggests200ResponseSuggests =
    encodeObject << encodeGetConversationSuggests200ResponseSuggestsPairs


encodeGetConversationSuggests200ResponseSuggestsWithTag : ( String, String ) -> GetConversationSuggests200ResponseSuggests -> Json.Encode.Value
encodeGetConversationSuggests200ResponseSuggestsWithTag (tagField, tag) model =
    encodeObject (encodeGetConversationSuggests200ResponseSuggestsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetConversationSuggests200ResponseSuggestsPairs : GetConversationSuggests200ResponseSuggests -> List EncodedField
encodeGetConversationSuggests200ResponseSuggestsPairs model =
    let
        pairs =
            [ encode "_" (Json.Encode.list encodeGetConversationSuggests200ResponseSuggestsInner) model.
            ]
    in
    pairs


encodeGetConversationSuggests200ResponseSuggestsInner : GetConversationSuggests200ResponseSuggestsInner -> Json.Encode.Value
encodeGetConversationSuggests200ResponseSuggestsInner =
    encodeObject << encodeGetConversationSuggests200ResponseSuggestsInnerPairs


encodeGetConversationSuggests200ResponseSuggestsInnerWithTag : ( String, String ) -> GetConversationSuggests200ResponseSuggestsInner -> Json.Encode.Value
encodeGetConversationSuggests200ResponseSuggestsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetConversationSuggests200ResponseSuggestsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetConversationSuggests200ResponseSuggestsInnerPairs : GetConversationSuggests200ResponseSuggestsInner -> List EncodedField
encodeGetConversationSuggests200ResponseSuggestsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeGetDishPairingForWine200Response : GetDishPairingForWine200Response -> Json.Encode.Value
encodeGetDishPairingForWine200Response =
    encodeObject << encodeGetDishPairingForWine200ResponsePairs


encodeGetDishPairingForWine200ResponseWithTag : ( String, String ) -> GetDishPairingForWine200Response -> Json.Encode.Value
encodeGetDishPairingForWine200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetDishPairingForWine200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetDishPairingForWine200ResponsePairs : GetDishPairingForWine200Response -> List EncodedField
encodeGetDishPairingForWine200ResponsePairs model =
    let
        pairs =
            [ encode "pairings" (Json.Encode.list Json.Encode.string) model.pairings
            , encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeGetIngredientInformation200Response : GetIngredientInformation200Response -> Json.Encode.Value
encodeGetIngredientInformation200Response =
    encodeObject << encodeGetIngredientInformation200ResponsePairs


encodeGetIngredientInformation200ResponseWithTag : ( String, String ) -> GetIngredientInformation200Response -> Json.Encode.Value
encodeGetIngredientInformation200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetIngredientInformation200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetIngredientInformation200ResponsePairs : GetIngredientInformation200Response -> List EncodedField
encodeGetIngredientInformation200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "original" Json.Encode.string model.original
            , encode "originalName" Json.Encode.string model.originalName
            , encode "name" Json.Encode.string model.name
            , encode "nameClean" Json.Encode.string model.nameClean
            , encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            , encode "unitShort" Json.Encode.string model.unitShort
            , encode "unitLong" Json.Encode.string model.unitLong
            , encode "possibleUnits" (Json.Encode.list Json.Encode.string) model.possibleUnits
            , encode "estimatedCost" encodeParseIngredients200ResponseInnerEstimatedCost model.estimatedCost
            , encode "consistency" Json.Encode.string model.consistency
            , encode "shoppingListUnits" (Json.Encode.list Json.Encode.string) model.shoppingListUnits
            , encode "aisle" Json.Encode.string model.aisle
            , encode "image" Json.Encode.string model.image
            , encode "meta" (Json.Encode.list encodeObject) model.meta
            , encode "nutrition" encodeGetIngredientInformation200ResponseNutrition model.nutrition
            , encode "categoryPath" (Json.Encode.list Json.Encode.string) model.categoryPath
            ]
    in
    pairs


encodeGetIngredientInformation200ResponseNutrition : GetIngredientInformation200ResponseNutrition -> Json.Encode.Value
encodeGetIngredientInformation200ResponseNutrition =
    encodeObject << encodeGetIngredientInformation200ResponseNutritionPairs


encodeGetIngredientInformation200ResponseNutritionWithTag : ( String, String ) -> GetIngredientInformation200ResponseNutrition -> Json.Encode.Value
encodeGetIngredientInformation200ResponseNutritionWithTag (tagField, tag) model =
    encodeObject (encodeGetIngredientInformation200ResponseNutritionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetIngredientInformation200ResponseNutritionPairs : GetIngredientInformation200ResponseNutrition -> List EncodedField
encodeGetIngredientInformation200ResponseNutritionPairs model =
    let
        pairs =
            [ encode "nutrients" (Json.Encode.list encodeParseIngredients200ResponseInnerNutritionNutrientsInner) model.nutrients
            , encode "properties" (Json.Encode.list encodeParseIngredients200ResponseInnerNutritionPropertiesInner) model.properties
            , encode "caloricBreakdown" encodeParseIngredients200ResponseInnerNutritionCaloricBreakdown model.caloricBreakdown
            , encode "weightPerServing" encodeParseIngredients200ResponseInnerNutritionWeightPerServing model.weightPerServing
            ]
    in
    pairs


encodeGetIngredientSubstitutes200Response : GetIngredientSubstitutes200Response -> Json.Encode.Value
encodeGetIngredientSubstitutes200Response =
    encodeObject << encodeGetIngredientSubstitutes200ResponsePairs


encodeGetIngredientSubstitutes200ResponseWithTag : ( String, String ) -> GetIngredientSubstitutes200Response -> Json.Encode.Value
encodeGetIngredientSubstitutes200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetIngredientSubstitutes200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetIngredientSubstitutes200ResponsePairs : GetIngredientSubstitutes200Response -> List EncodedField
encodeGetIngredientSubstitutes200ResponsePairs model =
    let
        pairs =
            [ encode "ingredient" Json.Encode.string model.ingredient
            , encode "substitutes" (Json.Encode.list Json.Encode.string) model.substitutes
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeGetMealPlanTemplate200Response : GetMealPlanTemplate200Response -> Json.Encode.Value
encodeGetMealPlanTemplate200Response =
    encodeObject << encodeGetMealPlanTemplate200ResponsePairs


encodeGetMealPlanTemplate200ResponseWithTag : ( String, String ) -> GetMealPlanTemplate200Response -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanTemplate200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanTemplate200ResponsePairs : GetMealPlanTemplate200Response -> List EncodedField
encodeGetMealPlanTemplate200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "days" (Json.Encode.list encodeGetMealPlanTemplate200ResponseDaysInner) model.days
            ]
    in
    pairs


encodeGetMealPlanTemplate200ResponseDaysInner : GetMealPlanTemplate200ResponseDaysInner -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseDaysInner =
    encodeObject << encodeGetMealPlanTemplate200ResponseDaysInnerPairs


encodeGetMealPlanTemplate200ResponseDaysInnerWithTag : ( String, String ) -> GetMealPlanTemplate200ResponseDaysInner -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseDaysInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanTemplate200ResponseDaysInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanTemplate200ResponseDaysInnerPairs : GetMealPlanTemplate200ResponseDaysInner -> List EncodedField
encodeGetMealPlanTemplate200ResponseDaysInnerPairs model =
    let
        pairs =
            [ maybeEncode "nutritionSummary" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummary
            , maybeEncode "nutritionSummaryBreakfast" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummaryBreakfast
            , maybeEncode "nutritionSummaryLunch" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummaryLunch
            , maybeEncode "nutritionSummaryDinner" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummaryDinner
            , encode "day" Json.Encode.string model.day
            , maybeEncode "items" (Json.Encode.list encodeGetMealPlanTemplate200ResponseDaysInnerItemsInner) model.items
            ]
    in
    pairs


encodeGetMealPlanTemplate200ResponseDaysInnerItemsInner : GetMealPlanTemplate200ResponseDaysInnerItemsInner -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseDaysInnerItemsInner =
    encodeObject << encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerPairs


encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerWithTag : ( String, String ) -> GetMealPlanTemplate200ResponseDaysInnerItemsInner -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerPairs : GetMealPlanTemplate200ResponseDaysInnerItemsInner -> List EncodedField
encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "slot" Json.Encode.int model.slot
            , encode "position" Json.Encode.int model.position
            , encode "type" Json.Encode.string model.type_
            , maybeEncode "value" encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValue model.value
            ]
    in
    pairs


encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValue : GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValue =
    encodeObject << encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValuePairs


encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValueWithTag : ( String, String ) -> GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue -> Json.Encode.Value
encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValueWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValuePairs : GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue -> List EncodedField
encodeGetMealPlanTemplate200ResponseDaysInnerItemsInnerValuePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.float model.id
            , encode "title" Json.Encode.string model.title
            , encode "imageType" Json.Encode.string model.imageType
            ]
    in
    pairs


encodeGetMealPlanTemplates200Response : GetMealPlanTemplates200Response -> Json.Encode.Value
encodeGetMealPlanTemplates200Response =
    encodeObject << encodeGetMealPlanTemplates200ResponsePairs


encodeGetMealPlanTemplates200ResponseWithTag : ( String, String ) -> GetMealPlanTemplates200Response -> Json.Encode.Value
encodeGetMealPlanTemplates200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanTemplates200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanTemplates200ResponsePairs : GetMealPlanTemplates200Response -> List EncodedField
encodeGetMealPlanTemplates200ResponsePairs model =
    let
        pairs =
            [ encode "templates" (Json.Encode.list encodeGetAnalyzedRecipeInstructions200ResponseIngredientsInner) model.templates
            ]
    in
    pairs


encodeGetMealPlanWeek200Response : GetMealPlanWeek200Response -> Json.Encode.Value
encodeGetMealPlanWeek200Response =
    encodeObject << encodeGetMealPlanWeek200ResponsePairs


encodeGetMealPlanWeek200ResponseWithTag : ( String, String ) -> GetMealPlanWeek200Response -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanWeek200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanWeek200ResponsePairs : GetMealPlanWeek200Response -> List EncodedField
encodeGetMealPlanWeek200ResponsePairs model =
    let
        pairs =
            [ encode "days" (Json.Encode.list encodeGetMealPlanWeek200ResponseDaysInner) model.days
            ]
    in
    pairs


encodeGetMealPlanWeek200ResponseDaysInner : GetMealPlanWeek200ResponseDaysInner -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInner =
    encodeObject << encodeGetMealPlanWeek200ResponseDaysInnerPairs


encodeGetMealPlanWeek200ResponseDaysInnerWithTag : ( String, String ) -> GetMealPlanWeek200ResponseDaysInner -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanWeek200ResponseDaysInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanWeek200ResponseDaysInnerPairs : GetMealPlanWeek200ResponseDaysInner -> List EncodedField
encodeGetMealPlanWeek200ResponseDaysInnerPairs model =
    let
        pairs =
            [ maybeEncode "nutritionSummary" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummary
            , maybeEncode "nutritionSummaryBreakfast" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummaryBreakfast
            , maybeEncode "nutritionSummaryLunch" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummaryLunch
            , maybeEncode "nutritionSummaryDinner" encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary model.nutritionSummaryDinner
            , encode "date" Json.Encode.float model.date
            , encode "day" Json.Encode.string model.day
            , maybeEncode "items" (Json.Encode.list encodeGetMealPlanWeek200ResponseDaysInnerItemsInner) model.items
            ]
    in
    pairs


encodeGetMealPlanWeek200ResponseDaysInnerItemsInner : GetMealPlanWeek200ResponseDaysInnerItemsInner -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerItemsInner =
    encodeObject << encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerPairs


encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerWithTag : ( String, String ) -> GetMealPlanWeek200ResponseDaysInnerItemsInner -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerPairs : GetMealPlanWeek200ResponseDaysInnerItemsInner -> List EncodedField
encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "slot" Json.Encode.int model.slot
            , encode "position" Json.Encode.int model.position
            , encode "type" Json.Encode.string model.type_
            , maybeEncode "value" encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValue model.value
            ]
    in
    pairs


encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValue : GetMealPlanWeek200ResponseDaysInnerItemsInnerValue -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValue =
    encodeObject << encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValuePairs


encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValueWithTag : ( String, String ) -> GetMealPlanWeek200ResponseDaysInnerItemsInnerValue -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValueWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValuePairs : GetMealPlanWeek200ResponseDaysInnerItemsInnerValue -> List EncodedField
encodeGetMealPlanWeek200ResponseDaysInnerItemsInnerValuePairs model =
    let
        pairs =
            [ encode "servings" Json.Encode.float model.servings
            , encode "id" Json.Encode.float model.id
            , encode "title" Json.Encode.string model.title
            , encode "imageType" Json.Encode.string model.imageType
            ]
    in
    pairs


encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary : GetMealPlanWeek200ResponseDaysInnerNutritionSummary -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummary =
    encodeObject << encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryPairs


encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryWithTag : ( String, String ) -> GetMealPlanWeek200ResponseDaysInnerNutritionSummary -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryPairs : GetMealPlanWeek200ResponseDaysInnerNutritionSummary -> List EncodedField
encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryPairs model =
    let
        pairs =
            [ encode "nutrients" (Json.Encode.list encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner) model.nutrients
            ]
    in
    pairs


encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner : GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner =
    encodeObject << encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerPairs


encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerWithTag : ( String, String ) -> GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner -> Json.Encode.Value
encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerPairs : GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner -> List EncodedField
encodeGetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            , encode "percentDailyNeeds" Json.Encode.float model.percentDailyNeeds
            ]
    in
    pairs


encodeGetMenuItemInformation200Response : GetMenuItemInformation200Response -> Json.Encode.Value
encodeGetMenuItemInformation200Response =
    encodeObject << encodeGetMenuItemInformation200ResponsePairs


encodeGetMenuItemInformation200ResponseWithTag : ( String, String ) -> GetMenuItemInformation200Response -> Json.Encode.Value
encodeGetMenuItemInformation200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetMenuItemInformation200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMenuItemInformation200ResponsePairs : GetMenuItemInformation200Response -> List EncodedField
encodeGetMenuItemInformation200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "restaurantChain" Json.Encode.string model.restaurantChain
            , encode "nutrition" encodeSearchGroceryProductsByUPC200ResponseNutrition model.nutrition
            , encode "badges" (Json.Encode.list Json.Encode.string) model.badges
            , encode "breadcrumbs" (Json.Encode.list Json.Encode.string) model.breadcrumbs
            , maybeEncode "generatedText" Json.Encode.string model.generatedText
            , encode "imageType" Json.Encode.string model.imageType
            , encode "likes" Json.Encode.float model.likes
            , encode "servings" encodeSearchGroceryProductsByUPC200ResponseServings model.servings
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "spoonacularScore" Json.Encode.float model.spoonacularScore
            ]
    in
    pairs


encodeGetProductInformation200Response : GetProductInformation200Response -> Json.Encode.Value
encodeGetProductInformation200Response =
    encodeObject << encodeGetProductInformation200ResponsePairs


encodeGetProductInformation200ResponseWithTag : ( String, String ) -> GetProductInformation200Response -> Json.Encode.Value
encodeGetProductInformation200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetProductInformation200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetProductInformation200ResponsePairs : GetProductInformation200Response -> List EncodedField
encodeGetProductInformation200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "breadcrumbs" (Json.Encode.list Json.Encode.string) model.breadcrumbs
            , encode "imageType" Json.Encode.string model.imageType
            , encode "badges" (Json.Encode.list Json.Encode.string) model.badges
            , encode "importantBadges" (Json.Encode.list Json.Encode.string) model.importantBadges
            , encode "ingredientCount" Json.Encode.int model.ingredientCount
            , maybeEncode "generatedText" Json.Encode.string model.generatedText
            , encode "ingredientList" Json.Encode.string model.ingredientList
            , encode "ingredients" (Json.Encode.list encodeGetProductInformation200ResponseIngredientsInner) model.ingredients
            , encode "likes" Json.Encode.float model.likes
            , encode "aisle" Json.Encode.string model.aisle
            , encode "nutrition" encodeSearchGroceryProductsByUPC200ResponseNutrition model.nutrition
            , encode "price" Json.Encode.float model.price
            , encode "servings" encodeSearchGroceryProductsByUPC200ResponseServings model.servings
            , encode "spoonacularScore" Json.Encode.float model.spoonacularScore
            ]
    in
    pairs


encodeGetProductInformation200ResponseIngredientsInner : GetProductInformation200ResponseIngredientsInner -> Json.Encode.Value
encodeGetProductInformation200ResponseIngredientsInner =
    encodeObject << encodeGetProductInformation200ResponseIngredientsInnerPairs


encodeGetProductInformation200ResponseIngredientsInnerWithTag : ( String, String ) -> GetProductInformation200ResponseIngredientsInner -> Json.Encode.Value
encodeGetProductInformation200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetProductInformation200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetProductInformation200ResponseIngredientsInnerPairs : GetProductInformation200ResponseIngredientsInner -> List EncodedField
encodeGetProductInformation200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ maybeEncode "description" Json.Encode.string model.description
            , encode "name" Json.Encode.string model.name
            , maybeEncode "safety_level" Json.Encode.string model.safetyLevel
            ]
    in
    pairs


encodeGetRandomFoodTrivia200Response : GetRandomFoodTrivia200Response -> Json.Encode.Value
encodeGetRandomFoodTrivia200Response =
    encodeObject << encodeGetRandomFoodTrivia200ResponsePairs


encodeGetRandomFoodTrivia200ResponseWithTag : ( String, String ) -> GetRandomFoodTrivia200Response -> Json.Encode.Value
encodeGetRandomFoodTrivia200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRandomFoodTrivia200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRandomFoodTrivia200ResponsePairs : GetRandomFoodTrivia200Response -> List EncodedField
encodeGetRandomFoodTrivia200ResponsePairs model =
    let
        pairs =
            [ encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeGetRandomRecipes200Response : GetRandomRecipes200Response -> Json.Encode.Value
encodeGetRandomRecipes200Response =
    encodeObject << encodeGetRandomRecipes200ResponsePairs


encodeGetRandomRecipes200ResponseWithTag : ( String, String ) -> GetRandomRecipes200Response -> Json.Encode.Value
encodeGetRandomRecipes200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRandomRecipes200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRandomRecipes200ResponsePairs : GetRandomRecipes200Response -> List EncodedField
encodeGetRandomRecipes200ResponsePairs model =
    let
        pairs =
            [ encode "recipes" (Json.Encode.list encodeGetRandomRecipes200ResponseRecipesInner) model.recipes
            ]
    in
    pairs


encodeGetRandomRecipes200ResponseRecipesInner : GetRandomRecipes200ResponseRecipesInner -> Json.Encode.Value
encodeGetRandomRecipes200ResponseRecipesInner =
    encodeObject << encodeGetRandomRecipes200ResponseRecipesInnerPairs


encodeGetRandomRecipes200ResponseRecipesInnerWithTag : ( String, String ) -> GetRandomRecipes200ResponseRecipesInner -> Json.Encode.Value
encodeGetRandomRecipes200ResponseRecipesInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRandomRecipes200ResponseRecipesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRandomRecipes200ResponseRecipesInnerPairs : GetRandomRecipes200ResponseRecipesInner -> List EncodedField
encodeGetRandomRecipes200ResponseRecipesInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            , encode "servings" Json.Encode.float model.servings
            , encode "readyInMinutes" Json.Encode.int model.readyInMinutes
            , encode "license" Json.Encode.string model.license
            , encode "sourceName" Json.Encode.string model.sourceName
            , encode "sourceUrl" Json.Encode.string model.sourceUrl
            , encode "spoonacularSourceUrl" Json.Encode.string model.spoonacularSourceUrl
            , encode "aggregateLikes" Json.Encode.float model.aggregateLikes
            , encode "healthScore" Json.Encode.float model.healthScore
            , encode "spoonacularScore" Json.Encode.float model.spoonacularScore
            , encode "pricePerServing" Json.Encode.float model.pricePerServing
            , maybeEncode "analyzedInstructions" (Json.Encode.list encodeObject) model.analyzedInstructions
            , encode "cheap" Json.Encode.bool model.cheap
            , encode "creditsText" Json.Encode.string model.creditsText
            , maybeEncode "cuisines" (Json.Encode.list Json.Encode.string) model.cuisines
            , encode "dairyFree" Json.Encode.bool model.dairyFree
            , maybeEncode "diets" (Json.Encode.list Json.Encode.string) model.diets
            , encode "gaps" Json.Encode.string model.gaps
            , encode "glutenFree" Json.Encode.bool model.glutenFree
            , encode "instructions" Json.Encode.string model.instructions
            , encode "ketogenic" Json.Encode.bool model.ketogenic
            , encode "lowFodmap" Json.Encode.bool model.lowFodmap
            , maybeEncode "occasions" (Json.Encode.list Json.Encode.string) model.occasions
            , encode "sustainable" Json.Encode.bool model.sustainable
            , encode "vegan" Json.Encode.bool model.vegan
            , encode "vegetarian" Json.Encode.bool model.vegetarian
            , encode "veryHealthy" Json.Encode.bool model.veryHealthy
            , encode "veryPopular" Json.Encode.bool model.veryPopular
            , encode "whole30" Json.Encode.bool model.whole30
            , encode "weightWatcherSmartPoints" Json.Encode.float model.weightWatcherSmartPoints
            , maybeEncode "dishTypes" (Json.Encode.list Json.Encode.string) model.dishTypes
            , maybeEncode "extendedIngredients" (Json.Encode.list encodeGetRecipeInformation200ResponseExtendedIngredientsInner) model.extendedIngredients
            , encode "summary" Json.Encode.string model.summary
            , maybeEncode "winePairing" encodeGetRecipeInformation200ResponseWinePairing model.winePairing
            ]
    in
    pairs


encodeGetRecipeEquipmentByID200Response : GetRecipeEquipmentByID200Response -> Json.Encode.Value
encodeGetRecipeEquipmentByID200Response =
    encodeObject << encodeGetRecipeEquipmentByID200ResponsePairs


encodeGetRecipeEquipmentByID200ResponseWithTag : ( String, String ) -> GetRecipeEquipmentByID200Response -> Json.Encode.Value
encodeGetRecipeEquipmentByID200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeEquipmentByID200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeEquipmentByID200ResponsePairs : GetRecipeEquipmentByID200Response -> List EncodedField
encodeGetRecipeEquipmentByID200ResponsePairs model =
    let
        pairs =
            [ encode "equipment" (Json.Encode.list encodeGetRecipeEquipmentByID200ResponseEquipmentInner) model.equipment
            ]
    in
    pairs


encodeGetRecipeEquipmentByID200ResponseEquipmentInner : GetRecipeEquipmentByID200ResponseEquipmentInner -> Json.Encode.Value
encodeGetRecipeEquipmentByID200ResponseEquipmentInner =
    encodeObject << encodeGetRecipeEquipmentByID200ResponseEquipmentInnerPairs


encodeGetRecipeEquipmentByID200ResponseEquipmentInnerWithTag : ( String, String ) -> GetRecipeEquipmentByID200ResponseEquipmentInner -> Json.Encode.Value
encodeGetRecipeEquipmentByID200ResponseEquipmentInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeEquipmentByID200ResponseEquipmentInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeEquipmentByID200ResponseEquipmentInnerPairs : GetRecipeEquipmentByID200ResponseEquipmentInner -> List EncodedField
encodeGetRecipeEquipmentByID200ResponseEquipmentInnerPairs model =
    let
        pairs =
            [ encode "image" Json.Encode.string model.image
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeGetRecipeInformation200Response : GetRecipeInformation200Response -> Json.Encode.Value
encodeGetRecipeInformation200Response =
    encodeObject << encodeGetRecipeInformation200ResponsePairs


encodeGetRecipeInformation200ResponseWithTag : ( String, String ) -> GetRecipeInformation200Response -> Json.Encode.Value
encodeGetRecipeInformation200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformation200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformation200ResponsePairs : GetRecipeInformation200Response -> List EncodedField
encodeGetRecipeInformation200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            , encode "servings" Json.Encode.float model.servings
            , encode "readyInMinutes" Json.Encode.int model.readyInMinutes
            , encode "license" Json.Encode.string model.license
            , encode "sourceName" Json.Encode.string model.sourceName
            , encode "sourceUrl" Json.Encode.string model.sourceUrl
            , encode "spoonacularSourceUrl" Json.Encode.string model.spoonacularSourceUrl
            , encode "aggregateLikes" Json.Encode.int model.aggregateLikes
            , encode "healthScore" Json.Encode.float model.healthScore
            , encode "spoonacularScore" Json.Encode.float model.spoonacularScore
            , encode "pricePerServing" Json.Encode.float model.pricePerServing
            , encode "analyzedInstructions" (Json.Encode.list encodeObject) model.analyzedInstructions
            , encode "cheap" Json.Encode.bool model.cheap
            , encode "creditsText" Json.Encode.string model.creditsText
            , encode "cuisines" (Json.Encode.list Json.Encode.string) model.cuisines
            , encode "dairyFree" Json.Encode.bool model.dairyFree
            , encode "diets" (Json.Encode.list Json.Encode.string) model.diets
            , encode "gaps" Json.Encode.string model.gaps
            , encode "glutenFree" Json.Encode.bool model.glutenFree
            , encode "instructions" Json.Encode.string model.instructions
            , encode "ketogenic" Json.Encode.bool model.ketogenic
            , encode "lowFodmap" Json.Encode.bool model.lowFodmap
            , encode "occasions" (Json.Encode.list Json.Encode.string) model.occasions
            , encode "sustainable" Json.Encode.bool model.sustainable
            , encode "vegan" Json.Encode.bool model.vegan
            , encode "vegetarian" Json.Encode.bool model.vegetarian
            , encode "veryHealthy" Json.Encode.bool model.veryHealthy
            , encode "veryPopular" Json.Encode.bool model.veryPopular
            , encode "whole30" Json.Encode.bool model.whole30
            , encode "weightWatcherSmartPoints" Json.Encode.float model.weightWatcherSmartPoints
            , encode "dishTypes" (Json.Encode.list Json.Encode.string) model.dishTypes
            , encode "extendedIngredients" (Json.Encode.list encodeGetRecipeInformation200ResponseExtendedIngredientsInner) model.extendedIngredients
            , encode "summary" Json.Encode.string model.summary
            , encode "winePairing" encodeGetRecipeInformation200ResponseWinePairing model.winePairing
            ]
    in
    pairs


encodeGetRecipeInformation200ResponseExtendedIngredientsInner : GetRecipeInformation200ResponseExtendedIngredientsInner -> Json.Encode.Value
encodeGetRecipeInformation200ResponseExtendedIngredientsInner =
    encodeObject << encodeGetRecipeInformation200ResponseExtendedIngredientsInnerPairs


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerWithTag : ( String, String ) -> GetRecipeInformation200ResponseExtendedIngredientsInner -> Json.Encode.Value
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformation200ResponseExtendedIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerPairs : GetRecipeInformation200ResponseExtendedIngredientsInner -> List EncodedField
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerPairs model =
    let
        pairs =
            [ encode "aisle" Json.Encode.string model.aisle
            , encode "amount" Json.Encode.float model.amount
            , encode "consitency" Json.Encode.string model.consitency
            , encode "id" Json.Encode.int model.id
            , encode "image" Json.Encode.string model.image
            , maybeEncode "measures" encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasures model.measures
            , maybeEncode "meta" (Json.Encode.list Json.Encode.string) model.meta
            , encode "name" Json.Encode.string model.name
            , encode "original" Json.Encode.string model.original
            , encode "originalName" Json.Encode.string model.originalName
            , encode "unit" Json.Encode.string model.unit
            ]
    in
    pairs


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasures : GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures -> Json.Encode.Value
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasures =
    encodeObject << encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresPairs


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresWithTag : ( String, String ) -> GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures -> Json.Encode.Value
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresPairs : GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures -> List EncodedField
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresPairs model =
    let
        pairs =
            [ encode "metric" encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric model.metric
            , encode "us" encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric model.us
            ]
    in
    pairs


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric : GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric -> Json.Encode.Value
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric =
    encodeObject << encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricPairs


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricWithTag : ( String, String ) -> GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric -> Json.Encode.Value
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricPairs : GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric -> List EncodedField
encodeGetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricPairs model =
    let
        pairs =
            [ encode "amount" Json.Encode.float model.amount
            , encode "unitLong" Json.Encode.string model.unitLong
            , encode "unitShort" Json.Encode.string model.unitShort
            ]
    in
    pairs


encodeGetRecipeInformation200ResponseWinePairing : GetRecipeInformation200ResponseWinePairing -> Json.Encode.Value
encodeGetRecipeInformation200ResponseWinePairing =
    encodeObject << encodeGetRecipeInformation200ResponseWinePairingPairs


encodeGetRecipeInformation200ResponseWinePairingWithTag : ( String, String ) -> GetRecipeInformation200ResponseWinePairing -> Json.Encode.Value
encodeGetRecipeInformation200ResponseWinePairingWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformation200ResponseWinePairingPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformation200ResponseWinePairingPairs : GetRecipeInformation200ResponseWinePairing -> List EncodedField
encodeGetRecipeInformation200ResponseWinePairingPairs model =
    let
        pairs =
            [ encode "pairedWines" (Json.Encode.list Json.Encode.string) model.pairedWines
            , encode "pairingText" Json.Encode.string model.pairingText
            , encode "productMatches" (Json.Encode.list encodeGetRecipeInformation200ResponseWinePairingProductMatchesInner) model.productMatches
            ]
    in
    pairs


encodeGetRecipeInformation200ResponseWinePairingProductMatchesInner : GetRecipeInformation200ResponseWinePairingProductMatchesInner -> Json.Encode.Value
encodeGetRecipeInformation200ResponseWinePairingProductMatchesInner =
    encodeObject << encodeGetRecipeInformation200ResponseWinePairingProductMatchesInnerPairs


encodeGetRecipeInformation200ResponseWinePairingProductMatchesInnerWithTag : ( String, String ) -> GetRecipeInformation200ResponseWinePairingProductMatchesInner -> Json.Encode.Value
encodeGetRecipeInformation200ResponseWinePairingProductMatchesInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformation200ResponseWinePairingProductMatchesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformation200ResponseWinePairingProductMatchesInnerPairs : GetRecipeInformation200ResponseWinePairingProductMatchesInner -> List EncodedField
encodeGetRecipeInformation200ResponseWinePairingProductMatchesInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "description" Json.Encode.string model.description
            , encode "price" Json.Encode.string model.price
            , encode "imageUrl" Json.Encode.string model.imageUrl
            , encode "averageRating" Json.Encode.float model.averageRating
            , encode "ratingCount" Json.Encode.int model.ratingCount
            , encode "score" Json.Encode.float model.score
            , encode "link" Json.Encode.string model.link
            ]
    in
    pairs


encodeGetRecipeInformationBulk200ResponseInner : GetRecipeInformationBulk200ResponseInner -> Json.Encode.Value
encodeGetRecipeInformationBulk200ResponseInner =
    encodeObject << encodeGetRecipeInformationBulk200ResponseInnerPairs


encodeGetRecipeInformationBulk200ResponseInnerWithTag : ( String, String ) -> GetRecipeInformationBulk200ResponseInner -> Json.Encode.Value
encodeGetRecipeInformationBulk200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeInformationBulk200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeInformationBulk200ResponseInnerPairs : GetRecipeInformationBulk200ResponseInner -> List EncodedField
encodeGetRecipeInformationBulk200ResponseInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            , encode "servings" Json.Encode.float model.servings
            , encode "readyInMinutes" Json.Encode.int model.readyInMinutes
            , encode "license" Json.Encode.string model.license
            , encode "sourceName" Json.Encode.string model.sourceName
            , encode "sourceUrl" Json.Encode.string model.sourceUrl
            , encode "spoonacularSourceUrl" Json.Encode.string model.spoonacularSourceUrl
            , encode "aggregateLikes" Json.Encode.int model.aggregateLikes
            , encode "healthScore" Json.Encode.float model.healthScore
            , encode "spoonacularScore" Json.Encode.float model.spoonacularScore
            , encode "pricePerServing" Json.Encode.float model.pricePerServing
            , encode "analyzedInstructions" (Json.Encode.list Json.Encode.string) model.analyzedInstructions
            , encode "cheap" Json.Encode.bool model.cheap
            , encode "creditsText" Json.Encode.string model.creditsText
            , encode "cuisines" (Json.Encode.list Json.Encode.string) model.cuisines
            , encode "dairyFree" Json.Encode.bool model.dairyFree
            , encode "diets" (Json.Encode.list Json.Encode.string) model.diets
            , encode "gaps" Json.Encode.string model.gaps
            , encode "glutenFree" Json.Encode.bool model.glutenFree
            , encode "instructions" Json.Encode.string model.instructions
            , encode "ketogenic" Json.Encode.bool model.ketogenic
            , encode "lowFodmap" Json.Encode.bool model.lowFodmap
            , encode "occasions" (Json.Encode.list Json.Encode.string) model.occasions
            , encode "sustainable" Json.Encode.bool model.sustainable
            , encode "vegan" Json.Encode.bool model.vegan
            , encode "vegetarian" Json.Encode.bool model.vegetarian
            , encode "veryHealthy" Json.Encode.bool model.veryHealthy
            , encode "veryPopular" Json.Encode.bool model.veryPopular
            , encode "whole30" Json.Encode.bool model.whole30
            , encode "weightWatcherSmartPoints" Json.Encode.float model.weightWatcherSmartPoints
            , encode "dishTypes" (Json.Encode.list Json.Encode.string) model.dishTypes
            , encode "extendedIngredients" (Json.Encode.list encodeGetRecipeInformation200ResponseExtendedIngredientsInner) model.extendedIngredients
            , encode "summary" Json.Encode.string model.summary
            , encode "winePairing" encodeGetRecipeInformation200ResponseWinePairing model.winePairing
            ]
    in
    pairs


encodeGetRecipeIngredientsByID200Response : GetRecipeIngredientsByID200Response -> Json.Encode.Value
encodeGetRecipeIngredientsByID200Response =
    encodeObject << encodeGetRecipeIngredientsByID200ResponsePairs


encodeGetRecipeIngredientsByID200ResponseWithTag : ( String, String ) -> GetRecipeIngredientsByID200Response -> Json.Encode.Value
encodeGetRecipeIngredientsByID200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeIngredientsByID200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeIngredientsByID200ResponsePairs : GetRecipeIngredientsByID200Response -> List EncodedField
encodeGetRecipeIngredientsByID200ResponsePairs model =
    let
        pairs =
            [ encode "ingredients" (Json.Encode.list encodeGetRecipeIngredientsByID200ResponseIngredientsInner) model.ingredients
            ]
    in
    pairs


encodeGetRecipeIngredientsByID200ResponseIngredientsInner : GetRecipeIngredientsByID200ResponseIngredientsInner -> Json.Encode.Value
encodeGetRecipeIngredientsByID200ResponseIngredientsInner =
    encodeObject << encodeGetRecipeIngredientsByID200ResponseIngredientsInnerPairs


encodeGetRecipeIngredientsByID200ResponseIngredientsInnerWithTag : ( String, String ) -> GetRecipeIngredientsByID200ResponseIngredientsInner -> Json.Encode.Value
encodeGetRecipeIngredientsByID200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeIngredientsByID200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeIngredientsByID200ResponseIngredientsInnerPairs : GetRecipeIngredientsByID200ResponseIngredientsInner -> List EncodedField
encodeGetRecipeIngredientsByID200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ maybeEncode "amount" encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount model.amount
            , encode "image" Json.Encode.string model.image
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeGetRecipeNutritionWidgetByID200Response : GetRecipeNutritionWidgetByID200Response -> Json.Encode.Value
encodeGetRecipeNutritionWidgetByID200Response =
    encodeObject << encodeGetRecipeNutritionWidgetByID200ResponsePairs


encodeGetRecipeNutritionWidgetByID200ResponseWithTag : ( String, String ) -> GetRecipeNutritionWidgetByID200Response -> Json.Encode.Value
encodeGetRecipeNutritionWidgetByID200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeNutritionWidgetByID200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeNutritionWidgetByID200ResponsePairs : GetRecipeNutritionWidgetByID200Response -> List EncodedField
encodeGetRecipeNutritionWidgetByID200ResponsePairs model =
    let
        pairs =
            [ encode "calories" Json.Encode.string model.calories
            , encode "carbs" Json.Encode.string model.carbs
            , encode "fat" Json.Encode.string model.fat
            , encode "protein" Json.Encode.string model.protein
            , encode "bad" (Json.Encode.list encodeGetRecipeNutritionWidgetByID200ResponseBadInner) model.bad
            , encode "good" (Json.Encode.list encodeGetRecipeNutritionWidgetByID200ResponseGoodInner) model.good
            ]
    in
    pairs


encodeGetRecipeNutritionWidgetByID200ResponseBadInner : GetRecipeNutritionWidgetByID200ResponseBadInner -> Json.Encode.Value
encodeGetRecipeNutritionWidgetByID200ResponseBadInner =
    encodeObject << encodeGetRecipeNutritionWidgetByID200ResponseBadInnerPairs


encodeGetRecipeNutritionWidgetByID200ResponseBadInnerWithTag : ( String, String ) -> GetRecipeNutritionWidgetByID200ResponseBadInner -> Json.Encode.Value
encodeGetRecipeNutritionWidgetByID200ResponseBadInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeNutritionWidgetByID200ResponseBadInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeNutritionWidgetByID200ResponseBadInnerPairs : GetRecipeNutritionWidgetByID200ResponseBadInner -> List EncodedField
encodeGetRecipeNutritionWidgetByID200ResponseBadInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "amount" Json.Encode.string model.amount
            , encode "indented" Json.Encode.bool model.indented
            , encode "percentOfDailyNeeds" Json.Encode.float model.percentOfDailyNeeds
            ]
    in
    pairs


encodeGetRecipeNutritionWidgetByID200ResponseGoodInner : GetRecipeNutritionWidgetByID200ResponseGoodInner -> Json.Encode.Value
encodeGetRecipeNutritionWidgetByID200ResponseGoodInner =
    encodeObject << encodeGetRecipeNutritionWidgetByID200ResponseGoodInnerPairs


encodeGetRecipeNutritionWidgetByID200ResponseGoodInnerWithTag : ( String, String ) -> GetRecipeNutritionWidgetByID200ResponseGoodInner -> Json.Encode.Value
encodeGetRecipeNutritionWidgetByID200ResponseGoodInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeNutritionWidgetByID200ResponseGoodInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeNutritionWidgetByID200ResponseGoodInnerPairs : GetRecipeNutritionWidgetByID200ResponseGoodInner -> List EncodedField
encodeGetRecipeNutritionWidgetByID200ResponseGoodInnerPairs model =
    let
        pairs =
            [ encode "amount" Json.Encode.string model.amount
            , encode "indented" Json.Encode.bool model.indented
            , encode "percentOfDailyNeeds" Json.Encode.float model.percentOfDailyNeeds
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeGetRecipePriceBreakdownByID200Response : GetRecipePriceBreakdownByID200Response -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200Response =
    encodeObject << encodeGetRecipePriceBreakdownByID200ResponsePairs


encodeGetRecipePriceBreakdownByID200ResponseWithTag : ( String, String ) -> GetRecipePriceBreakdownByID200Response -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipePriceBreakdownByID200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipePriceBreakdownByID200ResponsePairs : GetRecipePriceBreakdownByID200Response -> List EncodedField
encodeGetRecipePriceBreakdownByID200ResponsePairs model =
    let
        pairs =
            [ encode "ingredients" (Json.Encode.list encodeGetRecipePriceBreakdownByID200ResponseIngredientsInner) model.ingredients
            , encode "totalCost" Json.Encode.float model.totalCost
            , encode "totalCostPerServing" Json.Encode.float model.totalCostPerServing
            ]
    in
    pairs


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInner : GetRecipePriceBreakdownByID200ResponseIngredientsInner -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInner =
    encodeObject << encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerPairs


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerWithTag : ( String, String ) -> GetRecipePriceBreakdownByID200ResponseIngredientsInner -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerPairs : GetRecipePriceBreakdownByID200ResponseIngredientsInner -> List EncodedField
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ maybeEncode "amount" encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount model.amount
            , encode "image" Json.Encode.string model.image
            , encode "name" Json.Encode.string model.name
            , encode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount : GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount =
    encodeObject << encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountPairs


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountWithTag : ( String, String ) -> GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountPairs : GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount -> List EncodedField
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountPairs model =
    let
        pairs =
            [ encode "metric" encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric model.metric
            , encode "us" encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric model.us
            ]
    in
    pairs


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric : GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric =
    encodeObject << encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricPairs


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricWithTag : ( String, String ) -> GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric -> Json.Encode.Value
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricPairs : GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric -> List EncodedField
encodeGetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricPairs model =
    let
        pairs =
            [ encode "unit" Json.Encode.string model.unit
            , encode "value" Json.Encode.float model.value
            ]
    in
    pairs


encodeGetRecipeTasteByID200Response : GetRecipeTasteByID200Response -> Json.Encode.Value
encodeGetRecipeTasteByID200Response =
    encodeObject << encodeGetRecipeTasteByID200ResponsePairs


encodeGetRecipeTasteByID200ResponseWithTag : ( String, String ) -> GetRecipeTasteByID200Response -> Json.Encode.Value
encodeGetRecipeTasteByID200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRecipeTasteByID200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRecipeTasteByID200ResponsePairs : GetRecipeTasteByID200Response -> List EncodedField
encodeGetRecipeTasteByID200ResponsePairs model =
    let
        pairs =
            [ encode "sweetness" Json.Encode.float model.sweetness
            , encode "saltiness" Json.Encode.float model.saltiness
            , encode "sourness" Json.Encode.float model.sourness
            , encode "bitterness" Json.Encode.float model.bitterness
            , encode "savoriness" Json.Encode.float model.savoriness
            , encode "fattiness" Json.Encode.float model.fattiness
            , encode "spiciness" Json.Encode.float model.spiciness
            ]
    in
    pairs


encodeGetShoppingList200Response : GetShoppingList200Response -> Json.Encode.Value
encodeGetShoppingList200Response =
    encodeObject << encodeGetShoppingList200ResponsePairs


encodeGetShoppingList200ResponseWithTag : ( String, String ) -> GetShoppingList200Response -> Json.Encode.Value
encodeGetShoppingList200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetShoppingList200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetShoppingList200ResponsePairs : GetShoppingList200Response -> List EncodedField
encodeGetShoppingList200ResponsePairs model =
    let
        pairs =
            [ encode "aisles" (Json.Encode.list encodeGetShoppingList200ResponseAislesInner) model.aisles
            , encode "cost" Json.Encode.float model.cost
            , encode "startDate" Json.Encode.float model.startDate
            , encode "endDate" Json.Encode.float model.endDate
            ]
    in
    pairs


encodeGetShoppingList200ResponseAislesInner : GetShoppingList200ResponseAislesInner -> Json.Encode.Value
encodeGetShoppingList200ResponseAislesInner =
    encodeObject << encodeGetShoppingList200ResponseAislesInnerPairs


encodeGetShoppingList200ResponseAislesInnerWithTag : ( String, String ) -> GetShoppingList200ResponseAislesInner -> Json.Encode.Value
encodeGetShoppingList200ResponseAislesInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetShoppingList200ResponseAislesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetShoppingList200ResponseAislesInnerPairs : GetShoppingList200ResponseAislesInner -> List EncodedField
encodeGetShoppingList200ResponseAislesInnerPairs model =
    let
        pairs =
            [ encode "aisle" Json.Encode.string model.aisle
            , maybeEncode "items" (Json.Encode.list encodeGetShoppingList200ResponseAislesInnerItemsInner) model.items
            ]
    in
    pairs


encodeGetShoppingList200ResponseAislesInnerItemsInner : GetShoppingList200ResponseAislesInnerItemsInner -> Json.Encode.Value
encodeGetShoppingList200ResponseAislesInnerItemsInner =
    encodeObject << encodeGetShoppingList200ResponseAislesInnerItemsInnerPairs


encodeGetShoppingList200ResponseAislesInnerItemsInnerWithTag : ( String, String ) -> GetShoppingList200ResponseAislesInnerItemsInner -> Json.Encode.Value
encodeGetShoppingList200ResponseAislesInnerItemsInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetShoppingList200ResponseAislesInnerItemsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetShoppingList200ResponseAislesInnerItemsInnerPairs : GetShoppingList200ResponseAislesInnerItemsInner -> List EncodedField
encodeGetShoppingList200ResponseAislesInnerItemsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , maybeEncode "measures" encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasures model.measures
            , encode "pantryItem" Json.Encode.bool model.pantryItem
            , encode "aisle" Json.Encode.string model.aisle
            , encode "cost" Json.Encode.float model.cost
            , encode "ingredientId" Json.Encode.int model.ingredientId
            ]
    in
    pairs


encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasures : GetShoppingList200ResponseAislesInnerItemsInnerMeasures -> Json.Encode.Value
encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasures =
    encodeObject << encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasuresPairs


encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasuresWithTag : ( String, String ) -> GetShoppingList200ResponseAislesInnerItemsInnerMeasures -> Json.Encode.Value
encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasuresWithTag (tagField, tag) model =
    encodeObject (encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasuresPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasuresPairs : GetShoppingList200ResponseAislesInnerItemsInnerMeasures -> List EncodedField
encodeGetShoppingList200ResponseAislesInnerItemsInnerMeasuresPairs model =
    let
        pairs =
            [ encode "original" encodeParseIngredients200ResponseInnerNutritionWeightPerServing model.original
            , encode "metric" encodeParseIngredients200ResponseInnerNutritionWeightPerServing model.metric
            , encode "us" encodeParseIngredients200ResponseInnerNutritionWeightPerServing model.us
            ]
    in
    pairs


encodeGetSimilarRecipes200ResponseInner : GetSimilarRecipes200ResponseInner -> Json.Encode.Value
encodeGetSimilarRecipes200ResponseInner =
    encodeObject << encodeGetSimilarRecipes200ResponseInnerPairs


encodeGetSimilarRecipes200ResponseInnerWithTag : ( String, String ) -> GetSimilarRecipes200ResponseInner -> Json.Encode.Value
encodeGetSimilarRecipes200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetSimilarRecipes200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetSimilarRecipes200ResponseInnerPairs : GetSimilarRecipes200ResponseInner -> List EncodedField
encodeGetSimilarRecipes200ResponseInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "imageType" Json.Encode.string model.imageType
            , encode "readyInMinutes" Json.Encode.int model.readyInMinutes
            , encode "servings" Json.Encode.float model.servings
            , encode "sourceUrl" Json.Encode.string model.sourceUrl
            ]
    in
    pairs


encodeGetWineDescription200Response : GetWineDescription200Response -> Json.Encode.Value
encodeGetWineDescription200Response =
    encodeObject << encodeGetWineDescription200ResponsePairs


encodeGetWineDescription200ResponseWithTag : ( String, String ) -> GetWineDescription200Response -> Json.Encode.Value
encodeGetWineDescription200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetWineDescription200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWineDescription200ResponsePairs : GetWineDescription200Response -> List EncodedField
encodeGetWineDescription200ResponsePairs model =
    let
        pairs =
            [ encode "wineDescription" Json.Encode.string model.wineDescription
            ]
    in
    pairs


encodeGetWinePairing200Response : GetWinePairing200Response -> Json.Encode.Value
encodeGetWinePairing200Response =
    encodeObject << encodeGetWinePairing200ResponsePairs


encodeGetWinePairing200ResponseWithTag : ( String, String ) -> GetWinePairing200Response -> Json.Encode.Value
encodeGetWinePairing200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetWinePairing200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWinePairing200ResponsePairs : GetWinePairing200Response -> List EncodedField
encodeGetWinePairing200ResponsePairs model =
    let
        pairs =
            [ encode "pairedWines" (Json.Encode.list Json.Encode.string) model.pairedWines
            , encode "pairingText" Json.Encode.string model.pairingText
            , encode "productMatches" (Json.Encode.list encodeGetWinePairing200ResponseProductMatchesInner) model.productMatches
            ]
    in
    pairs


encodeGetWinePairing200ResponseProductMatchesInner : GetWinePairing200ResponseProductMatchesInner -> Json.Encode.Value
encodeGetWinePairing200ResponseProductMatchesInner =
    encodeObject << encodeGetWinePairing200ResponseProductMatchesInnerPairs


encodeGetWinePairing200ResponseProductMatchesInnerWithTag : ( String, String ) -> GetWinePairing200ResponseProductMatchesInner -> Json.Encode.Value
encodeGetWinePairing200ResponseProductMatchesInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetWinePairing200ResponseProductMatchesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWinePairing200ResponseProductMatchesInnerPairs : GetWinePairing200ResponseProductMatchesInner -> List EncodedField
encodeGetWinePairing200ResponseProductMatchesInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "averageRating" Json.Encode.float model.averageRating
            , maybeEncode "description" Json.Encode.string model.description
            , encode "imageUrl" Json.Encode.string model.imageUrl
            , encode "link" Json.Encode.string model.link
            , encode "price" Json.Encode.string model.price
            , encode "ratingCount" Json.Encode.int model.ratingCount
            , encode "score" Json.Encode.float model.score
            ]
    in
    pairs


encodeGetWineRecommendation200Response : GetWineRecommendation200Response -> Json.Encode.Value
encodeGetWineRecommendation200Response =
    encodeObject << encodeGetWineRecommendation200ResponsePairs


encodeGetWineRecommendation200ResponseWithTag : ( String, String ) -> GetWineRecommendation200Response -> Json.Encode.Value
encodeGetWineRecommendation200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetWineRecommendation200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWineRecommendation200ResponsePairs : GetWineRecommendation200Response -> List EncodedField
encodeGetWineRecommendation200ResponsePairs model =
    let
        pairs =
            [ encode "recommendedWines" (Json.Encode.list encodeGetWineRecommendation200ResponseRecommendedWinesInner) model.recommendedWines
            , encode "totalFound" Json.Encode.int model.totalFound
            ]
    in
    pairs


encodeGetWineRecommendation200ResponseRecommendedWinesInner : GetWineRecommendation200ResponseRecommendedWinesInner -> Json.Encode.Value
encodeGetWineRecommendation200ResponseRecommendedWinesInner =
    encodeObject << encodeGetWineRecommendation200ResponseRecommendedWinesInnerPairs


encodeGetWineRecommendation200ResponseRecommendedWinesInnerWithTag : ( String, String ) -> GetWineRecommendation200ResponseRecommendedWinesInner -> Json.Encode.Value
encodeGetWineRecommendation200ResponseRecommendedWinesInnerWithTag (tagField, tag) model =
    encodeObject (encodeGetWineRecommendation200ResponseRecommendedWinesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWineRecommendation200ResponseRecommendedWinesInnerPairs : GetWineRecommendation200ResponseRecommendedWinesInner -> List EncodedField
encodeGetWineRecommendation200ResponseRecommendedWinesInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "averageRating" Json.Encode.float model.averageRating
            , encode "description" Json.Encode.string model.description
            , encode "imageUrl" Json.Encode.string model.imageUrl
            , encode "link" Json.Encode.string model.link
            , encode "price" Json.Encode.string model.price
            , encode "ratingCount" Json.Encode.int model.ratingCount
            , encode "score" Json.Encode.float model.score
            ]
    in
    pairs


encodeGuessNutritionByDishName200Response : GuessNutritionByDishName200Response -> Json.Encode.Value
encodeGuessNutritionByDishName200Response =
    encodeObject << encodeGuessNutritionByDishName200ResponsePairs


encodeGuessNutritionByDishName200ResponseWithTag : ( String, String ) -> GuessNutritionByDishName200Response -> Json.Encode.Value
encodeGuessNutritionByDishName200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeGuessNutritionByDishName200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGuessNutritionByDishName200ResponsePairs : GuessNutritionByDishName200Response -> List EncodedField
encodeGuessNutritionByDishName200ResponsePairs model =
    let
        pairs =
            [ encode "calories" encodeGuessNutritionByDishName200ResponseCalories model.calories
            , encode "carbs" encodeGuessNutritionByDishName200ResponseCalories model.carbs
            , encode "fat" encodeGuessNutritionByDishName200ResponseCalories model.fat
            , encode "protein" encodeGuessNutritionByDishName200ResponseCalories model.protein
            , encode "recipesUsed" Json.Encode.int model.recipesUsed
            ]
    in
    pairs


encodeGuessNutritionByDishName200ResponseCalories : GuessNutritionByDishName200ResponseCalories -> Json.Encode.Value
encodeGuessNutritionByDishName200ResponseCalories =
    encodeObject << encodeGuessNutritionByDishName200ResponseCaloriesPairs


encodeGuessNutritionByDishName200ResponseCaloriesWithTag : ( String, String ) -> GuessNutritionByDishName200ResponseCalories -> Json.Encode.Value
encodeGuessNutritionByDishName200ResponseCaloriesWithTag (tagField, tag) model =
    encodeObject (encodeGuessNutritionByDishName200ResponseCaloriesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGuessNutritionByDishName200ResponseCaloriesPairs : GuessNutritionByDishName200ResponseCalories -> List EncodedField
encodeGuessNutritionByDishName200ResponseCaloriesPairs model =
    let
        pairs =
            [ encode "confidenceRange95Percent" encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent model.confidenceRange95Percent
            , encode "standardDeviation" Json.Encode.float model.standardDeviation
            , encode "unit" Json.Encode.string model.unit
            , encode "value" Json.Encode.float model.value
            ]
    in
    pairs


encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent : GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent -> Json.Encode.Value
encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent =
    encodeObject << encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentPairs


encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentWithTag : ( String, String ) -> GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent -> Json.Encode.Value
encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentWithTag (tagField, tag) model =
    encodeObject (encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentPairs : GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent -> List EncodedField
encodeGuessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentPairs model =
    let
        pairs =
            [ encode "max" Json.Encode.float model.max
            , encode "min" Json.Encode.float model.min
            ]
    in
    pairs


encodeImageAnalysisByURL200Response : ImageAnalysisByURL200Response -> Json.Encode.Value
encodeImageAnalysisByURL200Response =
    encodeObject << encodeImageAnalysisByURL200ResponsePairs


encodeImageAnalysisByURL200ResponseWithTag : ( String, String ) -> ImageAnalysisByURL200Response -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeImageAnalysisByURL200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageAnalysisByURL200ResponsePairs : ImageAnalysisByURL200Response -> List EncodedField
encodeImageAnalysisByURL200ResponsePairs model =
    let
        pairs =
            [ encode "nutrition" encodeImageAnalysisByURL200ResponseNutrition model.nutrition
            , encode "category" encodeImageAnalysisByURL200ResponseCategory model.category
            , encode "recipes" (Json.Encode.list encodeImageAnalysisByURL200ResponseRecipesInner) model.recipes
            ]
    in
    pairs


encodeImageAnalysisByURL200ResponseCategory : ImageAnalysisByURL200ResponseCategory -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseCategory =
    encodeObject << encodeImageAnalysisByURL200ResponseCategoryPairs


encodeImageAnalysisByURL200ResponseCategoryWithTag : ( String, String ) -> ImageAnalysisByURL200ResponseCategory -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseCategoryWithTag (tagField, tag) model =
    encodeObject (encodeImageAnalysisByURL200ResponseCategoryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageAnalysisByURL200ResponseCategoryPairs : ImageAnalysisByURL200ResponseCategory -> List EncodedField
encodeImageAnalysisByURL200ResponseCategoryPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "probability" Json.Encode.float model.probability
            ]
    in
    pairs


encodeImageAnalysisByURL200ResponseNutrition : ImageAnalysisByURL200ResponseNutrition -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseNutrition =
    encodeObject << encodeImageAnalysisByURL200ResponseNutritionPairs


encodeImageAnalysisByURL200ResponseNutritionWithTag : ( String, String ) -> ImageAnalysisByURL200ResponseNutrition -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseNutritionWithTag (tagField, tag) model =
    encodeObject (encodeImageAnalysisByURL200ResponseNutritionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageAnalysisByURL200ResponseNutritionPairs : ImageAnalysisByURL200ResponseNutrition -> List EncodedField
encodeImageAnalysisByURL200ResponseNutritionPairs model =
    let
        pairs =
            [ encode "recipesUsed" Json.Encode.int model.recipesUsed
            , encode "calories" encodeImageAnalysisByURL200ResponseNutritionCalories model.calories
            , encode "fat" encodeImageAnalysisByURL200ResponseNutritionCalories model.fat
            , encode "protein" encodeImageAnalysisByURL200ResponseNutritionCalories model.protein
            , encode "carbs" encodeImageAnalysisByURL200ResponseNutritionCalories model.carbs
            ]
    in
    pairs


encodeImageAnalysisByURL200ResponseNutritionCalories : ImageAnalysisByURL200ResponseNutritionCalories -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseNutritionCalories =
    encodeObject << encodeImageAnalysisByURL200ResponseNutritionCaloriesPairs


encodeImageAnalysisByURL200ResponseNutritionCaloriesWithTag : ( String, String ) -> ImageAnalysisByURL200ResponseNutritionCalories -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseNutritionCaloriesWithTag (tagField, tag) model =
    encodeObject (encodeImageAnalysisByURL200ResponseNutritionCaloriesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageAnalysisByURL200ResponseNutritionCaloriesPairs : ImageAnalysisByURL200ResponseNutritionCalories -> List EncodedField
encodeImageAnalysisByURL200ResponseNutritionCaloriesPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "unit" Json.Encode.string model.unit
            , encode "confidenceRange95Percent" encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent model.confidenceRange95Percent
            , encode "standardDeviation" Json.Encode.float model.standardDeviation
            ]
    in
    pairs


encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent : ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent =
    encodeObject << encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentPairs


encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentWithTag : ( String, String ) -> ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentWithTag (tagField, tag) model =
    encodeObject (encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentPairs : ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent -> List EncodedField
encodeImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentPairs model =
    let
        pairs =
            [ encode "min" Json.Encode.float model.min
            , encode "max" Json.Encode.float model.max
            ]
    in
    pairs


encodeImageAnalysisByURL200ResponseRecipesInner : ImageAnalysisByURL200ResponseRecipesInner -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseRecipesInner =
    encodeObject << encodeImageAnalysisByURL200ResponseRecipesInnerPairs


encodeImageAnalysisByURL200ResponseRecipesInnerWithTag : ( String, String ) -> ImageAnalysisByURL200ResponseRecipesInner -> Json.Encode.Value
encodeImageAnalysisByURL200ResponseRecipesInnerWithTag (tagField, tag) model =
    encodeObject (encodeImageAnalysisByURL200ResponseRecipesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageAnalysisByURL200ResponseRecipesInnerPairs : ImageAnalysisByURL200ResponseRecipesInner -> List EncodedField
encodeImageAnalysisByURL200ResponseRecipesInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "imageType" Json.Encode.string model.imageType
            , encode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeImageClassificationByURL200Response : ImageClassificationByURL200Response -> Json.Encode.Value
encodeImageClassificationByURL200Response =
    encodeObject << encodeImageClassificationByURL200ResponsePairs


encodeImageClassificationByURL200ResponseWithTag : ( String, String ) -> ImageClassificationByURL200Response -> Json.Encode.Value
encodeImageClassificationByURL200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeImageClassificationByURL200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeImageClassificationByURL200ResponsePairs : ImageClassificationByURL200Response -> List EncodedField
encodeImageClassificationByURL200ResponsePairs model =
    let
        pairs =
            [ encode "category" Json.Encode.string model.category
            , encode "probability" Json.Encode.float model.probability
            ]
    in
    pairs


encodeIngredientSearch200Response : IngredientSearch200Response -> Json.Encode.Value
encodeIngredientSearch200Response =
    encodeObject << encodeIngredientSearch200ResponsePairs


encodeIngredientSearch200ResponseWithTag : ( String, String ) -> IngredientSearch200Response -> Json.Encode.Value
encodeIngredientSearch200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeIngredientSearch200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIngredientSearch200ResponsePairs : IngredientSearch200Response -> List EncodedField
encodeIngredientSearch200ResponsePairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeIngredientSearch200ResponseResultsInner) model.results
            , encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            , encode "totalResults" Json.Encode.int model.totalResults
            ]
    in
    pairs


encodeIngredientSearch200ResponseResultsInner : IngredientSearch200ResponseResultsInner -> Json.Encode.Value
encodeIngredientSearch200ResponseResultsInner =
    encodeObject << encodeIngredientSearch200ResponseResultsInnerPairs


encodeIngredientSearch200ResponseResultsInnerWithTag : ( String, String ) -> IngredientSearch200ResponseResultsInner -> Json.Encode.Value
encodeIngredientSearch200ResponseResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeIngredientSearch200ResponseResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIngredientSearch200ResponseResultsInnerPairs : IngredientSearch200ResponseResultsInner -> List EncodedField
encodeIngredientSearch200ResponseResultsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "image" Json.Encode.string model.image
            ]
    in
    pairs


encodeMapIngredientsToGroceryProducts200ResponseInner : MapIngredientsToGroceryProducts200ResponseInner -> Json.Encode.Value
encodeMapIngredientsToGroceryProducts200ResponseInner =
    encodeObject << encodeMapIngredientsToGroceryProducts200ResponseInnerPairs


encodeMapIngredientsToGroceryProducts200ResponseInnerWithTag : ( String, String ) -> MapIngredientsToGroceryProducts200ResponseInner -> Json.Encode.Value
encodeMapIngredientsToGroceryProducts200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeMapIngredientsToGroceryProducts200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMapIngredientsToGroceryProducts200ResponseInnerPairs : MapIngredientsToGroceryProducts200ResponseInner -> List EncodedField
encodeMapIngredientsToGroceryProducts200ResponseInnerPairs model =
    let
        pairs =
            [ encode "original" Json.Encode.string model.original
            , encode "originalName" Json.Encode.string model.originalName
            , encode "ingredientImage" Json.Encode.string model.ingredientImage
            , encode "meta" (Json.Encode.list Json.Encode.string) model.meta
            , encode "products" (Json.Encode.list encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInner) model.products
            ]
    in
    pairs


encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInner : MapIngredientsToGroceryProducts200ResponseInnerProductsInner -> Json.Encode.Value
encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInner =
    encodeObject << encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInnerPairs


encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInnerWithTag : ( String, String ) -> MapIngredientsToGroceryProducts200ResponseInnerProductsInner -> Json.Encode.Value
encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInnerWithTag (tagField, tag) model =
    encodeObject (encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInnerPairs : MapIngredientsToGroceryProducts200ResponseInnerProductsInner -> List EncodedField
encodeMapIngredientsToGroceryProducts200ResponseInnerProductsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "upc" Json.Encode.string model.upc
            ]
    in
    pairs


encodeMapIngredientsToGroceryProductsRequest : MapIngredientsToGroceryProductsRequest -> Json.Encode.Value
encodeMapIngredientsToGroceryProductsRequest =
    encodeObject << encodeMapIngredientsToGroceryProductsRequestPairs


encodeMapIngredientsToGroceryProductsRequestWithTag : ( String, String ) -> MapIngredientsToGroceryProductsRequest -> Json.Encode.Value
encodeMapIngredientsToGroceryProductsRequestWithTag (tagField, tag) model =
    encodeObject (encodeMapIngredientsToGroceryProductsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMapIngredientsToGroceryProductsRequestPairs : MapIngredientsToGroceryProductsRequest -> List EncodedField
encodeMapIngredientsToGroceryProductsRequestPairs model =
    let
        pairs =
            [ encode "ingredients" (Json.Encode.list Json.Encode.string) model.ingredients
            , encode "servings" Json.Encode.float model.servings
            ]
    in
    pairs


encodeParseIngredients200ResponseInner : ParseIngredients200ResponseInner -> Json.Encode.Value
encodeParseIngredients200ResponseInner =
    encodeObject << encodeParseIngredients200ResponseInnerPairs


encodeParseIngredients200ResponseInnerWithTag : ( String, String ) -> ParseIngredients200ResponseInner -> Json.Encode.Value
encodeParseIngredients200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerPairs : ParseIngredients200ResponseInner -> List EncodedField
encodeParseIngredients200ResponseInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "original" Json.Encode.string model.original
            , encode "originalName" Json.Encode.string model.originalName
            , encode "name" Json.Encode.string model.name
            , encode "nameClean" Json.Encode.string model.nameClean
            , encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            , encode "unitShort" Json.Encode.string model.unitShort
            , encode "unitLong" Json.Encode.string model.unitLong
            , encode "possibleUnits" (Json.Encode.list Json.Encode.string) model.possibleUnits
            , encode "estimatedCost" encodeParseIngredients200ResponseInnerEstimatedCost model.estimatedCost
            , encode "consistency" Json.Encode.string model.consistency
            , encode "aisle" Json.Encode.string model.aisle
            , encode "image" Json.Encode.string model.image
            , encode "meta" (Json.Encode.list Json.Encode.string) model.meta
            , encode "nutrition" encodeParseIngredients200ResponseInnerNutrition model.nutrition
            ]
    in
    pairs


encodeParseIngredients200ResponseInnerEstimatedCost : ParseIngredients200ResponseInnerEstimatedCost -> Json.Encode.Value
encodeParseIngredients200ResponseInnerEstimatedCost =
    encodeObject << encodeParseIngredients200ResponseInnerEstimatedCostPairs


encodeParseIngredients200ResponseInnerEstimatedCostWithTag : ( String, String ) -> ParseIngredients200ResponseInnerEstimatedCost -> Json.Encode.Value
encodeParseIngredients200ResponseInnerEstimatedCostWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerEstimatedCostPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerEstimatedCostPairs : ParseIngredients200ResponseInnerEstimatedCost -> List EncodedField
encodeParseIngredients200ResponseInnerEstimatedCostPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "unit" Json.Encode.string model.unit
            ]
    in
    pairs


encodeParseIngredients200ResponseInnerNutrition : ParseIngredients200ResponseInnerNutrition -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutrition =
    encodeObject << encodeParseIngredients200ResponseInnerNutritionPairs


encodeParseIngredients200ResponseInnerNutritionWithTag : ( String, String ) -> ParseIngredients200ResponseInnerNutrition -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerNutritionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerNutritionPairs : ParseIngredients200ResponseInnerNutrition -> List EncodedField
encodeParseIngredients200ResponseInnerNutritionPairs model =
    let
        pairs =
            [ encode "nutrients" (Json.Encode.list encodeParseIngredients200ResponseInnerNutritionNutrientsInner) model.nutrients
            , encode "properties" (Json.Encode.list encodeParseIngredients200ResponseInnerNutritionPropertiesInner) model.properties
            , encode "flavonoids" (Json.Encode.list encodeParseIngredients200ResponseInnerNutritionPropertiesInner) model.flavonoids
            , encode "caloricBreakdown" encodeParseIngredients200ResponseInnerNutritionCaloricBreakdown model.caloricBreakdown
            , encode "weightPerServing" encodeParseIngredients200ResponseInnerNutritionWeightPerServing model.weightPerServing
            ]
    in
    pairs


encodeParseIngredients200ResponseInnerNutritionCaloricBreakdown : ParseIngredients200ResponseInnerNutritionCaloricBreakdown -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionCaloricBreakdown =
    encodeObject << encodeParseIngredients200ResponseInnerNutritionCaloricBreakdownPairs


encodeParseIngredients200ResponseInnerNutritionCaloricBreakdownWithTag : ( String, String ) -> ParseIngredients200ResponseInnerNutritionCaloricBreakdown -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionCaloricBreakdownWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerNutritionCaloricBreakdownPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerNutritionCaloricBreakdownPairs : ParseIngredients200ResponseInnerNutritionCaloricBreakdown -> List EncodedField
encodeParseIngredients200ResponseInnerNutritionCaloricBreakdownPairs model =
    let
        pairs =
            [ encode "percentProtein" Json.Encode.float model.percentProtein
            , encode "percentFat" Json.Encode.float model.percentFat
            , encode "percentCarbs" Json.Encode.float model.percentCarbs
            ]
    in
    pairs


encodeParseIngredients200ResponseInnerNutritionNutrientsInner : ParseIngredients200ResponseInnerNutritionNutrientsInner -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionNutrientsInner =
    encodeObject << encodeParseIngredients200ResponseInnerNutritionNutrientsInnerPairs


encodeParseIngredients200ResponseInnerNutritionNutrientsInnerWithTag : ( String, String ) -> ParseIngredients200ResponseInnerNutritionNutrientsInner -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionNutrientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerNutritionNutrientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerNutritionNutrientsInnerPairs : ParseIngredients200ResponseInnerNutritionNutrientsInner -> List EncodedField
encodeParseIngredients200ResponseInnerNutritionNutrientsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            , encode "percentOfDailyNeeds" Json.Encode.float model.percentOfDailyNeeds
            ]
    in
    pairs


encodeParseIngredients200ResponseInnerNutritionPropertiesInner : ParseIngredients200ResponseInnerNutritionPropertiesInner -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionPropertiesInner =
    encodeObject << encodeParseIngredients200ResponseInnerNutritionPropertiesInnerPairs


encodeParseIngredients200ResponseInnerNutritionPropertiesInnerWithTag : ( String, String ) -> ParseIngredients200ResponseInnerNutritionPropertiesInner -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionPropertiesInnerWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerNutritionPropertiesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerNutritionPropertiesInnerPairs : ParseIngredients200ResponseInnerNutritionPropertiesInner -> List EncodedField
encodeParseIngredients200ResponseInnerNutritionPropertiesInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            ]
    in
    pairs


encodeParseIngredients200ResponseInnerNutritionWeightPerServing : ParseIngredients200ResponseInnerNutritionWeightPerServing -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionWeightPerServing =
    encodeObject << encodeParseIngredients200ResponseInnerNutritionWeightPerServingPairs


encodeParseIngredients200ResponseInnerNutritionWeightPerServingWithTag : ( String, String ) -> ParseIngredients200ResponseInnerNutritionWeightPerServing -> Json.Encode.Value
encodeParseIngredients200ResponseInnerNutritionWeightPerServingWithTag (tagField, tag) model =
    encodeObject (encodeParseIngredients200ResponseInnerNutritionWeightPerServingPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParseIngredients200ResponseInnerNutritionWeightPerServingPairs : ParseIngredients200ResponseInnerNutritionWeightPerServing -> List EncodedField
encodeParseIngredients200ResponseInnerNutritionWeightPerServingPairs model =
    let
        pairs =
            [ encode "amount" Json.Encode.float model.amount
            , encode "unit" Json.Encode.string model.unit
            ]
    in
    pairs


encodeQuickAnswer200Response : QuickAnswer200Response -> Json.Encode.Value
encodeQuickAnswer200Response =
    encodeObject << encodeQuickAnswer200ResponsePairs


encodeQuickAnswer200ResponseWithTag : ( String, String ) -> QuickAnswer200Response -> Json.Encode.Value
encodeQuickAnswer200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeQuickAnswer200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQuickAnswer200ResponsePairs : QuickAnswer200Response -> List EncodedField
encodeQuickAnswer200ResponsePairs model =
    let
        pairs =
            [ encode "answer" Json.Encode.string model.answer
            , encode "image" Json.Encode.string model.image
            ]
    in
    pairs


encodeSearchAllFood200Response : SearchAllFood200Response -> Json.Encode.Value
encodeSearchAllFood200Response =
    encodeObject << encodeSearchAllFood200ResponsePairs


encodeSearchAllFood200ResponseWithTag : ( String, String ) -> SearchAllFood200Response -> Json.Encode.Value
encodeSearchAllFood200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchAllFood200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchAllFood200ResponsePairs : SearchAllFood200Response -> List EncodedField
encodeSearchAllFood200ResponsePairs model =
    let
        pairs =
            [ encode "query" Json.Encode.string model.query
            , encode "totalResults" Json.Encode.int model.totalResults
            , encode "limit" Json.Encode.int model.limit
            , encode "offset" Json.Encode.int model.offset
            , encode "searchResults" (Json.Encode.list encodeSearchAllFood200ResponseSearchResultsInner) model.searchResults
            ]
    in
    pairs


encodeSearchAllFood200ResponseSearchResultsInner : SearchAllFood200ResponseSearchResultsInner -> Json.Encode.Value
encodeSearchAllFood200ResponseSearchResultsInner =
    encodeObject << encodeSearchAllFood200ResponseSearchResultsInnerPairs


encodeSearchAllFood200ResponseSearchResultsInnerWithTag : ( String, String ) -> SearchAllFood200ResponseSearchResultsInner -> Json.Encode.Value
encodeSearchAllFood200ResponseSearchResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchAllFood200ResponseSearchResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchAllFood200ResponseSearchResultsInnerPairs : SearchAllFood200ResponseSearchResultsInner -> List EncodedField
encodeSearchAllFood200ResponseSearchResultsInnerPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "totalResults" Json.Encode.int model.totalResults
            , maybeEncode "results" (Json.Encode.list encodeSearchAllFood200ResponseSearchResultsInnerResultsInner) model.results
            ]
    in
    pairs


encodeSearchAllFood200ResponseSearchResultsInnerResultsInner : SearchAllFood200ResponseSearchResultsInnerResultsInner -> Json.Encode.Value
encodeSearchAllFood200ResponseSearchResultsInnerResultsInner =
    encodeObject << encodeSearchAllFood200ResponseSearchResultsInnerResultsInnerPairs


encodeSearchAllFood200ResponseSearchResultsInnerResultsInnerWithTag : ( String, String ) -> SearchAllFood200ResponseSearchResultsInnerResultsInner -> Json.Encode.Value
encodeSearchAllFood200ResponseSearchResultsInnerResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchAllFood200ResponseSearchResultsInnerResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchAllFood200ResponseSearchResultsInnerResultsInnerPairs : SearchAllFood200ResponseSearchResultsInnerResultsInner -> List EncodedField
encodeSearchAllFood200ResponseSearchResultsInnerResultsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "name" Json.Encode.string model.name
            , encodeNullable "image" Json.Encode.string model.image
            , encodeNullable "link" Json.Encode.string model.link
            , encode "type" Json.Encode.string model.type_
            , encode "relevance" Json.Encode.float model.relevance
            , encodeNullable "content" Json.Encode.string model.content
            ]
    in
    pairs


encodeSearchCustomFoods200Response : SearchCustomFoods200Response -> Json.Encode.Value
encodeSearchCustomFoods200Response =
    encodeObject << encodeSearchCustomFoods200ResponsePairs


encodeSearchCustomFoods200ResponseWithTag : ( String, String ) -> SearchCustomFoods200Response -> Json.Encode.Value
encodeSearchCustomFoods200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchCustomFoods200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchCustomFoods200ResponsePairs : SearchCustomFoods200Response -> List EncodedField
encodeSearchCustomFoods200ResponsePairs model =
    let
        pairs =
            [ encode "customFoods" (Json.Encode.list encodeSearchCustomFoods200ResponseCustomFoodsInner) model.customFoods
            , encode "type" Json.Encode.string model.type_
            , encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            ]
    in
    pairs


encodeSearchCustomFoods200ResponseCustomFoodsInner : SearchCustomFoods200ResponseCustomFoodsInner -> Json.Encode.Value
encodeSearchCustomFoods200ResponseCustomFoodsInner =
    encodeObject << encodeSearchCustomFoods200ResponseCustomFoodsInnerPairs


encodeSearchCustomFoods200ResponseCustomFoodsInnerWithTag : ( String, String ) -> SearchCustomFoods200ResponseCustomFoodsInner -> Json.Encode.Value
encodeSearchCustomFoods200ResponseCustomFoodsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchCustomFoods200ResponseCustomFoodsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchCustomFoods200ResponseCustomFoodsInnerPairs : SearchCustomFoods200ResponseCustomFoodsInner -> List EncodedField
encodeSearchCustomFoods200ResponseCustomFoodsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "servings" Json.Encode.float model.servings
            , encode "imageUrl" Json.Encode.string model.imageUrl
            , encode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodeSearchFoodVideos200Response : SearchFoodVideos200Response -> Json.Encode.Value
encodeSearchFoodVideos200Response =
    encodeObject << encodeSearchFoodVideos200ResponsePairs


encodeSearchFoodVideos200ResponseWithTag : ( String, String ) -> SearchFoodVideos200Response -> Json.Encode.Value
encodeSearchFoodVideos200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchFoodVideos200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchFoodVideos200ResponsePairs : SearchFoodVideos200Response -> List EncodedField
encodeSearchFoodVideos200ResponsePairs model =
    let
        pairs =
            [ encode "videos" (Json.Encode.list encodeSearchFoodVideos200ResponseVideosInner) model.videos
            , encode "totalResults" Json.Encode.int model.totalResults
            ]
    in
    pairs


encodeSearchFoodVideos200ResponseVideosInner : SearchFoodVideos200ResponseVideosInner -> Json.Encode.Value
encodeSearchFoodVideos200ResponseVideosInner =
    encodeObject << encodeSearchFoodVideos200ResponseVideosInnerPairs


encodeSearchFoodVideos200ResponseVideosInnerWithTag : ( String, String ) -> SearchFoodVideos200ResponseVideosInner -> Json.Encode.Value
encodeSearchFoodVideos200ResponseVideosInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchFoodVideos200ResponseVideosInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchFoodVideos200ResponseVideosInnerPairs : SearchFoodVideos200ResponseVideosInner -> List EncodedField
encodeSearchFoodVideos200ResponseVideosInnerPairs model =
    let
        pairs =
            [ encode "title" Json.Encode.string model.title
            , encode "length" Json.Encode.int model.length
            , encode "rating" Json.Encode.float model.rating
            , encode "shortTitle" Json.Encode.string model.shortTitle
            , encode "thumbnail" Json.Encode.string model.thumbnail
            , encode "views" Json.Encode.int model.views
            , encode "youTubeId" Json.Encode.string model.youTubeId
            ]
    in
    pairs


encodeSearchGroceryProducts200Response : SearchGroceryProducts200Response -> Json.Encode.Value
encodeSearchGroceryProducts200Response =
    encodeObject << encodeSearchGroceryProducts200ResponsePairs


encodeSearchGroceryProducts200ResponseWithTag : ( String, String ) -> SearchGroceryProducts200Response -> Json.Encode.Value
encodeSearchGroceryProducts200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchGroceryProducts200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchGroceryProducts200ResponsePairs : SearchGroceryProducts200Response -> List EncodedField
encodeSearchGroceryProducts200ResponsePairs model =
    let
        pairs =
            [ encode "products" (Json.Encode.list encodeAutocompleteRecipeSearch200ResponseInner) model.products
            , encode "totalProducts" Json.Encode.int model.totalProducts
            , encode "type" Json.Encode.string model.type_
            , encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            ]
    in
    pairs


encodeSearchGroceryProductsByUPC200Response : SearchGroceryProductsByUPC200Response -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200Response =
    encodeObject << encodeSearchGroceryProductsByUPC200ResponsePairs


encodeSearchGroceryProductsByUPC200ResponseWithTag : ( String, String ) -> SearchGroceryProductsByUPC200Response -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchGroceryProductsByUPC200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchGroceryProductsByUPC200ResponsePairs : SearchGroceryProductsByUPC200Response -> List EncodedField
encodeSearchGroceryProductsByUPC200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "badges" (Json.Encode.list Json.Encode.string) model.badges
            , encode "importantBadges" (Json.Encode.list Json.Encode.string) model.importantBadges
            , encode "breadcrumbs" (Json.Encode.list Json.Encode.string) model.breadcrumbs
            , encode "generatedText" Json.Encode.string model.generatedText
            , encode "imageType" Json.Encode.string model.imageType
            , maybeEncode "ingredientCount" Json.Encode.int model.ingredientCount
            , encode "ingredientList" Json.Encode.string model.ingredientList
            , encode "ingredients" (Json.Encode.list encodeSearchGroceryProductsByUPC200ResponseIngredientsInner) model.ingredients
            , encode "likes" Json.Encode.float model.likes
            , encode "nutrition" encodeSearchGroceryProductsByUPC200ResponseNutrition model.nutrition
            , encode "price" Json.Encode.float model.price
            , encode "servings" encodeSearchGroceryProductsByUPC200ResponseServings model.servings
            , encode "spoonacularScore" Json.Encode.float model.spoonacularScore
            ]
    in
    pairs


encodeSearchGroceryProductsByUPC200ResponseIngredientsInner : SearchGroceryProductsByUPC200ResponseIngredientsInner -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseIngredientsInner =
    encodeObject << encodeSearchGroceryProductsByUPC200ResponseIngredientsInnerPairs


encodeSearchGroceryProductsByUPC200ResponseIngredientsInnerWithTag : ( String, String ) -> SearchGroceryProductsByUPC200ResponseIngredientsInner -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchGroceryProductsByUPC200ResponseIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchGroceryProductsByUPC200ResponseIngredientsInnerPairs : SearchGroceryProductsByUPC200ResponseIngredientsInner -> List EncodedField
encodeSearchGroceryProductsByUPC200ResponseIngredientsInnerPairs model =
    let
        pairs =
            [ maybeEncode "description" Json.Encode.string model.description
            , encode "name" Json.Encode.string model.name
            , maybeEncode "safety_level" Json.Encode.string model.safetyLevel
            ]
    in
    pairs


encodeSearchGroceryProductsByUPC200ResponseNutrition : SearchGroceryProductsByUPC200ResponseNutrition -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseNutrition =
    encodeObject << encodeSearchGroceryProductsByUPC200ResponseNutritionPairs


encodeSearchGroceryProductsByUPC200ResponseNutritionWithTag : ( String, String ) -> SearchGroceryProductsByUPC200ResponseNutrition -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseNutritionWithTag (tagField, tag) model =
    encodeObject (encodeSearchGroceryProductsByUPC200ResponseNutritionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchGroceryProductsByUPC200ResponseNutritionPairs : SearchGroceryProductsByUPC200ResponseNutrition -> List EncodedField
encodeSearchGroceryProductsByUPC200ResponseNutritionPairs model =
    let
        pairs =
            [ encode "nutrients" (Json.Encode.list encodeParseIngredients200ResponseInnerNutritionNutrientsInner) model.nutrients
            , encode "caloricBreakdown" encodeParseIngredients200ResponseInnerNutritionCaloricBreakdown model.caloricBreakdown
            ]
    in
    pairs


encodeSearchGroceryProductsByUPC200ResponseServings : SearchGroceryProductsByUPC200ResponseServings -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseServings =
    encodeObject << encodeSearchGroceryProductsByUPC200ResponseServingsPairs


encodeSearchGroceryProductsByUPC200ResponseServingsWithTag : ( String, String ) -> SearchGroceryProductsByUPC200ResponseServings -> Json.Encode.Value
encodeSearchGroceryProductsByUPC200ResponseServingsWithTag (tagField, tag) model =
    encodeObject (encodeSearchGroceryProductsByUPC200ResponseServingsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchGroceryProductsByUPC200ResponseServingsPairs : SearchGroceryProductsByUPC200ResponseServings -> List EncodedField
encodeSearchGroceryProductsByUPC200ResponseServingsPairs model =
    let
        pairs =
            [ encode "number" Json.Encode.float model.number
            , encode "size" Json.Encode.float model.size
            , encode "unit" Json.Encode.string model.unit
            ]
    in
    pairs


encodeSearchMenuItems200Response : SearchMenuItems200Response -> Json.Encode.Value
encodeSearchMenuItems200Response =
    encodeObject << encodeSearchMenuItems200ResponsePairs


encodeSearchMenuItems200ResponseWithTag : ( String, String ) -> SearchMenuItems200Response -> Json.Encode.Value
encodeSearchMenuItems200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchMenuItems200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchMenuItems200ResponsePairs : SearchMenuItems200Response -> List EncodedField
encodeSearchMenuItems200ResponsePairs model =
    let
        pairs =
            [ encode "menuItems" (Json.Encode.list encodeSearchMenuItems200ResponseMenuItemsInner) model.menuItems
            , encode "totalMenuItems" Json.Encode.int model.totalMenuItems
            , encode "type" Json.Encode.string model.type_
            , encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            ]
    in
    pairs


encodeSearchMenuItems200ResponseMenuItemsInner : SearchMenuItems200ResponseMenuItemsInner -> Json.Encode.Value
encodeSearchMenuItems200ResponseMenuItemsInner =
    encodeObject << encodeSearchMenuItems200ResponseMenuItemsInnerPairs


encodeSearchMenuItems200ResponseMenuItemsInnerWithTag : ( String, String ) -> SearchMenuItems200ResponseMenuItemsInner -> Json.Encode.Value
encodeSearchMenuItems200ResponseMenuItemsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchMenuItems200ResponseMenuItemsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchMenuItems200ResponseMenuItemsInnerPairs : SearchMenuItems200ResponseMenuItemsInner -> List EncodedField
encodeSearchMenuItems200ResponseMenuItemsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "restaurantChain" Json.Encode.string model.restaurantChain
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            , maybeEncode "servings" encodeSearchGroceryProductsByUPC200ResponseServings model.servings
            ]
    in
    pairs


encodeSearchRecipes200Response : SearchRecipes200Response -> Json.Encode.Value
encodeSearchRecipes200Response =
    encodeObject << encodeSearchRecipes200ResponsePairs


encodeSearchRecipes200ResponseWithTag : ( String, String ) -> SearchRecipes200Response -> Json.Encode.Value
encodeSearchRecipes200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchRecipes200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRecipes200ResponsePairs : SearchRecipes200Response -> List EncodedField
encodeSearchRecipes200ResponsePairs model =
    let
        pairs =
            [ encode "offset" Json.Encode.int model.offset
            , encode "number" Json.Encode.int model.number
            , encode "results" (Json.Encode.list encodeSearchRecipes200ResponseResultsInner) model.results
            , encode "totalResults" Json.Encode.int model.totalResults
            ]
    in
    pairs


encodeSearchRecipes200ResponseResultsInner : SearchRecipes200ResponseResultsInner -> Json.Encode.Value
encodeSearchRecipes200ResponseResultsInner =
    encodeObject << encodeSearchRecipes200ResponseResultsInnerPairs


encodeSearchRecipes200ResponseResultsInnerWithTag : ( String, String ) -> SearchRecipes200ResponseResultsInner -> Json.Encode.Value
encodeSearchRecipes200ResponseResultsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchRecipes200ResponseResultsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRecipes200ResponseResultsInnerPairs : SearchRecipes200ResponseResultsInner -> List EncodedField
encodeSearchRecipes200ResponseResultsInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "title" Json.Encode.string model.title
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            ]
    in
    pairs


encodeSearchRecipesByIngredients200ResponseInner : SearchRecipesByIngredients200ResponseInner -> Json.Encode.Value
encodeSearchRecipesByIngredients200ResponseInner =
    encodeObject << encodeSearchRecipesByIngredients200ResponseInnerPairs


encodeSearchRecipesByIngredients200ResponseInnerWithTag : ( String, String ) -> SearchRecipesByIngredients200ResponseInner -> Json.Encode.Value
encodeSearchRecipesByIngredients200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchRecipesByIngredients200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRecipesByIngredients200ResponseInnerPairs : SearchRecipesByIngredients200ResponseInner -> List EncodedField
encodeSearchRecipesByIngredients200ResponseInnerPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            , encode "likes" Json.Encode.int model.likes
            , encode "missedIngredientCount" Json.Encode.int model.missedIngredientCount
            , encode "missedIngredients" (Json.Encode.list encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInner) model.missedIngredients
            , encode "title" Json.Encode.string model.title
            , encode "unusedIngredients" (Json.Encode.list encodeObject) model.unusedIngredients
            , encode "usedIngredientCount" Json.Encode.float model.usedIngredientCount
            , encode "usedIngredients" (Json.Encode.list encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInner) model.usedIngredients
            ]
    in
    pairs


encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInner : SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner -> Json.Encode.Value
encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInner =
    encodeObject << encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInnerPairs


encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInnerWithTag : ( String, String ) -> SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner -> Json.Encode.Value
encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInnerPairs : SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner -> List EncodedField
encodeSearchRecipesByIngredients200ResponseInnerMissedIngredientsInnerPairs model =
    let
        pairs =
            [ encode "aisle" Json.Encode.string model.aisle
            , encode "amount" Json.Encode.float model.amount
            , encode "id" Json.Encode.int model.id
            , encode "image" Json.Encode.string model.image
            , maybeEncode "meta" (Json.Encode.list Json.Encode.string) model.meta
            , encode "name" Json.Encode.string model.name
            , maybeEncode "extendedName" Json.Encode.string model.extendedName
            , encode "original" Json.Encode.string model.original
            , encode "originalName" Json.Encode.string model.originalName
            , encode "unit" Json.Encode.string model.unit
            , encode "unitLong" Json.Encode.string model.unitLong
            , encode "unitShort" Json.Encode.string model.unitShort
            ]
    in
    pairs


encodeSearchRecipesByNutrients200ResponseInner : SearchRecipesByNutrients200ResponseInner -> Json.Encode.Value
encodeSearchRecipesByNutrients200ResponseInner =
    encodeObject << encodeSearchRecipesByNutrients200ResponseInnerPairs


encodeSearchRecipesByNutrients200ResponseInnerWithTag : ( String, String ) -> SearchRecipesByNutrients200ResponseInner -> Json.Encode.Value
encodeSearchRecipesByNutrients200ResponseInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchRecipesByNutrients200ResponseInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRecipesByNutrients200ResponseInnerPairs : SearchRecipesByNutrients200ResponseInner -> List EncodedField
encodeSearchRecipesByNutrients200ResponseInnerPairs model =
    let
        pairs =
            [ encode "calories" Json.Encode.float model.calories
            , encode "carbs" Json.Encode.string model.carbs
            , encode "fat" Json.Encode.string model.fat
            , encode "id" Json.Encode.int model.id
            , encode "image" Json.Encode.string model.image
            , encode "imageType" Json.Encode.string model.imageType
            , encode "protein" Json.Encode.string model.protein
            , encode "title" Json.Encode.string model.title
            ]
    in
    pairs


encodeSearchRestaurants200Response : SearchRestaurants200Response -> Json.Encode.Value
encodeSearchRestaurants200Response =
    encodeObject << encodeSearchRestaurants200ResponsePairs


encodeSearchRestaurants200ResponseWithTag : ( String, String ) -> SearchRestaurants200Response -> Json.Encode.Value
encodeSearchRestaurants200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchRestaurants200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRestaurants200ResponsePairs : SearchRestaurants200Response -> List EncodedField
encodeSearchRestaurants200ResponsePairs model =
    let
        pairs =
            [ maybeEncode "restaurants" (Json.Encode.list encodeSearchRestaurants200ResponseRestaurantsInner) model.restaurants
            ]
    in
    pairs


encodeSearchRestaurants200ResponseRestaurantsInner : SearchRestaurants200ResponseRestaurantsInner -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInner =
    encodeObject << encodeSearchRestaurants200ResponseRestaurantsInnerPairs


encodeSearchRestaurants200ResponseRestaurantsInnerWithTag : ( String, String ) -> SearchRestaurants200ResponseRestaurantsInner -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchRestaurants200ResponseRestaurantsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRestaurants200ResponseRestaurantsInnerPairs : SearchRestaurants200ResponseRestaurantsInner -> List EncodedField
encodeSearchRestaurants200ResponseRestaurantsInnerPairs model =
    let
        pairs =
            [ maybeEncode "_id" Json.Encode.string model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "phone_number" Json.Encode.int model.phoneNumber
            , maybeEncode "address" encodeSearchRestaurants200ResponseRestaurantsInnerAddress model.address
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "local_hours" encodeSearchRestaurants200ResponseRestaurantsInnerLocalHours model.localHours
            , maybeEncode "cuisines" (Json.Encode.list Json.Encode.string) model.cuisines
            , maybeEncode "food_photos" (Json.Encode.list Json.Encode.string) model.foodPhotos
            , maybeEncode "logo_photos" (Json.Encode.list Json.Encode.string) model.logoPhotos
            , maybeEncode "store_photos" (Json.Encode.list Json.Encode.string) model.storePhotos
            , maybeEncode "dollar_signs" Json.Encode.int model.dollarSigns
            , maybeEncode "pickup_enabled" Json.Encode.bool model.pickupEnabled
            , maybeEncode "delivery_enabled" Json.Encode.bool model.deliveryEnabled
            , maybeEncode "is_open" Json.Encode.bool model.isOpen
            , maybeEncode "offers_first_party_delivery" Json.Encode.bool model.offersFirstPartyDelivery
            , maybeEncode "offers_third_party_delivery" Json.Encode.bool model.offersThirdPartyDelivery
            , maybeEncode "miles" Json.Encode.float model.miles
            , maybeEncode "weighted_rating_value" Json.Encode.float model.weightedRatingValue
            , maybeEncode "aggregated_rating_count" Json.Encode.int model.aggregatedRatingCount
            ]
    in
    pairs


encodeSearchRestaurants200ResponseRestaurantsInnerAddress : SearchRestaurants200ResponseRestaurantsInnerAddress -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerAddress =
    encodeObject << encodeSearchRestaurants200ResponseRestaurantsInnerAddressPairs


encodeSearchRestaurants200ResponseRestaurantsInnerAddressWithTag : ( String, String ) -> SearchRestaurants200ResponseRestaurantsInnerAddress -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerAddressWithTag (tagField, tag) model =
    encodeObject (encodeSearchRestaurants200ResponseRestaurantsInnerAddressPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRestaurants200ResponseRestaurantsInnerAddressPairs : SearchRestaurants200ResponseRestaurantsInnerAddress -> List EncodedField
encodeSearchRestaurants200ResponseRestaurantsInnerAddressPairs model =
    let
        pairs =
            [ maybeEncode "street_addr" Json.Encode.string model.streetAddr
            , maybeEncode "city" Json.Encode.string model.city
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "zipcode" Json.Encode.string model.zipcode
            , maybeEncode "country" Json.Encode.string model.country
            , maybeEncode "lat" Json.Encode.float model.lat
            , maybeEncode "lon" Json.Encode.float model.lon
            , maybeEncode "street_addr_2" Json.Encode.string model.streetAddr2
            , maybeEncode "latitude" Json.Encode.float model.latitude
            , maybeEncode "longitude" Json.Encode.float model.longitude
            ]
    in
    pairs


encodeSearchRestaurants200ResponseRestaurantsInnerLocalHours : SearchRestaurants200ResponseRestaurantsInnerLocalHours -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerLocalHours =
    encodeObject << encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursPairs


encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursWithTag : ( String, String ) -> SearchRestaurants200ResponseRestaurantsInnerLocalHours -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursWithTag (tagField, tag) model =
    encodeObject (encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursPairs : SearchRestaurants200ResponseRestaurantsInnerLocalHours -> List EncodedField
encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursPairs model =
    let
        pairs =
            [ maybeEncode "operational" encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational model.operational
            , maybeEncode "delivery" encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational model.delivery
            , maybeEncode "pickup" encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational model.pickup
            , maybeEncode "dine_in" encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational model.dineIn
            ]
    in
    pairs


encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational : SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational =
    encodeObject << encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalPairs


encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalWithTag : ( String, String ) -> SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational -> Json.Encode.Value
encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalWithTag (tagField, tag) model =
    encodeObject (encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalPairs : SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational -> List EncodedField
encodeSearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalPairs model =
    let
        pairs =
            [ maybeEncode "Monday" Json.Encode.string model.monday
            , maybeEncode "Tuesday" Json.Encode.string model.tuesday
            , maybeEncode "Wednesday" Json.Encode.string model.wednesday
            , maybeEncode "Thursday" Json.Encode.string model.thursday
            , maybeEncode "Friday" Json.Encode.string model.friday
            , maybeEncode "Saturday" Json.Encode.string model.saturday
            , maybeEncode "Sunday" Json.Encode.string model.sunday
            ]
    in
    pairs


encodeSearchSiteContent200Response : SearchSiteContent200Response -> Json.Encode.Value
encodeSearchSiteContent200Response =
    encodeObject << encodeSearchSiteContent200ResponsePairs


encodeSearchSiteContent200ResponseWithTag : ( String, String ) -> SearchSiteContent200Response -> Json.Encode.Value
encodeSearchSiteContent200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchSiteContent200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchSiteContent200ResponsePairs : SearchSiteContent200Response -> List EncodedField
encodeSearchSiteContent200ResponsePairs model =
    let
        pairs =
            [ encode "Articles" (Json.Encode.list encodeSearchSiteContent200ResponseArticlesInner) model.articles
            , encode "Grocery Products" (Json.Encode.list encodeSearchSiteContent200ResponseArticlesInner) model.groceryProducts
            , encode "Menu Items" (Json.Encode.list encodeSearchSiteContent200ResponseArticlesInner) model.menuItems
            , encode "Recipes" (Json.Encode.list encodeSearchSiteContent200ResponseArticlesInner) model.recipes
            ]
    in
    pairs


encodeSearchSiteContent200ResponseArticlesInner : SearchSiteContent200ResponseArticlesInner -> Json.Encode.Value
encodeSearchSiteContent200ResponseArticlesInner =
    encodeObject << encodeSearchSiteContent200ResponseArticlesInnerPairs


encodeSearchSiteContent200ResponseArticlesInnerWithTag : ( String, String ) -> SearchSiteContent200ResponseArticlesInner -> Json.Encode.Value
encodeSearchSiteContent200ResponseArticlesInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchSiteContent200ResponseArticlesInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchSiteContent200ResponseArticlesInnerPairs : SearchSiteContent200ResponseArticlesInner -> List EncodedField
encodeSearchSiteContent200ResponseArticlesInnerPairs model =
    let
        pairs =
            [ maybeEncode "dataPoints" (Json.Encode.list encodeSearchSiteContent200ResponseArticlesInnerDataPointsInner) model.dataPoints
            , encode "image" Json.Encode.string model.image
            , encode "link" Json.Encode.string model.link
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeSearchSiteContent200ResponseArticlesInnerDataPointsInner : SearchSiteContent200ResponseArticlesInnerDataPointsInner -> Json.Encode.Value
encodeSearchSiteContent200ResponseArticlesInnerDataPointsInner =
    encodeObject << encodeSearchSiteContent200ResponseArticlesInnerDataPointsInnerPairs


encodeSearchSiteContent200ResponseArticlesInnerDataPointsInnerWithTag : ( String, String ) -> SearchSiteContent200ResponseArticlesInnerDataPointsInner -> Json.Encode.Value
encodeSearchSiteContent200ResponseArticlesInnerDataPointsInnerWithTag (tagField, tag) model =
    encodeObject (encodeSearchSiteContent200ResponseArticlesInnerDataPointsInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchSiteContent200ResponseArticlesInnerDataPointsInnerPairs : SearchSiteContent200ResponseArticlesInnerDataPointsInner -> List EncodedField
encodeSearchSiteContent200ResponseArticlesInnerDataPointsInnerPairs model =
    let
        pairs =
            [ encode "key" Json.Encode.string model.key
            , encode "value" Json.Encode.string model.value
            ]
    in
    pairs


encodeSummarizeRecipe200Response : SummarizeRecipe200Response -> Json.Encode.Value
encodeSummarizeRecipe200Response =
    encodeObject << encodeSummarizeRecipe200ResponsePairs


encodeSummarizeRecipe200ResponseWithTag : ( String, String ) -> SummarizeRecipe200Response -> Json.Encode.Value
encodeSummarizeRecipe200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeSummarizeRecipe200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSummarizeRecipe200ResponsePairs : SummarizeRecipe200Response -> List EncodedField
encodeSummarizeRecipe200ResponsePairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "summary" Json.Encode.string model.summary
            , encode "title" Json.Encode.string model.title
            ]
    in
    pairs


encodeTalkToChatbot200Response : TalkToChatbot200Response -> Json.Encode.Value
encodeTalkToChatbot200Response =
    encodeObject << encodeTalkToChatbot200ResponsePairs


encodeTalkToChatbot200ResponseWithTag : ( String, String ) -> TalkToChatbot200Response -> Json.Encode.Value
encodeTalkToChatbot200ResponseWithTag (tagField, tag) model =
    encodeObject (encodeTalkToChatbot200ResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTalkToChatbot200ResponsePairs : TalkToChatbot200Response -> List EncodedField
encodeTalkToChatbot200ResponsePairs model =
    let
        pairs =
            [ encode "answerText" Json.Encode.string model.answerText
            , encode "media" (Json.Encode.list encodeTalkToChatbot200ResponseMediaInner) model.media
            ]
    in
    pairs


encodeTalkToChatbot200ResponseMediaInner : TalkToChatbot200ResponseMediaInner -> Json.Encode.Value
encodeTalkToChatbot200ResponseMediaInner =
    encodeObject << encodeTalkToChatbot200ResponseMediaInnerPairs


encodeTalkToChatbot200ResponseMediaInnerWithTag : ( String, String ) -> TalkToChatbot200ResponseMediaInner -> Json.Encode.Value
encodeTalkToChatbot200ResponseMediaInnerWithTag (tagField, tag) model =
    encodeObject (encodeTalkToChatbot200ResponseMediaInnerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTalkToChatbot200ResponseMediaInnerPairs : TalkToChatbot200ResponseMediaInner -> List EncodedField
encodeTalkToChatbot200ResponseMediaInnerPairs model =
    let
        pairs =
            [ maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "image" Json.Encode.string model.image
            , maybeEncode "link" Json.Encode.string model.link
            ]
    in
    pairs


-- DECODER


addMealPlanTemplate200ResponseDecoder : Json.Decode.Decoder AddMealPlanTemplate200Response
addMealPlanTemplate200ResponseDecoder =
    Json.Decode.succeed AddMealPlanTemplate200Response
        |> decode "name" Json.Decode.string 
        |> decode "items" (Json.Decode.list addMealPlanTemplate200ResponseItemsInnerDecoder) 
        |> decode "publishAsPublic" Json.Decode.bool 


addMealPlanTemplate200ResponseItemsInnerDecoder : Json.Decode.Decoder AddMealPlanTemplate200ResponseItemsInner
addMealPlanTemplate200ResponseItemsInnerDecoder =
    Json.Decode.succeed AddMealPlanTemplate200ResponseItemsInner
        |> decode "day" Json.Decode.int 
        |> decode "slot" Json.Decode.int 
        |> decode "position" Json.Decode.int 
        |> decode "type" Json.Decode.string 
        |> maybeDecode "value" addMealPlanTemplate200ResponseItemsInnerValueDecoder Nothing


addMealPlanTemplate200ResponseItemsInnerValueDecoder : Json.Decode.Decoder AddMealPlanTemplate200ResponseItemsInnerValue
addMealPlanTemplate200ResponseItemsInnerValueDecoder =
    Json.Decode.succeed AddMealPlanTemplate200ResponseItemsInnerValue
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "servings" Json.Decode.float Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "imageType" Json.Decode.string Nothing


addToMealPlanRequestDecoder : Json.Decode.Decoder AddToMealPlanRequest
addToMealPlanRequestDecoder =
    Json.Decode.succeed AddToMealPlanRequest
        |> decode "date" Json.Decode.float 
        |> decode "slot" Json.Decode.int 
        |> decode "position" Json.Decode.int 
        |> decode "type" Json.Decode.string 
        |> decode "value" addToMealPlanRequestValueDecoder 


addToMealPlanRequestValueDecoder : Json.Decode.Decoder AddToMealPlanRequestValue
addToMealPlanRequestValueDecoder =
    Json.Decode.succeed AddToMealPlanRequestValue
        |> decode "ingredients" (Json.Decode.list addToMealPlanRequestValueIngredientsInnerDecoder) 


addToMealPlanRequestValueIngredientsInnerDecoder : Json.Decode.Decoder AddToMealPlanRequestValueIngredientsInner
addToMealPlanRequestValueIngredientsInnerDecoder =
    Json.Decode.succeed AddToMealPlanRequestValueIngredientsInner
        |> decode "name" Json.Decode.string 


addToShoppingListRequestDecoder : Json.Decode.Decoder AddToShoppingListRequest
addToShoppingListRequestDecoder =
    Json.Decode.succeed AddToShoppingListRequest
        |> decode "item" Json.Decode.string 
        |> decode "aisle" Json.Decode.string 
        |> decode "parse" Json.Decode.bool 


analyzeARecipeSearchQuery200ResponseDecoder : Json.Decode.Decoder AnalyzeARecipeSearchQuery200Response
analyzeARecipeSearchQuery200ResponseDecoder =
    Json.Decode.succeed AnalyzeARecipeSearchQuery200Response
        |> decode "dishes" (Json.Decode.list analyzeARecipeSearchQuery200ResponseDishesInnerDecoder) 
        |> decode "ingredients" (Json.Decode.list analyzeARecipeSearchQuery200ResponseIngredientsInnerDecoder) 
        |> decode "cuisines" (Json.Decode.list Json.Decode.string) 
        |> decode "modifiers" (Json.Decode.list Json.Decode.string) 


analyzeARecipeSearchQuery200ResponseDishesInnerDecoder : Json.Decode.Decoder AnalyzeARecipeSearchQuery200ResponseDishesInner
analyzeARecipeSearchQuery200ResponseDishesInnerDecoder =
    Json.Decode.succeed AnalyzeARecipeSearchQuery200ResponseDishesInner
        |> decode "image" Json.Decode.string 
        |> decode "name" Json.Decode.string 


analyzeARecipeSearchQuery200ResponseIngredientsInnerDecoder : Json.Decode.Decoder AnalyzeARecipeSearchQuery200ResponseIngredientsInner
analyzeARecipeSearchQuery200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed AnalyzeARecipeSearchQuery200ResponseIngredientsInner
        |> decode "image" Json.Decode.string 
        |> decode "include" Json.Decode.bool 
        |> decode "name" Json.Decode.string 


analyzeRecipeInstructions200ResponseDecoder : Json.Decode.Decoder AnalyzeRecipeInstructions200Response
analyzeRecipeInstructions200ResponseDecoder =
    Json.Decode.succeed AnalyzeRecipeInstructions200Response
        |> decode "parsedInstructions" (Json.Decode.list analyzeRecipeInstructions200ResponseParsedInstructionsInnerDecoder) 
        |> decode "ingredients" (Json.Decode.list analyzeRecipeInstructions200ResponseIngredientsInnerDecoder) 
        |> decode "equipment" (Json.Decode.list analyzeRecipeInstructions200ResponseIngredientsInnerDecoder) 


analyzeRecipeInstructions200ResponseIngredientsInnerDecoder : Json.Decode.Decoder AnalyzeRecipeInstructions200ResponseIngredientsInner
analyzeRecipeInstructions200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed AnalyzeRecipeInstructions200ResponseIngredientsInner
        |> decode "id" Json.Decode.float 
        |> decode "name" Json.Decode.string 


analyzeRecipeInstructions200ResponseParsedInstructionsInnerDecoder : Json.Decode.Decoder AnalyzeRecipeInstructions200ResponseParsedInstructionsInner
analyzeRecipeInstructions200ResponseParsedInstructionsInnerDecoder =
    Json.Decode.succeed AnalyzeRecipeInstructions200ResponseParsedInstructionsInner
        |> decode "name" Json.Decode.string 
        |> maybeDecode "steps" (Json.Decode.list analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder) Nothing


analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder : Json.Decode.Decoder AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder =
    Json.Decode.succeed AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
        |> decode "number" Json.Decode.float 
        |> decode "step" Json.Decode.string 
        |> maybeDecode "ingredients" (Json.Decode.list analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder) Nothing
        |> maybeDecode "equipment" (Json.Decode.list analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder) Nothing


analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder : Json.Decode.Decoder AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
analyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder =
    Json.Decode.succeed AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
        |> decode "id" Json.Decode.float 
        |> decode "name" Json.Decode.string 
        |> decode "localizedName" Json.Decode.string 
        |> decode "image" Json.Decode.string 


analyzeRecipeRequestDecoder : Json.Decode.Decoder AnalyzeRecipeRequest
analyzeRecipeRequestDecoder =
    Json.Decode.succeed AnalyzeRecipeRequest
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "servings" Json.Decode.int Nothing
        |> maybeDecode "ingredients" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "instructions" Json.Decode.string Nothing


autocompleteIngredientSearch200ResponseInnerDecoder : Json.Decode.Decoder AutocompleteIngredientSearch200ResponseInner
autocompleteIngredientSearch200ResponseInnerDecoder =
    Json.Decode.succeed AutocompleteIngredientSearch200ResponseInner
        |> decode "name" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "aisle" Json.Decode.string Nothing
        |> maybeDecode "possibleUnits" (Json.Decode.list Json.Decode.string) Nothing


autocompleteMenuItemSearch200ResponseDecoder : Json.Decode.Decoder AutocompleteMenuItemSearch200Response
autocompleteMenuItemSearch200ResponseDecoder =
    Json.Decode.succeed AutocompleteMenuItemSearch200Response
        |> decode "results" (Json.Decode.list autocompleteProductSearch200ResponseResultsInnerDecoder) 


autocompleteProductSearch200ResponseDecoder : Json.Decode.Decoder AutocompleteProductSearch200Response
autocompleteProductSearch200ResponseDecoder =
    Json.Decode.succeed AutocompleteProductSearch200Response
        |> decode "results" (Json.Decode.list autocompleteProductSearch200ResponseResultsInnerDecoder) 


autocompleteProductSearch200ResponseResultsInnerDecoder : Json.Decode.Decoder AutocompleteProductSearch200ResponseResultsInner
autocompleteProductSearch200ResponseResultsInnerDecoder =
    Json.Decode.succeed AutocompleteProductSearch200ResponseResultsInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 


autocompleteRecipeSearch200ResponseInnerDecoder : Json.Decode.Decoder AutocompleteRecipeSearch200ResponseInner
autocompleteRecipeSearch200ResponseInnerDecoder =
    Json.Decode.succeed AutocompleteRecipeSearch200ResponseInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 


classifyCuisine200ResponseDecoder : Json.Decode.Decoder ClassifyCuisine200Response
classifyCuisine200ResponseDecoder =
    Json.Decode.succeed ClassifyCuisine200Response
        |> decode "cuisine" Json.Decode.string 
        |> decode "cuisines" (Json.Decode.list Json.Decode.string) 
        |> decode "confidence" Json.Decode.float 


classifyGroceryProduct200ResponseDecoder : Json.Decode.Decoder ClassifyGroceryProduct200Response
classifyGroceryProduct200ResponseDecoder =
    Json.Decode.succeed ClassifyGroceryProduct200Response
        |> decode "cleanTitle" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "category" Json.Decode.string 
        |> decode "breadcrumbs" (Json.Decode.list Json.Decode.string) 
        |> decode "usdaCode" Json.Decode.int 


classifyGroceryProductBulk200ResponseInnerDecoder : Json.Decode.Decoder ClassifyGroceryProductBulk200ResponseInner
classifyGroceryProductBulk200ResponseInnerDecoder =
    Json.Decode.succeed ClassifyGroceryProductBulk200ResponseInner
        |> decode "cleanTitle" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "category" Json.Decode.string 
        |> decode "breadcrumbs" (Json.Decode.list Json.Decode.string) 
        |> decode "usdaCode" Json.Decode.int 


classifyGroceryProductBulkRequestInnerDecoder : Json.Decode.Decoder ClassifyGroceryProductBulkRequestInner
classifyGroceryProductBulkRequestInnerDecoder =
    Json.Decode.succeed ClassifyGroceryProductBulkRequestInner
        |> decode "title" Json.Decode.string 
        |> decode "upc" Json.Decode.string 
        |> decode "plu_code" Json.Decode.string 


classifyGroceryProductRequestDecoder : Json.Decode.Decoder ClassifyGroceryProductRequest
classifyGroceryProductRequestDecoder =
    Json.Decode.succeed ClassifyGroceryProductRequest
        |> decode "title" Json.Decode.string 
        |> decode "upc" Json.Decode.string 
        |> decode "plu_code" Json.Decode.string 


computeGlycemicLoad200ResponseDecoder : Json.Decode.Decoder ComputeGlycemicLoad200Response
computeGlycemicLoad200ResponseDecoder =
    Json.Decode.succeed ComputeGlycemicLoad200Response
        |> decode "totalGlycemicLoad" Json.Decode.float 
        |> decode "ingredients" (Json.Decode.list computeGlycemicLoad200ResponseIngredientsInnerDecoder) 


computeGlycemicLoad200ResponseIngredientsInnerDecoder : Json.Decode.Decoder ComputeGlycemicLoad200ResponseIngredientsInner
computeGlycemicLoad200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed ComputeGlycemicLoad200ResponseIngredientsInner
        |> decode "id" Json.Decode.int 
        |> decode "original" Json.Decode.string 
        |> decode "glycemicIndex" Json.Decode.float 
        |> decode "glycemicLoad" Json.Decode.float 


computeGlycemicLoadRequestDecoder : Json.Decode.Decoder ComputeGlycemicLoadRequest
computeGlycemicLoadRequestDecoder =
    Json.Decode.succeed ComputeGlycemicLoadRequest
        |> decode "ingredients" (Json.Decode.list Json.Decode.string) 


computeIngredientAmount200ResponseDecoder : Json.Decode.Decoder ComputeIngredientAmount200Response
computeIngredientAmount200ResponseDecoder =
    Json.Decode.succeed ComputeIngredientAmount200Response
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 


connectUser200ResponseDecoder : Json.Decode.Decoder ConnectUser200Response
connectUser200ResponseDecoder =
    Json.Decode.succeed ConnectUser200Response
        |> decode "username" Json.Decode.string 
        |> decode "hash" Json.Decode.string 


connectUserRequestDecoder : Json.Decode.Decoder ConnectUserRequest
connectUserRequestDecoder =
    Json.Decode.succeed ConnectUserRequest
        |> decode "username" Json.Decode.string 
        |> decode "firstName" Json.Decode.string 
        |> decode "lastName" Json.Decode.string 
        |> decode "email" Json.Decode.string 


convertAmounts200ResponseDecoder : Json.Decode.Decoder ConvertAmounts200Response
convertAmounts200ResponseDecoder =
    Json.Decode.succeed ConvertAmounts200Response
        |> decode "sourceAmount" Json.Decode.float 
        |> decode "sourceUnit" Json.Decode.string 
        |> decode "targetAmount" Json.Decode.float 
        |> decode "targetUnit" Json.Decode.string 
        |> decode "answer" Json.Decode.string 


createRecipeCard200ResponseDecoder : Json.Decode.Decoder CreateRecipeCard200Response
createRecipeCard200ResponseDecoder =
    Json.Decode.succeed CreateRecipeCard200Response
        |> decode "url" Json.Decode.string 


detectFoodInText200ResponseDecoder : Json.Decode.Decoder DetectFoodInText200Response
detectFoodInText200ResponseDecoder =
    Json.Decode.succeed DetectFoodInText200Response
        |> decode "annotations" (Json.Decode.list detectFoodInText200ResponseAnnotationsInnerDecoder) 


detectFoodInText200ResponseAnnotationsInnerDecoder : Json.Decode.Decoder DetectFoodInText200ResponseAnnotationsInner
detectFoodInText200ResponseAnnotationsInnerDecoder =
    Json.Decode.succeed DetectFoodInText200ResponseAnnotationsInner
        |> decode "annotation" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "tag" Json.Decode.string 


generateMealPlan200ResponseDecoder : Json.Decode.Decoder GenerateMealPlan200Response
generateMealPlan200ResponseDecoder =
    Json.Decode.succeed GenerateMealPlan200Response
        |> decode "meals" (Json.Decode.list getSimilarRecipes200ResponseInnerDecoder) 
        |> decode "nutrients" generateMealPlan200ResponseNutrientsDecoder 


generateMealPlan200ResponseNutrientsDecoder : Json.Decode.Decoder GenerateMealPlan200ResponseNutrients
generateMealPlan200ResponseNutrientsDecoder =
    Json.Decode.succeed GenerateMealPlan200ResponseNutrients
        |> decode "calories" Json.Decode.float 
        |> decode "carbohydrates" Json.Decode.float 
        |> decode "fat" Json.Decode.float 
        |> decode "protein" Json.Decode.float 


generateShoppingList200ResponseDecoder : Json.Decode.Decoder GenerateShoppingList200Response
generateShoppingList200ResponseDecoder =
    Json.Decode.succeed GenerateShoppingList200Response
        |> decode "aisles" (Json.Decode.list getShoppingList200ResponseAislesInnerDecoder) 
        |> decode "cost" Json.Decode.float 
        |> decode "startDate" Json.Decode.float 
        |> decode "endDate" Json.Decode.float 


getARandomFoodJoke200ResponseDecoder : Json.Decode.Decoder GetARandomFoodJoke200Response
getARandomFoodJoke200ResponseDecoder =
    Json.Decode.succeed GetARandomFoodJoke200Response
        |> decode "text" Json.Decode.string 


getAnalyzedRecipeInstructions200ResponseDecoder : Json.Decode.Decoder GetAnalyzedRecipeInstructions200Response
getAnalyzedRecipeInstructions200ResponseDecoder =
    Json.Decode.succeed GetAnalyzedRecipeInstructions200Response
        |> decode "parsedInstructions" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerDecoder) 
        |> decode "ingredients" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseIngredientsInnerDecoder) 
        |> decode "equipment" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseIngredientsInnerDecoder) 


getAnalyzedRecipeInstructions200ResponseIngredientsInnerDecoder : Json.Decode.Decoder GetAnalyzedRecipeInstructions200ResponseIngredientsInner
getAnalyzedRecipeInstructions200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed GetAnalyzedRecipeInstructions200ResponseIngredientsInner
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 


getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerDecoder : Json.Decode.Decoder GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner
getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerDecoder =
    Json.Decode.succeed GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInner
        |> decode "name" Json.Decode.string 
        |> maybeDecode "steps" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder) Nothing


getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder : Json.Decode.Decoder GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerDecoder =
    Json.Decode.succeed GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
        |> decode "number" Json.Decode.float 
        |> decode "step" Json.Decode.string 
        |> maybeDecode "ingredients" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder) Nothing
        |> maybeDecode "equipment" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder) Nothing


getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder : Json.Decode.Decoder GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
getAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInnerDecoder =
    Json.Decode.succeed GetAnalyzedRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerIngredientsInner
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "localizedName" Json.Decode.string 
        |> decode "image" Json.Decode.string 


getComparableProducts200ResponseDecoder : Json.Decode.Decoder GetComparableProducts200Response
getComparableProducts200ResponseDecoder =
    Json.Decode.succeed GetComparableProducts200Response
        |> decode "comparableProducts" getComparableProducts200ResponseComparableProductsDecoder 


getComparableProducts200ResponseComparableProductsDecoder : Json.Decode.Decoder GetComparableProducts200ResponseComparableProducts
getComparableProducts200ResponseComparableProductsDecoder =
    Json.Decode.succeed GetComparableProducts200ResponseComparableProducts
        |> decode "calories" (Json.Decode.list objectDecoder) 
        |> decode "likes" (Json.Decode.list objectDecoder) 
        |> decode "price" (Json.Decode.list objectDecoder) 
        |> decode "protein" (Json.Decode.list getComparableProducts200ResponseComparableProductsProteinInnerDecoder) 
        |> decode "spoonacularScore" (Json.Decode.list getComparableProducts200ResponseComparableProductsProteinInnerDecoder) 
        |> decode "sugar" (Json.Decode.list objectDecoder) 


getComparableProducts200ResponseComparableProductsProteinInnerDecoder : Json.Decode.Decoder GetComparableProducts200ResponseComparableProductsProteinInner
getComparableProducts200ResponseComparableProductsProteinInnerDecoder =
    Json.Decode.succeed GetComparableProducts200ResponseComparableProductsProteinInner
        |> decode "difference" Json.Decode.float 
        |> decode "id" Json.Decode.int 
        |> decode "image" Json.Decode.string 
        |> decode "title" Json.Decode.string 


getConversationSuggests200ResponseDecoder : Json.Decode.Decoder GetConversationSuggests200Response
getConversationSuggests200ResponseDecoder =
    Json.Decode.succeed GetConversationSuggests200Response
        |> decode "suggests" getConversationSuggests200ResponseSuggestsDecoder 
        |> decode "words" (Json.Decode.list Json.Decode.string) 


getConversationSuggests200ResponseSuggestsDecoder : Json.Decode.Decoder GetConversationSuggests200ResponseSuggests
getConversationSuggests200ResponseSuggestsDecoder =
    Json.Decode.succeed GetConversationSuggests200ResponseSuggests
        |> decode "_" (Json.Decode.list getConversationSuggests200ResponseSuggestsInnerDecoder) 


getConversationSuggests200ResponseSuggestsInnerDecoder : Json.Decode.Decoder GetConversationSuggests200ResponseSuggestsInner
getConversationSuggests200ResponseSuggestsInnerDecoder =
    Json.Decode.succeed GetConversationSuggests200ResponseSuggestsInner
        |> decode "name" Json.Decode.string 


getDishPairingForWine200ResponseDecoder : Json.Decode.Decoder GetDishPairingForWine200Response
getDishPairingForWine200ResponseDecoder =
    Json.Decode.succeed GetDishPairingForWine200Response
        |> decode "pairings" (Json.Decode.list Json.Decode.string) 
        |> decode "text" Json.Decode.string 


getIngredientInformation200ResponseDecoder : Json.Decode.Decoder GetIngredientInformation200Response
getIngredientInformation200ResponseDecoder =
    Json.Decode.succeed GetIngredientInformation200Response
        |> decode "id" Json.Decode.int 
        |> decode "original" Json.Decode.string 
        |> decode "originalName" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "nameClean" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 
        |> decode "unitShort" Json.Decode.string 
        |> decode "unitLong" Json.Decode.string 
        |> decode "possibleUnits" (Json.Decode.list Json.Decode.string) 
        |> decode "estimatedCost" parseIngredients200ResponseInnerEstimatedCostDecoder 
        |> decode "consistency" Json.Decode.string 
        |> decode "shoppingListUnits" (Json.Decode.list Json.Decode.string) 
        |> decode "aisle" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "meta" (Json.Decode.list objectDecoder) 
        |> decode "nutrition" getIngredientInformation200ResponseNutritionDecoder 
        |> decode "categoryPath" (Json.Decode.list Json.Decode.string) 


getIngredientInformation200ResponseNutritionDecoder : Json.Decode.Decoder GetIngredientInformation200ResponseNutrition
getIngredientInformation200ResponseNutritionDecoder =
    Json.Decode.succeed GetIngredientInformation200ResponseNutrition
        |> decode "nutrients" (Json.Decode.list parseIngredients200ResponseInnerNutritionNutrientsInnerDecoder) 
        |> decode "properties" (Json.Decode.list parseIngredients200ResponseInnerNutritionPropertiesInnerDecoder) 
        |> decode "caloricBreakdown" parseIngredients200ResponseInnerNutritionCaloricBreakdownDecoder 
        |> decode "weightPerServing" parseIngredients200ResponseInnerNutritionWeightPerServingDecoder 


getIngredientSubstitutes200ResponseDecoder : Json.Decode.Decoder GetIngredientSubstitutes200Response
getIngredientSubstitutes200ResponseDecoder =
    Json.Decode.succeed GetIngredientSubstitutes200Response
        |> decode "ingredient" Json.Decode.string 
        |> decode "substitutes" (Json.Decode.list Json.Decode.string) 
        |> decode "message" Json.Decode.string 


getMealPlanTemplate200ResponseDecoder : Json.Decode.Decoder GetMealPlanTemplate200Response
getMealPlanTemplate200ResponseDecoder =
    Json.Decode.succeed GetMealPlanTemplate200Response
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "days" (Json.Decode.list getMealPlanTemplate200ResponseDaysInnerDecoder) 


getMealPlanTemplate200ResponseDaysInnerDecoder : Json.Decode.Decoder GetMealPlanTemplate200ResponseDaysInner
getMealPlanTemplate200ResponseDaysInnerDecoder =
    Json.Decode.succeed GetMealPlanTemplate200ResponseDaysInner
        |> maybeDecode "nutritionSummary" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> maybeDecode "nutritionSummaryBreakfast" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> maybeDecode "nutritionSummaryLunch" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> maybeDecode "nutritionSummaryDinner" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> decode "day" Json.Decode.string 
        |> maybeDecode "items" (Json.Decode.list getMealPlanTemplate200ResponseDaysInnerItemsInnerDecoder) Nothing


getMealPlanTemplate200ResponseDaysInnerItemsInnerDecoder : Json.Decode.Decoder GetMealPlanTemplate200ResponseDaysInnerItemsInner
getMealPlanTemplate200ResponseDaysInnerItemsInnerDecoder =
    Json.Decode.succeed GetMealPlanTemplate200ResponseDaysInnerItemsInner
        |> decode "id" Json.Decode.int 
        |> decode "slot" Json.Decode.int 
        |> decode "position" Json.Decode.int 
        |> decode "type" Json.Decode.string 
        |> maybeDecode "value" getMealPlanTemplate200ResponseDaysInnerItemsInnerValueDecoder Nothing


getMealPlanTemplate200ResponseDaysInnerItemsInnerValueDecoder : Json.Decode.Decoder GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue
getMealPlanTemplate200ResponseDaysInnerItemsInnerValueDecoder =
    Json.Decode.succeed GetMealPlanTemplate200ResponseDaysInnerItemsInnerValue
        |> decode "id" Json.Decode.float 
        |> decode "title" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 


getMealPlanTemplates200ResponseDecoder : Json.Decode.Decoder GetMealPlanTemplates200Response
getMealPlanTemplates200ResponseDecoder =
    Json.Decode.succeed GetMealPlanTemplates200Response
        |> decode "templates" (Json.Decode.list getAnalyzedRecipeInstructions200ResponseIngredientsInnerDecoder) 


getMealPlanWeek200ResponseDecoder : Json.Decode.Decoder GetMealPlanWeek200Response
getMealPlanWeek200ResponseDecoder =
    Json.Decode.succeed GetMealPlanWeek200Response
        |> decode "days" (Json.Decode.list getMealPlanWeek200ResponseDaysInnerDecoder) 


getMealPlanWeek200ResponseDaysInnerDecoder : Json.Decode.Decoder GetMealPlanWeek200ResponseDaysInner
getMealPlanWeek200ResponseDaysInnerDecoder =
    Json.Decode.succeed GetMealPlanWeek200ResponseDaysInner
        |> maybeDecode "nutritionSummary" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> maybeDecode "nutritionSummaryBreakfast" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> maybeDecode "nutritionSummaryLunch" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> maybeDecode "nutritionSummaryDinner" getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder Nothing
        |> decode "date" Json.Decode.float 
        |> decode "day" Json.Decode.string 
        |> maybeDecode "items" (Json.Decode.list getMealPlanWeek200ResponseDaysInnerItemsInnerDecoder) Nothing


getMealPlanWeek200ResponseDaysInnerItemsInnerDecoder : Json.Decode.Decoder GetMealPlanWeek200ResponseDaysInnerItemsInner
getMealPlanWeek200ResponseDaysInnerItemsInnerDecoder =
    Json.Decode.succeed GetMealPlanWeek200ResponseDaysInnerItemsInner
        |> decode "id" Json.Decode.int 
        |> decode "slot" Json.Decode.int 
        |> decode "position" Json.Decode.int 
        |> decode "type" Json.Decode.string 
        |> maybeDecode "value" getMealPlanWeek200ResponseDaysInnerItemsInnerValueDecoder Nothing


getMealPlanWeek200ResponseDaysInnerItemsInnerValueDecoder : Json.Decode.Decoder GetMealPlanWeek200ResponseDaysInnerItemsInnerValue
getMealPlanWeek200ResponseDaysInnerItemsInnerValueDecoder =
    Json.Decode.succeed GetMealPlanWeek200ResponseDaysInnerItemsInnerValue
        |> decode "servings" Json.Decode.float 
        |> decode "id" Json.Decode.float 
        |> decode "title" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 


getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder : Json.Decode.Decoder GetMealPlanWeek200ResponseDaysInnerNutritionSummary
getMealPlanWeek200ResponseDaysInnerNutritionSummaryDecoder =
    Json.Decode.succeed GetMealPlanWeek200ResponseDaysInnerNutritionSummary
        |> decode "nutrients" (Json.Decode.list getMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerDecoder) 


getMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerDecoder : Json.Decode.Decoder GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner
getMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInnerDecoder =
    Json.Decode.succeed GetMealPlanWeek200ResponseDaysInnerNutritionSummaryNutrientsInner
        |> decode "name" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 
        |> decode "percentDailyNeeds" Json.Decode.float 


getMenuItemInformation200ResponseDecoder : Json.Decode.Decoder GetMenuItemInformation200Response
getMenuItemInformation200ResponseDecoder =
    Json.Decode.succeed GetMenuItemInformation200Response
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "restaurantChain" Json.Decode.string 
        |> decode "nutrition" searchGroceryProductsByUPC200ResponseNutritionDecoder 
        |> decode "badges" (Json.Decode.list Json.Decode.string) 
        |> decode "breadcrumbs" (Json.Decode.list Json.Decode.string) 
        |> maybeDecode "generatedText" Json.Decode.string Nothing
        |> decode "imageType" Json.Decode.string 
        |> decode "likes" Json.Decode.float 
        |> decode "servings" searchGroceryProductsByUPC200ResponseServingsDecoder 
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "spoonacularScore" Json.Decode.float Nothing


getProductInformation200ResponseDecoder : Json.Decode.Decoder GetProductInformation200Response
getProductInformation200ResponseDecoder =
    Json.Decode.succeed GetProductInformation200Response
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "breadcrumbs" (Json.Decode.list Json.Decode.string) 
        |> decode "imageType" Json.Decode.string 
        |> decode "badges" (Json.Decode.list Json.Decode.string) 
        |> decode "importantBadges" (Json.Decode.list Json.Decode.string) 
        |> decode "ingredientCount" Json.Decode.int 
        |> maybeDecode "generatedText" Json.Decode.string Nothing
        |> decode "ingredientList" Json.Decode.string 
        |> decode "ingredients" (Json.Decode.list getProductInformation200ResponseIngredientsInnerDecoder) 
        |> decode "likes" Json.Decode.float 
        |> decode "aisle" Json.Decode.string 
        |> decode "nutrition" searchGroceryProductsByUPC200ResponseNutritionDecoder 
        |> decode "price" Json.Decode.float 
        |> decode "servings" searchGroceryProductsByUPC200ResponseServingsDecoder 
        |> decode "spoonacularScore" Json.Decode.float 


getProductInformation200ResponseIngredientsInnerDecoder : Json.Decode.Decoder GetProductInformation200ResponseIngredientsInner
getProductInformation200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed GetProductInformation200ResponseIngredientsInner
        |> maybeDecode "description" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string 
        |> maybeDecode "safety_level" Json.Decode.string Nothing


getRandomFoodTrivia200ResponseDecoder : Json.Decode.Decoder GetRandomFoodTrivia200Response
getRandomFoodTrivia200ResponseDecoder =
    Json.Decode.succeed GetRandomFoodTrivia200Response
        |> decode "text" Json.Decode.string 


getRandomRecipes200ResponseDecoder : Json.Decode.Decoder GetRandomRecipes200Response
getRandomRecipes200ResponseDecoder =
    Json.Decode.succeed GetRandomRecipes200Response
        |> decode "recipes" (Json.Decode.list getRandomRecipes200ResponseRecipesInnerDecoder) 


getRandomRecipes200ResponseRecipesInnerDecoder : Json.Decode.Decoder GetRandomRecipes200ResponseRecipesInner
getRandomRecipes200ResponseRecipesInnerDecoder =
    Json.Decode.succeed GetRandomRecipes200ResponseRecipesInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "servings" Json.Decode.float 
        |> decode "readyInMinutes" Json.Decode.int 
        |> decode "license" Json.Decode.string 
        |> decode "sourceName" Json.Decode.string 
        |> decode "sourceUrl" Json.Decode.string 
        |> decode "spoonacularSourceUrl" Json.Decode.string 
        |> decode "aggregateLikes" Json.Decode.float 
        |> decode "healthScore" Json.Decode.float 
        |> decode "spoonacularScore" Json.Decode.float 
        |> decode "pricePerServing" Json.Decode.float 
        |> maybeDecode "analyzedInstructions" (Json.Decode.list objectDecoder) Nothing
        |> decode "cheap" Json.Decode.bool 
        |> decode "creditsText" Json.Decode.string 
        |> maybeDecode "cuisines" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "dairyFree" Json.Decode.bool 
        |> maybeDecode "diets" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "gaps" Json.Decode.string 
        |> decode "glutenFree" Json.Decode.bool 
        |> decode "instructions" Json.Decode.string 
        |> decode "ketogenic" Json.Decode.bool 
        |> decode "lowFodmap" Json.Decode.bool 
        |> maybeDecode "occasions" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "sustainable" Json.Decode.bool 
        |> decode "vegan" Json.Decode.bool 
        |> decode "vegetarian" Json.Decode.bool 
        |> decode "veryHealthy" Json.Decode.bool 
        |> decode "veryPopular" Json.Decode.bool 
        |> decode "whole30" Json.Decode.bool 
        |> decode "weightWatcherSmartPoints" Json.Decode.float 
        |> maybeDecode "dishTypes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "extendedIngredients" (Json.Decode.list getRecipeInformation200ResponseExtendedIngredientsInnerDecoder) Nothing
        |> decode "summary" Json.Decode.string 
        |> maybeDecode "winePairing" getRecipeInformation200ResponseWinePairingDecoder Nothing


getRecipeEquipmentByID200ResponseDecoder : Json.Decode.Decoder GetRecipeEquipmentByID200Response
getRecipeEquipmentByID200ResponseDecoder =
    Json.Decode.succeed GetRecipeEquipmentByID200Response
        |> decode "equipment" (Json.Decode.list getRecipeEquipmentByID200ResponseEquipmentInnerDecoder) 


getRecipeEquipmentByID200ResponseEquipmentInnerDecoder : Json.Decode.Decoder GetRecipeEquipmentByID200ResponseEquipmentInner
getRecipeEquipmentByID200ResponseEquipmentInnerDecoder =
    Json.Decode.succeed GetRecipeEquipmentByID200ResponseEquipmentInner
        |> decode "image" Json.Decode.string 
        |> decode "name" Json.Decode.string 


getRecipeInformation200ResponseDecoder : Json.Decode.Decoder GetRecipeInformation200Response
getRecipeInformation200ResponseDecoder =
    Json.Decode.succeed GetRecipeInformation200Response
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "servings" Json.Decode.float 
        |> decode "readyInMinutes" Json.Decode.int 
        |> decode "license" Json.Decode.string 
        |> decode "sourceName" Json.Decode.string 
        |> decode "sourceUrl" Json.Decode.string 
        |> decode "spoonacularSourceUrl" Json.Decode.string 
        |> decode "aggregateLikes" Json.Decode.int 
        |> decode "healthScore" Json.Decode.float 
        |> decode "spoonacularScore" Json.Decode.float 
        |> decode "pricePerServing" Json.Decode.float 
        |> decode "analyzedInstructions" (Json.Decode.list objectDecoder) 
        |> decode "cheap" Json.Decode.bool 
        |> decode "creditsText" Json.Decode.string 
        |> decode "cuisines" (Json.Decode.list Json.Decode.string) 
        |> decode "dairyFree" Json.Decode.bool 
        |> decode "diets" (Json.Decode.list Json.Decode.string) 
        |> decode "gaps" Json.Decode.string 
        |> decode "glutenFree" Json.Decode.bool 
        |> decode "instructions" Json.Decode.string 
        |> decode "ketogenic" Json.Decode.bool 
        |> decode "lowFodmap" Json.Decode.bool 
        |> decode "occasions" (Json.Decode.list Json.Decode.string) 
        |> decode "sustainable" Json.Decode.bool 
        |> decode "vegan" Json.Decode.bool 
        |> decode "vegetarian" Json.Decode.bool 
        |> decode "veryHealthy" Json.Decode.bool 
        |> decode "veryPopular" Json.Decode.bool 
        |> decode "whole30" Json.Decode.bool 
        |> decode "weightWatcherSmartPoints" Json.Decode.float 
        |> decode "dishTypes" (Json.Decode.list Json.Decode.string) 
        |> decode "extendedIngredients" (Json.Decode.list getRecipeInformation200ResponseExtendedIngredientsInnerDecoder) 
        |> decode "summary" Json.Decode.string 
        |> decode "winePairing" getRecipeInformation200ResponseWinePairingDecoder 


getRecipeInformation200ResponseExtendedIngredientsInnerDecoder : Json.Decode.Decoder GetRecipeInformation200ResponseExtendedIngredientsInner
getRecipeInformation200ResponseExtendedIngredientsInnerDecoder =
    Json.Decode.succeed GetRecipeInformation200ResponseExtendedIngredientsInner
        |> decode "aisle" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "consitency" Json.Decode.string 
        |> decode "id" Json.Decode.int 
        |> decode "image" Json.Decode.string 
        |> maybeDecode "measures" getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresDecoder Nothing
        |> maybeDecode "meta" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "name" Json.Decode.string 
        |> decode "original" Json.Decode.string 
        |> decode "originalName" Json.Decode.string 
        |> decode "unit" Json.Decode.string 


getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresDecoder : Json.Decode.Decoder GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures
getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresDecoder =
    Json.Decode.succeed GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures
        |> decode "metric" getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricDecoder 
        |> decode "us" getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricDecoder 


getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricDecoder : Json.Decode.Decoder GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric
getRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetricDecoder =
    Json.Decode.succeed GetRecipeInformation200ResponseExtendedIngredientsInnerMeasuresMetric
        |> decode "amount" Json.Decode.float 
        |> decode "unitLong" Json.Decode.string 
        |> decode "unitShort" Json.Decode.string 


getRecipeInformation200ResponseWinePairingDecoder : Json.Decode.Decoder GetRecipeInformation200ResponseWinePairing
getRecipeInformation200ResponseWinePairingDecoder =
    Json.Decode.succeed GetRecipeInformation200ResponseWinePairing
        |> decode "pairedWines" (Json.Decode.list Json.Decode.string) 
        |> decode "pairingText" Json.Decode.string 
        |> decode "productMatches" (Json.Decode.list getRecipeInformation200ResponseWinePairingProductMatchesInnerDecoder) 


getRecipeInformation200ResponseWinePairingProductMatchesInnerDecoder : Json.Decode.Decoder GetRecipeInformation200ResponseWinePairingProductMatchesInner
getRecipeInformation200ResponseWinePairingProductMatchesInnerDecoder =
    Json.Decode.succeed GetRecipeInformation200ResponseWinePairingProductMatchesInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "description" Json.Decode.string 
        |> decode "price" Json.Decode.string 
        |> decode "imageUrl" Json.Decode.string 
        |> decode "averageRating" Json.Decode.float 
        |> decode "ratingCount" Json.Decode.int 
        |> decode "score" Json.Decode.float 
        |> decode "link" Json.Decode.string 


getRecipeInformationBulk200ResponseInnerDecoder : Json.Decode.Decoder GetRecipeInformationBulk200ResponseInner
getRecipeInformationBulk200ResponseInnerDecoder =
    Json.Decode.succeed GetRecipeInformationBulk200ResponseInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "servings" Json.Decode.float 
        |> decode "readyInMinutes" Json.Decode.int 
        |> decode "license" Json.Decode.string 
        |> decode "sourceName" Json.Decode.string 
        |> decode "sourceUrl" Json.Decode.string 
        |> decode "spoonacularSourceUrl" Json.Decode.string 
        |> decode "aggregateLikes" Json.Decode.int 
        |> decode "healthScore" Json.Decode.float 
        |> decode "spoonacularScore" Json.Decode.float 
        |> decode "pricePerServing" Json.Decode.float 
        |> decode "analyzedInstructions" (Json.Decode.list Json.Decode.string) 
        |> decode "cheap" Json.Decode.bool 
        |> decode "creditsText" Json.Decode.string 
        |> decode "cuisines" (Json.Decode.list Json.Decode.string) 
        |> decode "dairyFree" Json.Decode.bool 
        |> decode "diets" (Json.Decode.list Json.Decode.string) 
        |> decode "gaps" Json.Decode.string 
        |> decode "glutenFree" Json.Decode.bool 
        |> decode "instructions" Json.Decode.string 
        |> decode "ketogenic" Json.Decode.bool 
        |> decode "lowFodmap" Json.Decode.bool 
        |> decode "occasions" (Json.Decode.list Json.Decode.string) 
        |> decode "sustainable" Json.Decode.bool 
        |> decode "vegan" Json.Decode.bool 
        |> decode "vegetarian" Json.Decode.bool 
        |> decode "veryHealthy" Json.Decode.bool 
        |> decode "veryPopular" Json.Decode.bool 
        |> decode "whole30" Json.Decode.bool 
        |> decode "weightWatcherSmartPoints" Json.Decode.float 
        |> decode "dishTypes" (Json.Decode.list Json.Decode.string) 
        |> decode "extendedIngredients" (Json.Decode.list getRecipeInformation200ResponseExtendedIngredientsInnerDecoder) 
        |> decode "summary" Json.Decode.string 
        |> decode "winePairing" getRecipeInformation200ResponseWinePairingDecoder 


getRecipeIngredientsByID200ResponseDecoder : Json.Decode.Decoder GetRecipeIngredientsByID200Response
getRecipeIngredientsByID200ResponseDecoder =
    Json.Decode.succeed GetRecipeIngredientsByID200Response
        |> decode "ingredients" (Json.Decode.list getRecipeIngredientsByID200ResponseIngredientsInnerDecoder) 


getRecipeIngredientsByID200ResponseIngredientsInnerDecoder : Json.Decode.Decoder GetRecipeIngredientsByID200ResponseIngredientsInner
getRecipeIngredientsByID200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed GetRecipeIngredientsByID200ResponseIngredientsInner
        |> maybeDecode "amount" getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountDecoder Nothing
        |> decode "image" Json.Decode.string 
        |> decode "name" Json.Decode.string 


getRecipeNutritionWidgetByID200ResponseDecoder : Json.Decode.Decoder GetRecipeNutritionWidgetByID200Response
getRecipeNutritionWidgetByID200ResponseDecoder =
    Json.Decode.succeed GetRecipeNutritionWidgetByID200Response
        |> decode "calories" Json.Decode.string 
        |> decode "carbs" Json.Decode.string 
        |> decode "fat" Json.Decode.string 
        |> decode "protein" Json.Decode.string 
        |> decode "bad" (Json.Decode.list getRecipeNutritionWidgetByID200ResponseBadInnerDecoder) 
        |> decode "good" (Json.Decode.list getRecipeNutritionWidgetByID200ResponseGoodInnerDecoder) 


getRecipeNutritionWidgetByID200ResponseBadInnerDecoder : Json.Decode.Decoder GetRecipeNutritionWidgetByID200ResponseBadInner
getRecipeNutritionWidgetByID200ResponseBadInnerDecoder =
    Json.Decode.succeed GetRecipeNutritionWidgetByID200ResponseBadInner
        |> decode "name" Json.Decode.string 
        |> decode "amount" Json.Decode.string 
        |> decode "indented" Json.Decode.bool 
        |> decode "percentOfDailyNeeds" Json.Decode.float 


getRecipeNutritionWidgetByID200ResponseGoodInnerDecoder : Json.Decode.Decoder GetRecipeNutritionWidgetByID200ResponseGoodInner
getRecipeNutritionWidgetByID200ResponseGoodInnerDecoder =
    Json.Decode.succeed GetRecipeNutritionWidgetByID200ResponseGoodInner
        |> decode "amount" Json.Decode.string 
        |> decode "indented" Json.Decode.bool 
        |> decode "percentOfDailyNeeds" Json.Decode.float 
        |> decode "name" Json.Decode.string 


getRecipePriceBreakdownByID200ResponseDecoder : Json.Decode.Decoder GetRecipePriceBreakdownByID200Response
getRecipePriceBreakdownByID200ResponseDecoder =
    Json.Decode.succeed GetRecipePriceBreakdownByID200Response
        |> decode "ingredients" (Json.Decode.list getRecipePriceBreakdownByID200ResponseIngredientsInnerDecoder) 
        |> decode "totalCost" Json.Decode.float 
        |> decode "totalCostPerServing" Json.Decode.float 


getRecipePriceBreakdownByID200ResponseIngredientsInnerDecoder : Json.Decode.Decoder GetRecipePriceBreakdownByID200ResponseIngredientsInner
getRecipePriceBreakdownByID200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed GetRecipePriceBreakdownByID200ResponseIngredientsInner
        |> maybeDecode "amount" getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountDecoder Nothing
        |> decode "image" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "price" Json.Decode.float 


getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountDecoder : Json.Decode.Decoder GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount
getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountDecoder =
    Json.Decode.succeed GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmount
        |> decode "metric" getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricDecoder 
        |> decode "us" getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricDecoder 


getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricDecoder : Json.Decode.Decoder GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
getRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetricDecoder =
    Json.Decode.succeed GetRecipePriceBreakdownByID200ResponseIngredientsInnerAmountMetric
        |> decode "unit" Json.Decode.string 
        |> decode "value" Json.Decode.float 


getRecipeTasteByID200ResponseDecoder : Json.Decode.Decoder GetRecipeTasteByID200Response
getRecipeTasteByID200ResponseDecoder =
    Json.Decode.succeed GetRecipeTasteByID200Response
        |> decode "sweetness" Json.Decode.float 
        |> decode "saltiness" Json.Decode.float 
        |> decode "sourness" Json.Decode.float 
        |> decode "bitterness" Json.Decode.float 
        |> decode "savoriness" Json.Decode.float 
        |> decode "fattiness" Json.Decode.float 
        |> decode "spiciness" Json.Decode.float 


getShoppingList200ResponseDecoder : Json.Decode.Decoder GetShoppingList200Response
getShoppingList200ResponseDecoder =
    Json.Decode.succeed GetShoppingList200Response
        |> decode "aisles" (Json.Decode.list getShoppingList200ResponseAislesInnerDecoder) 
        |> decode "cost" Json.Decode.float 
        |> decode "startDate" Json.Decode.float 
        |> decode "endDate" Json.Decode.float 


getShoppingList200ResponseAislesInnerDecoder : Json.Decode.Decoder GetShoppingList200ResponseAislesInner
getShoppingList200ResponseAislesInnerDecoder =
    Json.Decode.succeed GetShoppingList200ResponseAislesInner
        |> decode "aisle" Json.Decode.string 
        |> maybeDecode "items" (Json.Decode.list getShoppingList200ResponseAislesInnerItemsInnerDecoder) Nothing


getShoppingList200ResponseAislesInnerItemsInnerDecoder : Json.Decode.Decoder GetShoppingList200ResponseAislesInnerItemsInner
getShoppingList200ResponseAislesInnerItemsInnerDecoder =
    Json.Decode.succeed GetShoppingList200ResponseAislesInnerItemsInner
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> maybeDecode "measures" getShoppingList200ResponseAislesInnerItemsInnerMeasuresDecoder Nothing
        |> decode "pantryItem" Json.Decode.bool 
        |> decode "aisle" Json.Decode.string 
        |> decode "cost" Json.Decode.float 
        |> decode "ingredientId" Json.Decode.int 


getShoppingList200ResponseAislesInnerItemsInnerMeasuresDecoder : Json.Decode.Decoder GetShoppingList200ResponseAislesInnerItemsInnerMeasures
getShoppingList200ResponseAislesInnerItemsInnerMeasuresDecoder =
    Json.Decode.succeed GetShoppingList200ResponseAislesInnerItemsInnerMeasures
        |> decode "original" parseIngredients200ResponseInnerNutritionWeightPerServingDecoder 
        |> decode "metric" parseIngredients200ResponseInnerNutritionWeightPerServingDecoder 
        |> decode "us" parseIngredients200ResponseInnerNutritionWeightPerServingDecoder 


getSimilarRecipes200ResponseInnerDecoder : Json.Decode.Decoder GetSimilarRecipes200ResponseInner
getSimilarRecipes200ResponseInnerDecoder =
    Json.Decode.succeed GetSimilarRecipes200ResponseInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "readyInMinutes" Json.Decode.int 
        |> decode "servings" Json.Decode.float 
        |> decode "sourceUrl" Json.Decode.string 


getWineDescription200ResponseDecoder : Json.Decode.Decoder GetWineDescription200Response
getWineDescription200ResponseDecoder =
    Json.Decode.succeed GetWineDescription200Response
        |> decode "wineDescription" Json.Decode.string 


getWinePairing200ResponseDecoder : Json.Decode.Decoder GetWinePairing200Response
getWinePairing200ResponseDecoder =
    Json.Decode.succeed GetWinePairing200Response
        |> decode "pairedWines" (Json.Decode.list Json.Decode.string) 
        |> decode "pairingText" Json.Decode.string 
        |> decode "productMatches" (Json.Decode.list getWinePairing200ResponseProductMatchesInnerDecoder) 


getWinePairing200ResponseProductMatchesInnerDecoder : Json.Decode.Decoder GetWinePairing200ResponseProductMatchesInner
getWinePairing200ResponseProductMatchesInnerDecoder =
    Json.Decode.succeed GetWinePairing200ResponseProductMatchesInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "averageRating" Json.Decode.float 
        |> maybeDecode "description" Json.Decode.string Nothing
        |> decode "imageUrl" Json.Decode.string 
        |> decode "link" Json.Decode.string 
        |> decode "price" Json.Decode.string 
        |> decode "ratingCount" Json.Decode.int 
        |> decode "score" Json.Decode.float 


getWineRecommendation200ResponseDecoder : Json.Decode.Decoder GetWineRecommendation200Response
getWineRecommendation200ResponseDecoder =
    Json.Decode.succeed GetWineRecommendation200Response
        |> decode "recommendedWines" (Json.Decode.list getWineRecommendation200ResponseRecommendedWinesInnerDecoder) 
        |> decode "totalFound" Json.Decode.int 


getWineRecommendation200ResponseRecommendedWinesInnerDecoder : Json.Decode.Decoder GetWineRecommendation200ResponseRecommendedWinesInner
getWineRecommendation200ResponseRecommendedWinesInnerDecoder =
    Json.Decode.succeed GetWineRecommendation200ResponseRecommendedWinesInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "averageRating" Json.Decode.float 
        |> decode "description" Json.Decode.string 
        |> decode "imageUrl" Json.Decode.string 
        |> decode "link" Json.Decode.string 
        |> decode "price" Json.Decode.string 
        |> decode "ratingCount" Json.Decode.int 
        |> decode "score" Json.Decode.float 


guessNutritionByDishName200ResponseDecoder : Json.Decode.Decoder GuessNutritionByDishName200Response
guessNutritionByDishName200ResponseDecoder =
    Json.Decode.succeed GuessNutritionByDishName200Response
        |> decode "calories" guessNutritionByDishName200ResponseCaloriesDecoder 
        |> decode "carbs" guessNutritionByDishName200ResponseCaloriesDecoder 
        |> decode "fat" guessNutritionByDishName200ResponseCaloriesDecoder 
        |> decode "protein" guessNutritionByDishName200ResponseCaloriesDecoder 
        |> decode "recipesUsed" Json.Decode.int 


guessNutritionByDishName200ResponseCaloriesDecoder : Json.Decode.Decoder GuessNutritionByDishName200ResponseCalories
guessNutritionByDishName200ResponseCaloriesDecoder =
    Json.Decode.succeed GuessNutritionByDishName200ResponseCalories
        |> decode "confidenceRange95Percent" guessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentDecoder 
        |> decode "standardDeviation" Json.Decode.float 
        |> decode "unit" Json.Decode.string 
        |> decode "value" Json.Decode.float 


guessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentDecoder : Json.Decode.Decoder GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent
guessNutritionByDishName200ResponseCaloriesConfidenceRange95PercentDecoder =
    Json.Decode.succeed GuessNutritionByDishName200ResponseCaloriesConfidenceRange95Percent
        |> decode "max" Json.Decode.float 
        |> decode "min" Json.Decode.float 


imageAnalysisByURL200ResponseDecoder : Json.Decode.Decoder ImageAnalysisByURL200Response
imageAnalysisByURL200ResponseDecoder =
    Json.Decode.succeed ImageAnalysisByURL200Response
        |> decode "nutrition" imageAnalysisByURL200ResponseNutritionDecoder 
        |> decode "category" imageAnalysisByURL200ResponseCategoryDecoder 
        |> decode "recipes" (Json.Decode.list imageAnalysisByURL200ResponseRecipesInnerDecoder) 


imageAnalysisByURL200ResponseCategoryDecoder : Json.Decode.Decoder ImageAnalysisByURL200ResponseCategory
imageAnalysisByURL200ResponseCategoryDecoder =
    Json.Decode.succeed ImageAnalysisByURL200ResponseCategory
        |> decode "name" Json.Decode.string 
        |> decode "probability" Json.Decode.float 


imageAnalysisByURL200ResponseNutritionDecoder : Json.Decode.Decoder ImageAnalysisByURL200ResponseNutrition
imageAnalysisByURL200ResponseNutritionDecoder =
    Json.Decode.succeed ImageAnalysisByURL200ResponseNutrition
        |> decode "recipesUsed" Json.Decode.int 
        |> decode "calories" imageAnalysisByURL200ResponseNutritionCaloriesDecoder 
        |> decode "fat" imageAnalysisByURL200ResponseNutritionCaloriesDecoder 
        |> decode "protein" imageAnalysisByURL200ResponseNutritionCaloriesDecoder 
        |> decode "carbs" imageAnalysisByURL200ResponseNutritionCaloriesDecoder 


imageAnalysisByURL200ResponseNutritionCaloriesDecoder : Json.Decode.Decoder ImageAnalysisByURL200ResponseNutritionCalories
imageAnalysisByURL200ResponseNutritionCaloriesDecoder =
    Json.Decode.succeed ImageAnalysisByURL200ResponseNutritionCalories
        |> decode "value" Json.Decode.float 
        |> decode "unit" Json.Decode.string 
        |> decode "confidenceRange95Percent" imageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentDecoder 
        |> decode "standardDeviation" Json.Decode.float 


imageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentDecoder : Json.Decode.Decoder ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
imageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95PercentDecoder =
    Json.Decode.succeed ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
        |> decode "min" Json.Decode.float 
        |> decode "max" Json.Decode.float 


imageAnalysisByURL200ResponseRecipesInnerDecoder : Json.Decode.Decoder ImageAnalysisByURL200ResponseRecipesInner
imageAnalysisByURL200ResponseRecipesInnerDecoder =
    Json.Decode.succeed ImageAnalysisByURL200ResponseRecipesInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "url" Json.Decode.string 


imageClassificationByURL200ResponseDecoder : Json.Decode.Decoder ImageClassificationByURL200Response
imageClassificationByURL200ResponseDecoder =
    Json.Decode.succeed ImageClassificationByURL200Response
        |> decode "category" Json.Decode.string 
        |> decode "probability" Json.Decode.float 


ingredientSearch200ResponseDecoder : Json.Decode.Decoder IngredientSearch200Response
ingredientSearch200ResponseDecoder =
    Json.Decode.succeed IngredientSearch200Response
        |> decode "results" (Json.Decode.list ingredientSearch200ResponseResultsInnerDecoder) 
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 
        |> decode "totalResults" Json.Decode.int 


ingredientSearch200ResponseResultsInnerDecoder : Json.Decode.Decoder IngredientSearch200ResponseResultsInner
ingredientSearch200ResponseResultsInnerDecoder =
    Json.Decode.succeed IngredientSearch200ResponseResultsInner
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "image" Json.Decode.string 


mapIngredientsToGroceryProducts200ResponseInnerDecoder : Json.Decode.Decoder MapIngredientsToGroceryProducts200ResponseInner
mapIngredientsToGroceryProducts200ResponseInnerDecoder =
    Json.Decode.succeed MapIngredientsToGroceryProducts200ResponseInner
        |> decode "original" Json.Decode.string 
        |> decode "originalName" Json.Decode.string 
        |> decode "ingredientImage" Json.Decode.string 
        |> decode "meta" (Json.Decode.list Json.Decode.string) 
        |> decode "products" (Json.Decode.list mapIngredientsToGroceryProducts200ResponseInnerProductsInnerDecoder) 


mapIngredientsToGroceryProducts200ResponseInnerProductsInnerDecoder : Json.Decode.Decoder MapIngredientsToGroceryProducts200ResponseInnerProductsInner
mapIngredientsToGroceryProducts200ResponseInnerProductsInnerDecoder =
    Json.Decode.succeed MapIngredientsToGroceryProducts200ResponseInnerProductsInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "upc" Json.Decode.string 


mapIngredientsToGroceryProductsRequestDecoder : Json.Decode.Decoder MapIngredientsToGroceryProductsRequest
mapIngredientsToGroceryProductsRequestDecoder =
    Json.Decode.succeed MapIngredientsToGroceryProductsRequest
        |> decode "ingredients" (Json.Decode.list Json.Decode.string) 
        |> decode "servings" Json.Decode.float 


parseIngredients200ResponseInnerDecoder : Json.Decode.Decoder ParseIngredients200ResponseInner
parseIngredients200ResponseInnerDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInner
        |> decode "id" Json.Decode.int 
        |> decode "original" Json.Decode.string 
        |> decode "originalName" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "nameClean" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 
        |> decode "unitShort" Json.Decode.string 
        |> decode "unitLong" Json.Decode.string 
        |> decode "possibleUnits" (Json.Decode.list Json.Decode.string) 
        |> decode "estimatedCost" parseIngredients200ResponseInnerEstimatedCostDecoder 
        |> decode "consistency" Json.Decode.string 
        |> decode "aisle" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "meta" (Json.Decode.list Json.Decode.string) 
        |> decode "nutrition" parseIngredients200ResponseInnerNutritionDecoder 


parseIngredients200ResponseInnerEstimatedCostDecoder : Json.Decode.Decoder ParseIngredients200ResponseInnerEstimatedCost
parseIngredients200ResponseInnerEstimatedCostDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInnerEstimatedCost
        |> decode "value" Json.Decode.float 
        |> decode "unit" Json.Decode.string 


parseIngredients200ResponseInnerNutritionDecoder : Json.Decode.Decoder ParseIngredients200ResponseInnerNutrition
parseIngredients200ResponseInnerNutritionDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInnerNutrition
        |> decode "nutrients" (Json.Decode.list parseIngredients200ResponseInnerNutritionNutrientsInnerDecoder) 
        |> decode "properties" (Json.Decode.list parseIngredients200ResponseInnerNutritionPropertiesInnerDecoder) 
        |> decode "flavonoids" (Json.Decode.list parseIngredients200ResponseInnerNutritionPropertiesInnerDecoder) 
        |> decode "caloricBreakdown" parseIngredients200ResponseInnerNutritionCaloricBreakdownDecoder 
        |> decode "weightPerServing" parseIngredients200ResponseInnerNutritionWeightPerServingDecoder 


parseIngredients200ResponseInnerNutritionCaloricBreakdownDecoder : Json.Decode.Decoder ParseIngredients200ResponseInnerNutritionCaloricBreakdown
parseIngredients200ResponseInnerNutritionCaloricBreakdownDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInnerNutritionCaloricBreakdown
        |> decode "percentProtein" Json.Decode.float 
        |> decode "percentFat" Json.Decode.float 
        |> decode "percentCarbs" Json.Decode.float 


parseIngredients200ResponseInnerNutritionNutrientsInnerDecoder : Json.Decode.Decoder ParseIngredients200ResponseInnerNutritionNutrientsInner
parseIngredients200ResponseInnerNutritionNutrientsInnerDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInnerNutritionNutrientsInner
        |> decode "name" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 
        |> decode "percentOfDailyNeeds" Json.Decode.float 


parseIngredients200ResponseInnerNutritionPropertiesInnerDecoder : Json.Decode.Decoder ParseIngredients200ResponseInnerNutritionPropertiesInner
parseIngredients200ResponseInnerNutritionPropertiesInnerDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInnerNutritionPropertiesInner
        |> decode "name" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 


parseIngredients200ResponseInnerNutritionWeightPerServingDecoder : Json.Decode.Decoder ParseIngredients200ResponseInnerNutritionWeightPerServing
parseIngredients200ResponseInnerNutritionWeightPerServingDecoder =
    Json.Decode.succeed ParseIngredients200ResponseInnerNutritionWeightPerServing
        |> decode "amount" Json.Decode.float 
        |> decode "unit" Json.Decode.string 


quickAnswer200ResponseDecoder : Json.Decode.Decoder QuickAnswer200Response
quickAnswer200ResponseDecoder =
    Json.Decode.succeed QuickAnswer200Response
        |> decode "answer" Json.Decode.string 
        |> decode "image" Json.Decode.string 


searchAllFood200ResponseDecoder : Json.Decode.Decoder SearchAllFood200Response
searchAllFood200ResponseDecoder =
    Json.Decode.succeed SearchAllFood200Response
        |> decode "query" Json.Decode.string 
        |> decode "totalResults" Json.Decode.int 
        |> decode "limit" Json.Decode.int 
        |> decode "offset" Json.Decode.int 
        |> decode "searchResults" (Json.Decode.list searchAllFood200ResponseSearchResultsInnerDecoder) 


searchAllFood200ResponseSearchResultsInnerDecoder : Json.Decode.Decoder SearchAllFood200ResponseSearchResultsInner
searchAllFood200ResponseSearchResultsInnerDecoder =
    Json.Decode.succeed SearchAllFood200ResponseSearchResultsInner
        |> decode "name" Json.Decode.string 
        |> decode "totalResults" Json.Decode.int 
        |> maybeDecode "results" (Json.Decode.list searchAllFood200ResponseSearchResultsInnerResultsInnerDecoder) Nothing


searchAllFood200ResponseSearchResultsInnerResultsInnerDecoder : Json.Decode.Decoder SearchAllFood200ResponseSearchResultsInnerResultsInner
searchAllFood200ResponseSearchResultsInnerResultsInnerDecoder =
    Json.Decode.succeed SearchAllFood200ResponseSearchResultsInnerResultsInner
        |> decode "id" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decodeNullable "image" Json.Decode.string 
        |> decodeNullable "link" Json.Decode.string 
        |> decode "type" Json.Decode.string 
        |> decode "relevance" Json.Decode.float 
        |> decodeNullable "content" Json.Decode.string 


searchCustomFoods200ResponseDecoder : Json.Decode.Decoder SearchCustomFoods200Response
searchCustomFoods200ResponseDecoder =
    Json.Decode.succeed SearchCustomFoods200Response
        |> decode "customFoods" (Json.Decode.list searchCustomFoods200ResponseCustomFoodsInnerDecoder) 
        |> decode "type" Json.Decode.string 
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 


searchCustomFoods200ResponseCustomFoodsInnerDecoder : Json.Decode.Decoder SearchCustomFoods200ResponseCustomFoodsInner
searchCustomFoods200ResponseCustomFoodsInnerDecoder =
    Json.Decode.succeed SearchCustomFoods200ResponseCustomFoodsInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "servings" Json.Decode.float 
        |> decode "imageUrl" Json.Decode.string 
        |> decode "price" Json.Decode.float 


searchFoodVideos200ResponseDecoder : Json.Decode.Decoder SearchFoodVideos200Response
searchFoodVideos200ResponseDecoder =
    Json.Decode.succeed SearchFoodVideos200Response
        |> decode "videos" (Json.Decode.list searchFoodVideos200ResponseVideosInnerDecoder) 
        |> decode "totalResults" Json.Decode.int 


searchFoodVideos200ResponseVideosInnerDecoder : Json.Decode.Decoder SearchFoodVideos200ResponseVideosInner
searchFoodVideos200ResponseVideosInnerDecoder =
    Json.Decode.succeed SearchFoodVideos200ResponseVideosInner
        |> decode "title" Json.Decode.string 
        |> decode "length" Json.Decode.int 
        |> decode "rating" Json.Decode.float 
        |> decode "shortTitle" Json.Decode.string 
        |> decode "thumbnail" Json.Decode.string 
        |> decode "views" Json.Decode.int 
        |> decode "youTubeId" Json.Decode.string 


searchGroceryProducts200ResponseDecoder : Json.Decode.Decoder SearchGroceryProducts200Response
searchGroceryProducts200ResponseDecoder =
    Json.Decode.succeed SearchGroceryProducts200Response
        |> decode "products" (Json.Decode.list autocompleteRecipeSearch200ResponseInnerDecoder) 
        |> decode "totalProducts" Json.Decode.int 
        |> decode "type" Json.Decode.string 
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 


searchGroceryProductsByUPC200ResponseDecoder : Json.Decode.Decoder SearchGroceryProductsByUPC200Response
searchGroceryProductsByUPC200ResponseDecoder =
    Json.Decode.succeed SearchGroceryProductsByUPC200Response
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "badges" (Json.Decode.list Json.Decode.string) 
        |> decode "importantBadges" (Json.Decode.list Json.Decode.string) 
        |> decode "breadcrumbs" (Json.Decode.list Json.Decode.string) 
        |> decode "generatedText" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> maybeDecode "ingredientCount" Json.Decode.int Nothing
        |> decode "ingredientList" Json.Decode.string 
        |> decode "ingredients" (Json.Decode.list searchGroceryProductsByUPC200ResponseIngredientsInnerDecoder) 
        |> decode "likes" Json.Decode.float 
        |> decode "nutrition" searchGroceryProductsByUPC200ResponseNutritionDecoder 
        |> decode "price" Json.Decode.float 
        |> decode "servings" searchGroceryProductsByUPC200ResponseServingsDecoder 
        |> decode "spoonacularScore" Json.Decode.float 


searchGroceryProductsByUPC200ResponseIngredientsInnerDecoder : Json.Decode.Decoder SearchGroceryProductsByUPC200ResponseIngredientsInner
searchGroceryProductsByUPC200ResponseIngredientsInnerDecoder =
    Json.Decode.succeed SearchGroceryProductsByUPC200ResponseIngredientsInner
        |> maybeDecode "description" Json.Decode.string Nothing
        |> decode "name" Json.Decode.string 
        |> maybeDecode "safety_level" Json.Decode.string Nothing


searchGroceryProductsByUPC200ResponseNutritionDecoder : Json.Decode.Decoder SearchGroceryProductsByUPC200ResponseNutrition
searchGroceryProductsByUPC200ResponseNutritionDecoder =
    Json.Decode.succeed SearchGroceryProductsByUPC200ResponseNutrition
        |> decode "nutrients" (Json.Decode.list parseIngredients200ResponseInnerNutritionNutrientsInnerDecoder) 
        |> decode "caloricBreakdown" parseIngredients200ResponseInnerNutritionCaloricBreakdownDecoder 


searchGroceryProductsByUPC200ResponseServingsDecoder : Json.Decode.Decoder SearchGroceryProductsByUPC200ResponseServings
searchGroceryProductsByUPC200ResponseServingsDecoder =
    Json.Decode.succeed SearchGroceryProductsByUPC200ResponseServings
        |> decode "number" Json.Decode.float 
        |> decode "size" Json.Decode.float 
        |> decode "unit" Json.Decode.string 


searchMenuItems200ResponseDecoder : Json.Decode.Decoder SearchMenuItems200Response
searchMenuItems200ResponseDecoder =
    Json.Decode.succeed SearchMenuItems200Response
        |> decode "menuItems" (Json.Decode.list searchMenuItems200ResponseMenuItemsInnerDecoder) 
        |> decode "totalMenuItems" Json.Decode.int 
        |> decode "type" Json.Decode.string 
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 


searchMenuItems200ResponseMenuItemsInnerDecoder : Json.Decode.Decoder SearchMenuItems200ResponseMenuItemsInner
searchMenuItems200ResponseMenuItemsInnerDecoder =
    Json.Decode.succeed SearchMenuItems200ResponseMenuItemsInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "restaurantChain" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> maybeDecode "servings" searchGroceryProductsByUPC200ResponseServingsDecoder Nothing


searchRecipes200ResponseDecoder : Json.Decode.Decoder SearchRecipes200Response
searchRecipes200ResponseDecoder =
    Json.Decode.succeed SearchRecipes200Response
        |> decode "offset" Json.Decode.int 
        |> decode "number" Json.Decode.int 
        |> decode "results" (Json.Decode.list searchRecipes200ResponseResultsInnerDecoder) 
        |> decode "totalResults" Json.Decode.int 


searchRecipes200ResponseResultsInnerDecoder : Json.Decode.Decoder SearchRecipes200ResponseResultsInner
searchRecipes200ResponseResultsInnerDecoder =
    Json.Decode.succeed SearchRecipes200ResponseResultsInner
        |> decode "id" Json.Decode.int 
        |> decode "title" Json.Decode.string 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 


searchRecipesByIngredients200ResponseInnerDecoder : Json.Decode.Decoder SearchRecipesByIngredients200ResponseInner
searchRecipesByIngredients200ResponseInnerDecoder =
    Json.Decode.succeed SearchRecipesByIngredients200ResponseInner
        |> decode "id" Json.Decode.int 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "likes" Json.Decode.int 
        |> decode "missedIngredientCount" Json.Decode.int 
        |> decode "missedIngredients" (Json.Decode.list searchRecipesByIngredients200ResponseInnerMissedIngredientsInnerDecoder) 
        |> decode "title" Json.Decode.string 
        |> decode "unusedIngredients" (Json.Decode.list objectDecoder) 
        |> decode "usedIngredientCount" Json.Decode.float 
        |> decode "usedIngredients" (Json.Decode.list searchRecipesByIngredients200ResponseInnerMissedIngredientsInnerDecoder) 


searchRecipesByIngredients200ResponseInnerMissedIngredientsInnerDecoder : Json.Decode.Decoder SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
searchRecipesByIngredients200ResponseInnerMissedIngredientsInnerDecoder =
    Json.Decode.succeed SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
        |> decode "aisle" Json.Decode.string 
        |> decode "amount" Json.Decode.float 
        |> decode "id" Json.Decode.int 
        |> decode "image" Json.Decode.string 
        |> maybeDecode "meta" (Json.Decode.list Json.Decode.string) Nothing
        |> decode "name" Json.Decode.string 
        |> maybeDecode "extendedName" Json.Decode.string Nothing
        |> decode "original" Json.Decode.string 
        |> decode "originalName" Json.Decode.string 
        |> decode "unit" Json.Decode.string 
        |> decode "unitLong" Json.Decode.string 
        |> decode "unitShort" Json.Decode.string 


searchRecipesByNutrients200ResponseInnerDecoder : Json.Decode.Decoder SearchRecipesByNutrients200ResponseInner
searchRecipesByNutrients200ResponseInnerDecoder =
    Json.Decode.succeed SearchRecipesByNutrients200ResponseInner
        |> decode "calories" Json.Decode.float 
        |> decode "carbs" Json.Decode.string 
        |> decode "fat" Json.Decode.string 
        |> decode "id" Json.Decode.int 
        |> decode "image" Json.Decode.string 
        |> decode "imageType" Json.Decode.string 
        |> decode "protein" Json.Decode.string 
        |> decode "title" Json.Decode.string 


searchRestaurants200ResponseDecoder : Json.Decode.Decoder SearchRestaurants200Response
searchRestaurants200ResponseDecoder =
    Json.Decode.succeed SearchRestaurants200Response
        |> maybeDecode "restaurants" (Json.Decode.list searchRestaurants200ResponseRestaurantsInnerDecoder) Nothing


searchRestaurants200ResponseRestaurantsInnerDecoder : Json.Decode.Decoder SearchRestaurants200ResponseRestaurantsInner
searchRestaurants200ResponseRestaurantsInnerDecoder =
    Json.Decode.succeed SearchRestaurants200ResponseRestaurantsInner
        |> maybeDecode "_id" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "phone_number" Json.Decode.int Nothing
        |> maybeDecode "address" searchRestaurants200ResponseRestaurantsInnerAddressDecoder Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "local_hours" searchRestaurants200ResponseRestaurantsInnerLocalHoursDecoder Nothing
        |> maybeDecode "cuisines" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "food_photos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "logo_photos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "store_photos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "dollar_signs" Json.Decode.int Nothing
        |> maybeDecode "pickup_enabled" Json.Decode.bool Nothing
        |> maybeDecode "delivery_enabled" Json.Decode.bool Nothing
        |> maybeDecode "is_open" Json.Decode.bool Nothing
        |> maybeDecode "offers_first_party_delivery" Json.Decode.bool Nothing
        |> maybeDecode "offers_third_party_delivery" Json.Decode.bool Nothing
        |> maybeDecode "miles" Json.Decode.float Nothing
        |> maybeDecode "weighted_rating_value" Json.Decode.float Nothing
        |> maybeDecode "aggregated_rating_count" Json.Decode.int Nothing


searchRestaurants200ResponseRestaurantsInnerAddressDecoder : Json.Decode.Decoder SearchRestaurants200ResponseRestaurantsInnerAddress
searchRestaurants200ResponseRestaurantsInnerAddressDecoder =
    Json.Decode.succeed SearchRestaurants200ResponseRestaurantsInnerAddress
        |> maybeDecode "street_addr" Json.Decode.string Nothing
        |> maybeDecode "city" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "zipcode" Json.Decode.string Nothing
        |> maybeDecode "country" Json.Decode.string Nothing
        |> maybeDecode "lat" Json.Decode.float Nothing
        |> maybeDecode "lon" Json.Decode.float Nothing
        |> maybeDecode "street_addr_2" Json.Decode.string Nothing
        |> maybeDecode "latitude" Json.Decode.float Nothing
        |> maybeDecode "longitude" Json.Decode.float Nothing


searchRestaurants200ResponseRestaurantsInnerLocalHoursDecoder : Json.Decode.Decoder SearchRestaurants200ResponseRestaurantsInnerLocalHours
searchRestaurants200ResponseRestaurantsInnerLocalHoursDecoder =
    Json.Decode.succeed SearchRestaurants200ResponseRestaurantsInnerLocalHours
        |> maybeDecode "operational" searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder Nothing
        |> maybeDecode "delivery" searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder Nothing
        |> maybeDecode "pickup" searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder Nothing
        |> maybeDecode "dine_in" searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder Nothing


searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder : Json.Decode.Decoder SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
searchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalDecoder =
    Json.Decode.succeed SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
        |> maybeDecode "Monday" Json.Decode.string Nothing
        |> maybeDecode "Tuesday" Json.Decode.string Nothing
        |> maybeDecode "Wednesday" Json.Decode.string Nothing
        |> maybeDecode "Thursday" Json.Decode.string Nothing
        |> maybeDecode "Friday" Json.Decode.string Nothing
        |> maybeDecode "Saturday" Json.Decode.string Nothing
        |> maybeDecode "Sunday" Json.Decode.string Nothing


searchSiteContent200ResponseDecoder : Json.Decode.Decoder SearchSiteContent200Response
searchSiteContent200ResponseDecoder =
    Json.Decode.succeed SearchSiteContent200Response
        |> decode "Articles" (Json.Decode.list searchSiteContent200ResponseArticlesInnerDecoder) 
        |> decode "Grocery Products" (Json.Decode.list searchSiteContent200ResponseArticlesInnerDecoder) 
        |> decode "Menu Items" (Json.Decode.list searchSiteContent200ResponseArticlesInnerDecoder) 
        |> decode "Recipes" (Json.Decode.list searchSiteContent200ResponseArticlesInnerDecoder) 


searchSiteContent200ResponseArticlesInnerDecoder : Json.Decode.Decoder SearchSiteContent200ResponseArticlesInner
searchSiteContent200ResponseArticlesInnerDecoder =
    Json.Decode.succeed SearchSiteContent200ResponseArticlesInner
        |> maybeDecode "dataPoints" (Json.Decode.list searchSiteContent200ResponseArticlesInnerDataPointsInnerDecoder) Nothing
        |> decode "image" Json.Decode.string 
        |> decode "link" Json.Decode.string 
        |> decode "name" Json.Decode.string 


searchSiteContent200ResponseArticlesInnerDataPointsInnerDecoder : Json.Decode.Decoder SearchSiteContent200ResponseArticlesInnerDataPointsInner
searchSiteContent200ResponseArticlesInnerDataPointsInnerDecoder =
    Json.Decode.succeed SearchSiteContent200ResponseArticlesInnerDataPointsInner
        |> decode "key" Json.Decode.string 
        |> decode "value" Json.Decode.string 


summarizeRecipe200ResponseDecoder : Json.Decode.Decoder SummarizeRecipe200Response
summarizeRecipe200ResponseDecoder =
    Json.Decode.succeed SummarizeRecipe200Response
        |> decode "id" Json.Decode.int 
        |> decode "summary" Json.Decode.string 
        |> decode "title" Json.Decode.string 


talkToChatbot200ResponseDecoder : Json.Decode.Decoder TalkToChatbot200Response
talkToChatbot200ResponseDecoder =
    Json.Decode.succeed TalkToChatbot200Response
        |> decode "answerText" Json.Decode.string 
        |> decode "media" (Json.Decode.list talkToChatbot200ResponseMediaInnerDecoder) 


talkToChatbot200ResponseMediaInnerDecoder : Json.Decode.Decoder TalkToChatbot200ResponseMediaInner
talkToChatbot200ResponseMediaInnerDecoder =
    Json.Decode.succeed TalkToChatbot200ResponseMediaInner
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "image" Json.Decode.string Nothing
        |> maybeDecode "link" Json.Decode.string Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f