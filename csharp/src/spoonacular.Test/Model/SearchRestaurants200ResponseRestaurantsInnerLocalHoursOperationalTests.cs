/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using spoonacular.Model;
using spoonacular.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace spoonacular.Test.Model
{
    /// <summary>
    ///  Class for testing SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
        //private SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational instance;

        public SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalTests()
        {
            // TODO uncomment below to create an instance of SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
            //instance = new SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
        /// </summary>
        [Fact]
        public void SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperationalInstanceTest()
        {
            // TODO uncomment below to test "IsType" SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational
            //Assert.IsType<SearchRestaurants200ResponseRestaurantsInnerLocalHoursOperational>(instance);
        }

        /// <summary>
        /// Test the property 'Monday'
        /// </summary>
        [Fact]
        public void MondayTest()
        {
            // TODO unit test for the property 'Monday'
        }

        /// <summary>
        /// Test the property 'Tuesday'
        /// </summary>
        [Fact]
        public void TuesdayTest()
        {
            // TODO unit test for the property 'Tuesday'
        }

        /// <summary>
        /// Test the property 'Wednesday'
        /// </summary>
        [Fact]
        public void WednesdayTest()
        {
            // TODO unit test for the property 'Wednesday'
        }

        /// <summary>
        /// Test the property 'Thursday'
        /// </summary>
        [Fact]
        public void ThursdayTest()
        {
            // TODO unit test for the property 'Thursday'
        }

        /// <summary>
        /// Test the property 'Friday'
        /// </summary>
        [Fact]
        public void FridayTest()
        {
            // TODO unit test for the property 'Friday'
        }

        /// <summary>
        /// Test the property 'Saturday'
        /// </summary>
        [Fact]
        public void SaturdayTest()
        {
            // TODO unit test for the property 'Saturday'
        }

        /// <summary>
        /// Test the property 'Sunday'
        /// </summary>
        [Fact]
        public void SundayTest()
        {
            // TODO unit test for the property 'Sunday'
        }
    }
}
