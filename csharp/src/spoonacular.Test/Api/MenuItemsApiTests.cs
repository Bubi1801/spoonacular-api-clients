/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using spoonacular.Client;
using spoonacular.Api;
// uncomment below to import models
//using spoonacular.Model;

namespace spoonacular.Test.Api
{
    /// <summary>
    ///  Class for testing MenuItemsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MenuItemsApiTests : IDisposable
    {
        private MenuItemsApi instance;

        public MenuItemsApiTests()
        {
            instance = new MenuItemsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MenuItemsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MenuItemsApi
            //Assert.IsType<MenuItemsApi>(instance);
        }

        /// <summary>
        /// Test AutocompleteMenuItemSearch
        /// </summary>
        [Fact]
        public void AutocompleteMenuItemSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //decimal? number = null;
            //var response = instance.AutocompleteMenuItemSearch(query, number);
            //Assert.IsType<AutocompleteMenuItemSearch200Response>(response);
        }

        /// <summary>
        /// Test GetMenuItemInformation
        /// </summary>
        [Fact]
        public void GetMenuItemInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetMenuItemInformation(id);
            //Assert.IsType<GetMenuItemInformation200Response>(response);
        }

        /// <summary>
        /// Test MenuItemNutritionByIDImage
        /// </summary>
        [Fact]
        public void MenuItemNutritionByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //var response = instance.MenuItemNutritionByIDImage(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test MenuItemNutritionLabelImage
        /// </summary>
        [Fact]
        public void MenuItemNutritionLabelImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? showOptionalNutrients = null;
            //bool? showZeroValues = null;
            //bool? showIngredients = null;
            //var response = instance.MenuItemNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test MenuItemNutritionLabelWidget
        /// </summary>
        [Fact]
        public void MenuItemNutritionLabelWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? defaultCss = null;
            //bool? showOptionalNutrients = null;
            //bool? showZeroValues = null;
            //bool? showIngredients = null;
            //var response = instance.MenuItemNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SearchMenuItems
        /// </summary>
        [Fact]
        public void SearchMenuItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? query = null;
            //decimal? minCalories = null;
            //decimal? maxCalories = null;
            //decimal? minCarbs = null;
            //decimal? maxCarbs = null;
            //decimal? minProtein = null;
            //decimal? maxProtein = null;
            //decimal? minFat = null;
            //decimal? maxFat = null;
            //bool? addMenuItemInformation = null;
            //int? offset = null;
            //int? number = null;
            //var response = instance.SearchMenuItems(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addMenuItemInformation, offset, number);
            //Assert.IsType<SearchMenuItems200Response>(response);
        }

        /// <summary>
        /// Test VisualizeMenuItemNutritionByID
        /// </summary>
        [Fact]
        public void VisualizeMenuItemNutritionByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? defaultCss = null;
            //string? accept = null;
            //var response = instance.VisualizeMenuItemNutritionByID(id, defaultCss, accept);
            //Assert.IsType<string>(response);
        }
    }
}
