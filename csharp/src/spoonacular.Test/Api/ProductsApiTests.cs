/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using spoonacular.Client;
using spoonacular.Api;
// uncomment below to import models
//using spoonacular.Model;

namespace spoonacular.Test.Api
{
    /// <summary>
    ///  Class for testing ProductsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ProductsApiTests : IDisposable
    {
        private ProductsApi instance;

        public ProductsApiTests()
        {
            instance = new ProductsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ProductsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ProductsApi
            //Assert.IsType<ProductsApi>(instance);
        }

        /// <summary>
        /// Test AutocompleteProductSearch
        /// </summary>
        [Fact]
        public void AutocompleteProductSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? number = null;
            //var response = instance.AutocompleteProductSearch(query, number);
            //Assert.IsType<AutocompleteProductSearch200Response>(response);
        }

        /// <summary>
        /// Test ClassifyGroceryProduct
        /// </summary>
        [Fact]
        public void ClassifyGroceryProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClassifyGroceryProductRequest classifyGroceryProductRequest = null;
            //string? locale = null;
            //var response = instance.ClassifyGroceryProduct(classifyGroceryProductRequest, locale);
            //Assert.IsType<ClassifyGroceryProduct200Response>(response);
        }

        /// <summary>
        /// Test ClassifyGroceryProductBulk
        /// </summary>
        [Fact]
        public void ClassifyGroceryProductBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner = null;
            //string? locale = null;
            //var response = instance.ClassifyGroceryProductBulk(classifyGroceryProductBulkRequestInner, locale);
            //Assert.IsType<List<ClassifyGroceryProductBulk200ResponseInner>>(response);
        }

        /// <summary>
        /// Test GetComparableProducts
        /// </summary>
        [Fact]
        public void GetComparableProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal upc = null;
            //var response = instance.GetComparableProducts(upc);
            //Assert.IsType<GetComparableProducts200Response>(response);
        }

        /// <summary>
        /// Test GetProductInformation
        /// </summary>
        [Fact]
        public void GetProductInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetProductInformation(id);
            //Assert.IsType<GetProductInformation200Response>(response);
        }

        /// <summary>
        /// Test ProductNutritionByIDImage
        /// </summary>
        [Fact]
        public void ProductNutritionByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //var response = instance.ProductNutritionByIDImage(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProductNutritionLabelImage
        /// </summary>
        [Fact]
        public void ProductNutritionLabelImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? showOptionalNutrients = null;
            //bool? showZeroValues = null;
            //bool? showIngredients = null;
            //var response = instance.ProductNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProductNutritionLabelWidget
        /// </summary>
        [Fact]
        public void ProductNutritionLabelWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? defaultCss = null;
            //bool? showOptionalNutrients = null;
            //bool? showZeroValues = null;
            //bool? showIngredients = null;
            //var response = instance.ProductNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SearchGroceryProducts
        /// </summary>
        [Fact]
        public void SearchGroceryProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? query = null;
            //decimal? minCalories = null;
            //decimal? maxCalories = null;
            //decimal? minCarbs = null;
            //decimal? maxCarbs = null;
            //decimal? minProtein = null;
            //decimal? maxProtein = null;
            //decimal? minFat = null;
            //decimal? maxFat = null;
            //bool? addProductInformation = null;
            //int? offset = null;
            //int? number = null;
            //var response = instance.SearchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number);
            //Assert.IsType<SearchGroceryProducts200Response>(response);
        }

        /// <summary>
        /// Test SearchGroceryProductsByUPC
        /// </summary>
        [Fact]
        public void SearchGroceryProductsByUPCTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal upc = null;
            //var response = instance.SearchGroceryProductsByUPC(upc);
            //Assert.IsType<SearchGroceryProductsByUPC200Response>(response);
        }

        /// <summary>
        /// Test VisualizeProductNutritionByID
        /// </summary>
        [Fact]
        public void VisualizeProductNutritionByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? defaultCss = null;
            //string? accept = null;
            //var response = instance.VisualizeProductNutritionByID(id, defaultCss, accept);
            //Assert.IsType<string>(response);
        }
    }
}
