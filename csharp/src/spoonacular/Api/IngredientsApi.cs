/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngredientsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Autocomplete Ingredient Search
        /// </summary>
        /// <remarks>
        /// Autocomplete the entry of an ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteIngredientSearch200ResponseInner&gt;</returns>
        List<AutocompleteIngredientSearch200ResponseInner> AutocompleteIngredientSearch(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0);

        /// <summary>
        /// Autocomplete Ingredient Search
        /// </summary>
        /// <remarks>
        /// Autocomplete the entry of an ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteIngredientSearch200ResponseInner&gt;</returns>
        ApiResponse<List<AutocompleteIngredientSearch200ResponseInner>> AutocompleteIngredientSearchWithHttpInfo(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0);
        /// <summary>
        /// Compute Ingredient Amount
        /// </summary>
        /// <remarks>
        /// Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComputeIngredientAmount200Response</returns>
        ComputeIngredientAmount200Response ComputeIngredientAmount(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0);

        /// <summary>
        /// Compute Ingredient Amount
        /// </summary>
        /// <remarks>
        /// Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComputeIngredientAmount200Response</returns>
        ApiResponse<ComputeIngredientAmount200Response> ComputeIngredientAmountWithHttpInfo(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Ingredient Information
        /// </summary>
        /// <remarks>
        /// Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIngredientInformation200Response</returns>
        GetIngredientInformation200Response GetIngredientInformation(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Ingredient Information
        /// </summary>
        /// <remarks>
        /// Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIngredientInformation200Response</returns>
        ApiResponse<GetIngredientInformation200Response> GetIngredientInformationWithHttpInfo(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Ingredient Substitutes
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIngredientSubstitutes200Response</returns>
        GetIngredientSubstitutes200Response GetIngredientSubstitutes(string ingredientName, int operationIndex = 0);

        /// <summary>
        /// Get Ingredient Substitutes
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIngredientSubstitutes200Response</returns>
        ApiResponse<GetIngredientSubstitutes200Response> GetIngredientSubstitutesWithHttpInfo(string ingredientName, int operationIndex = 0);
        /// <summary>
        /// Get Ingredient Substitutes by ID
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIngredientSubstitutes200Response</returns>
        GetIngredientSubstitutes200Response GetIngredientSubstitutesByID(int id, int operationIndex = 0);

        /// <summary>
        /// Get Ingredient Substitutes by ID
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIngredientSubstitutes200Response</returns>
        ApiResponse<GetIngredientSubstitutes200Response> GetIngredientSubstitutesByIDWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Ingredient Search
        /// </summary>
        /// <remarks>
        /// Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IngredientSearch200Response</returns>
        IngredientSearch200Response IngredientSearch(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0);

        /// <summary>
        /// Ingredient Search
        /// </summary>
        /// <remarks>
        /// Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IngredientSearch200Response</returns>
        ApiResponse<IngredientSearch200Response> IngredientSearchWithHttpInfo(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0);
        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream IngredientsByIDImage(decimal id, string? measure = default(string?), int operationIndex = 0);

        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> IngredientsByIDImageWithHttpInfo(decimal id, string? measure = default(string?), int operationIndex = 0);
        /// <summary>
        /// Map Ingredients to Grocery Products
        /// </summary>
        /// <remarks>
        /// Map a set of ingredients to products you can buy in the grocery store.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;</returns>
        List<MapIngredientsToGroceryProducts200ResponseInner> MapIngredientsToGroceryProducts(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0);

        /// <summary>
        /// Map Ingredients to Grocery Products
        /// </summary>
        /// <remarks>
        /// Map a set of ingredients to products you can buy in the grocery store.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;</returns>
        ApiResponse<List<MapIngredientsToGroceryProducts200ResponseInner>> MapIngredientsToGroceryProductsWithHttpInfo(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0);
        /// <summary>
        /// Ingredients Widget
        /// </summary>
        /// <remarks>
        /// Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeIngredients(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Ingredients Widget
        /// </summary>
        /// <remarks>
        /// Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeIngredientsWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngredientsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Autocomplete Ingredient Search
        /// </summary>
        /// <remarks>
        /// Autocomplete the entry of an ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteIngredientSearch200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<AutocompleteIngredientSearch200ResponseInner>> AutocompleteIngredientSearchAsync(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Autocomplete Ingredient Search
        /// </summary>
        /// <remarks>
        /// Autocomplete the entry of an ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteIngredientSearch200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutocompleteIngredientSearch200ResponseInner>>> AutocompleteIngredientSearchWithHttpInfoAsync(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Compute Ingredient Amount
        /// </summary>
        /// <remarks>
        /// Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComputeIngredientAmount200Response</returns>
        System.Threading.Tasks.Task<ComputeIngredientAmount200Response> ComputeIngredientAmountAsync(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Compute Ingredient Amount
        /// </summary>
        /// <remarks>
        /// Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComputeIngredientAmount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComputeIngredientAmount200Response>> ComputeIngredientAmountWithHttpInfoAsync(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ingredient Information
        /// </summary>
        /// <remarks>
        /// Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIngredientInformation200Response</returns>
        System.Threading.Tasks.Task<GetIngredientInformation200Response> GetIngredientInformationAsync(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ingredient Information
        /// </summary>
        /// <remarks>
        /// Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIngredientInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIngredientInformation200Response>> GetIngredientInformationWithHttpInfoAsync(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ingredient Substitutes
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIngredientSubstitutes200Response</returns>
        System.Threading.Tasks.Task<GetIngredientSubstitutes200Response> GetIngredientSubstitutesAsync(string ingredientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ingredient Substitutes
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIngredientSubstitutes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIngredientSubstitutes200Response>> GetIngredientSubstitutesWithHttpInfoAsync(string ingredientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ingredient Substitutes by ID
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIngredientSubstitutes200Response</returns>
        System.Threading.Tasks.Task<GetIngredientSubstitutes200Response> GetIngredientSubstitutesByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ingredient Substitutes by ID
        /// </summary>
        /// <remarks>
        /// Search for substitutes for a given ingredient.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIngredientSubstitutes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIngredientSubstitutes200Response>> GetIngredientSubstitutesByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredient Search
        /// </summary>
        /// <remarks>
        /// Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IngredientSearch200Response</returns>
        System.Threading.Tasks.Task<IngredientSearch200Response> IngredientSearchAsync(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredient Search
        /// </summary>
        /// <remarks>
        /// Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IngredientSearch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<IngredientSearch200Response>> IngredientSearchWithHttpInfoAsync(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> IngredientsByIDImageAsync(decimal id, string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> IngredientsByIDImageWithHttpInfoAsync(decimal id, string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Map Ingredients to Grocery Products
        /// </summary>
        /// <remarks>
        /// Map a set of ingredients to products you can buy in the grocery store.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<MapIngredientsToGroceryProducts200ResponseInner>> MapIngredientsToGroceryProductsAsync(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Map Ingredients to Grocery Products
        /// </summary>
        /// <remarks>
        /// Map a set of ingredients to products you can buy in the grocery store.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MapIngredientsToGroceryProducts200ResponseInner>>> MapIngredientsToGroceryProductsWithHttpInfoAsync(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients Widget
        /// </summary>
        /// <remarks>
        /// Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeIngredientsAsync(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients Widget
        /// </summary>
        /// <remarks>
        /// Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeIngredientsWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngredientsApi : IIngredientsApiSync, IIngredientsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IngredientsApi : IIngredientsApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IngredientsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IngredientsApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IngredientsApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IngredientsApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Autocomplete Ingredient Search Autocomplete the entry of an ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteIngredientSearch200ResponseInner&gt;</returns>
        public List<AutocompleteIngredientSearch200ResponseInner> AutocompleteIngredientSearch(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<AutocompleteIngredientSearch200ResponseInner>> localVarResponse = AutocompleteIngredientSearchWithHttpInfo(query, number, metaInformation, intolerances, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Ingredient Search Autocomplete the entry of an ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteIngredientSearch200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<AutocompleteIngredientSearch200ResponseInner>> AutocompleteIngredientSearchWithHttpInfo(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (metaInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "metaInformation", metaInformation));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "IngredientsApi.AutocompleteIngredientSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AutocompleteIngredientSearch200ResponseInner>>("/food/ingredients/autocomplete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteIngredientSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Ingredient Search Autocomplete the entry of an ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteIngredientSearch200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutocompleteIngredientSearch200ResponseInner>> AutocompleteIngredientSearchAsync(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<AutocompleteIngredientSearch200ResponseInner>> localVarResponse = await AutocompleteIngredientSearchWithHttpInfoAsync(query, number, metaInformation, intolerances, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Ingredient Search Autocomplete the entry of an ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteIngredientSearch200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<AutocompleteIngredientSearch200ResponseInner>>> AutocompleteIngredientSearchWithHttpInfoAsync(string? query = default(string?), int? number = default(int?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (metaInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "metaInformation", metaInformation));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "IngredientsApi.AutocompleteIngredientSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AutocompleteIngredientSearch200ResponseInner>>("/food/ingredients/autocomplete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteIngredientSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Compute Ingredient Amount Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComputeIngredientAmount200Response</returns>
        public ComputeIngredientAmount200Response ComputeIngredientAmount(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ComputeIngredientAmount200Response> localVarResponse = ComputeIngredientAmountWithHttpInfo(id, nutrient, target, unit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compute Ingredient Amount Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComputeIngredientAmount200Response</returns>
        public spoonacular.Client.ApiResponse<ComputeIngredientAmount200Response> ComputeIngredientAmountWithHttpInfo(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'nutrient' is set
            if (nutrient == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'nutrient' when calling IngredientsApi->ComputeIngredientAmount");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "nutrient", nutrient));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            if (unit != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "unit", unit));
            }

            localVarRequestOptions.Operation = "IngredientsApi.ComputeIngredientAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComputeIngredientAmount200Response>("/food/ingredients/{id}/amount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComputeIngredientAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Compute Ingredient Amount Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComputeIngredientAmount200Response</returns>
        public async System.Threading.Tasks.Task<ComputeIngredientAmount200Response> ComputeIngredientAmountAsync(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ComputeIngredientAmount200Response> localVarResponse = await ComputeIngredientAmountWithHttpInfoAsync(id, nutrient, target, unit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compute Ingredient Amount Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the ingredient you want the amount for.</param>
        /// <param name="nutrient">The target nutrient. See a list of supported nutrients.</param>
        /// <param name="target">The target number of the given nutrient.</param>
        /// <param name="unit">The target unit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComputeIngredientAmount200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ComputeIngredientAmount200Response>> ComputeIngredientAmountWithHttpInfoAsync(decimal id, string nutrient, decimal target, string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'nutrient' is set
            if (nutrient == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'nutrient' when calling IngredientsApi->ComputeIngredientAmount");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "nutrient", nutrient));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "target", target));
            if (unit != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "unit", unit));
            }

            localVarRequestOptions.Operation = "IngredientsApi.ComputeIngredientAmount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComputeIngredientAmount200Response>("/food/ingredients/{id}/amount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComputeIngredientAmount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingredient Information Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIngredientInformation200Response</returns>
        public GetIngredientInformation200Response GetIngredientInformation(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetIngredientInformation200Response> localVarResponse = GetIngredientInformationWithHttpInfo(id, amount, unit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingredient Information Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIngredientInformation200Response</returns>
        public spoonacular.Client.ApiResponse<GetIngredientInformation200Response> GetIngredientInformationWithHttpInfo(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            }
            if (unit != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "unit", unit));
            }

            localVarRequestOptions.Operation = "IngredientsApi.GetIngredientInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIngredientInformation200Response>("/food/ingredients/{id}/information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngredientInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingredient Information Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIngredientInformation200Response</returns>
        public async System.Threading.Tasks.Task<GetIngredientInformation200Response> GetIngredientInformationAsync(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetIngredientInformation200Response> localVarResponse = await GetIngredientInformationWithHttpInfoAsync(id, amount, unit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingredient Information Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="amount">The amount of this ingredient. (optional)</param>
        /// <param name="unit">The unit for the given amount. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIngredientInformation200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetIngredientInformation200Response>> GetIngredientInformationWithHttpInfoAsync(int id, decimal? amount = default(decimal?), string? unit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (amount != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "amount", amount));
            }
            if (unit != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "unit", unit));
            }

            localVarRequestOptions.Operation = "IngredientsApi.GetIngredientInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIngredientInformation200Response>("/food/ingredients/{id}/information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngredientInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingredient Substitutes Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIngredientSubstitutes200Response</returns>
        public GetIngredientSubstitutes200Response GetIngredientSubstitutes(string ingredientName, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response> localVarResponse = GetIngredientSubstitutesWithHttpInfo(ingredientName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingredient Substitutes Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIngredientSubstitutes200Response</returns>
        public spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response> GetIngredientSubstitutesWithHttpInfo(string ingredientName, int operationIndex = 0)
        {
            // verify the required parameter 'ingredientName' is set
            if (ingredientName == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientName' when calling IngredientsApi->GetIngredientSubstitutes");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredientName", ingredientName));

            localVarRequestOptions.Operation = "IngredientsApi.GetIngredientSubstitutes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIngredientSubstitutes200Response>("/food/ingredients/substitutes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngredientSubstitutes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingredient Substitutes Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIngredientSubstitutes200Response</returns>
        public async System.Threading.Tasks.Task<GetIngredientSubstitutes200Response> GetIngredientSubstitutesAsync(string ingredientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response> localVarResponse = await GetIngredientSubstitutesWithHttpInfoAsync(ingredientName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingredient Substitutes Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The name of the ingredient you want to replace.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIngredientSubstitutes200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response>> GetIngredientSubstitutesWithHttpInfoAsync(string ingredientName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientName' is set
            if (ingredientName == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientName' when calling IngredientsApi->GetIngredientSubstitutes");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredientName", ingredientName));

            localVarRequestOptions.Operation = "IngredientsApi.GetIngredientSubstitutes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIngredientSubstitutes200Response>("/food/ingredients/substitutes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngredientSubstitutes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingredient Substitutes by ID Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIngredientSubstitutes200Response</returns>
        public GetIngredientSubstitutes200Response GetIngredientSubstitutesByID(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response> localVarResponse = GetIngredientSubstitutesByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingredient Substitutes by ID Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIngredientSubstitutes200Response</returns>
        public spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response> GetIngredientSubstitutesByIDWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IngredientsApi.GetIngredientSubstitutesByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIngredientSubstitutes200Response>("/food/ingredients/{id}/substitutes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngredientSubstitutesByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingredient Substitutes by ID Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIngredientSubstitutes200Response</returns>
        public async System.Threading.Tasks.Task<GetIngredientSubstitutes200Response> GetIngredientSubstitutesByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response> localVarResponse = await GetIngredientSubstitutesByIDWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingredient Substitutes by ID Search for substitutes for a given ingredient.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIngredientSubstitutes200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetIngredientSubstitutes200Response>> GetIngredientSubstitutesByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IngredientsApi.GetIngredientSubstitutesByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIngredientSubstitutes200Response>("/food/ingredients/{id}/substitutes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngredientSubstitutesByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredient Search Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IngredientSearch200Response</returns>
        public IngredientSearch200Response IngredientSearch(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<IngredientSearch200Response> localVarResponse = IngredientSearchWithHttpInfo(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredient Search Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IngredientSearch200Response</returns>
        public spoonacular.Client.ApiResponse<IngredientSearch200Response> IngredientSearchWithHttpInfo(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (addChildren != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addChildren", addChildren));
            }
            if (minProteinPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProteinPercent", minProteinPercent));
            }
            if (maxProteinPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProteinPercent", maxProteinPercent));
            }
            if (minFatPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFatPercent", minFatPercent));
            }
            if (maxFatPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFatPercent", maxFatPercent));
            }
            if (minCarbsPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbsPercent", minCarbsPercent));
            }
            if (maxCarbsPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbsPercent", maxCarbsPercent));
            }
            if (metaInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "metaInformation", metaInformation));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "IngredientsApi.IngredientSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IngredientSearch200Response>("/food/ingredients/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IngredientSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredient Search Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IngredientSearch200Response</returns>
        public async System.Threading.Tasks.Task<IngredientSearch200Response> IngredientSearchAsync(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<IngredientSearch200Response> localVarResponse = await IngredientSearchWithHttpInfoAsync(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredient Search Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="addChildren">Whether to add children of found foods. (optional)</param>
        /// <param name="minProteinPercent">The minimum percentage of protein the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxProteinPercent">The maximum percentage of protein the food can have (between 0 and 100). (optional)</param>
        /// <param name="minFatPercent">The minimum percentage of fat the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxFatPercent">The maximum percentage of fat the food can have (between 0 and 100). (optional)</param>
        /// <param name="minCarbsPercent">The minimum percentage of carbs the food must have (between 0 and 100). (optional)</param>
        /// <param name="maxCarbsPercent">The maximum percentage of carbs the food can have (between 0 and 100). (optional)</param>
        /// <param name="metaInformation">Whether to return more meta information about the ingredients. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IngredientSearch200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<IngredientSearch200Response>> IngredientSearchWithHttpInfoAsync(string? query = default(string?), bool? addChildren = default(bool?), decimal? minProteinPercent = default(decimal?), decimal? maxProteinPercent = default(decimal?), decimal? minFatPercent = default(decimal?), decimal? maxFatPercent = default(decimal?), decimal? minCarbsPercent = default(decimal?), decimal? maxCarbsPercent = default(decimal?), bool? metaInformation = default(bool?), string? intolerances = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (addChildren != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addChildren", addChildren));
            }
            if (minProteinPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProteinPercent", minProteinPercent));
            }
            if (maxProteinPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProteinPercent", maxProteinPercent));
            }
            if (minFatPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFatPercent", minFatPercent));
            }
            if (maxFatPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFatPercent", maxFatPercent));
            }
            if (minCarbsPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbsPercent", minCarbsPercent));
            }
            if (maxCarbsPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbsPercent", maxCarbsPercent));
            }
            if (metaInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "metaInformation", metaInformation));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "IngredientsApi.IngredientSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IngredientSearch200Response>("/food/ingredients/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IngredientSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream IngredientsByIDImage(decimal id, string? measure = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = IngredientsByIDImageWithHttpInfo(id, measure);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> IngredientsByIDImageWithHttpInfo(decimal id, string? measure = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            localVarRequestOptions.Operation = "IngredientsApi.IngredientsByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/recipes/{id}/ingredientWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IngredientsByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> IngredientsByIDImageAsync(decimal id, string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await IngredientsByIDImageWithHttpInfoAsync(id, measure, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> IngredientsByIDImageWithHttpInfoAsync(decimal id, string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            localVarRequestOptions.Operation = "IngredientsApi.IngredientsByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/recipes/{id}/ingredientWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IngredientsByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Map Ingredients to Grocery Products Map a set of ingredients to products you can buy in the grocery store.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;</returns>
        public List<MapIngredientsToGroceryProducts200ResponseInner> MapIngredientsToGroceryProducts(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<MapIngredientsToGroceryProducts200ResponseInner>> localVarResponse = MapIngredientsToGroceryProductsWithHttpInfo(mapIngredientsToGroceryProductsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Map Ingredients to Grocery Products Map a set of ingredients to products you can buy in the grocery store.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<MapIngredientsToGroceryProducts200ResponseInner>> MapIngredientsToGroceryProductsWithHttpInfo(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'mapIngredientsToGroceryProductsRequest' is set
            if (mapIngredientsToGroceryProductsRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'mapIngredientsToGroceryProductsRequest' when calling IngredientsApi->MapIngredientsToGroceryProducts");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mapIngredientsToGroceryProductsRequest;

            localVarRequestOptions.Operation = "IngredientsApi.MapIngredientsToGroceryProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<MapIngredientsToGroceryProducts200ResponseInner>>("/food/ingredients/map", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MapIngredientsToGroceryProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Map Ingredients to Grocery Products Map a set of ingredients to products you can buy in the grocery store.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<MapIngredientsToGroceryProducts200ResponseInner>> MapIngredientsToGroceryProductsAsync(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<MapIngredientsToGroceryProducts200ResponseInner>> localVarResponse = await MapIngredientsToGroceryProductsWithHttpInfoAsync(mapIngredientsToGroceryProductsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Map Ingredients to Grocery Products Map a set of ingredients to products you can buy in the grocery store.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapIngredientsToGroceryProductsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<MapIngredientsToGroceryProducts200ResponseInner>>> MapIngredientsToGroceryProductsWithHttpInfoAsync(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapIngredientsToGroceryProductsRequest' is set
            if (mapIngredientsToGroceryProductsRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'mapIngredientsToGroceryProductsRequest' when calling IngredientsApi->MapIngredientsToGroceryProducts");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mapIngredientsToGroceryProductsRequest;

            localVarRequestOptions.Operation = "IngredientsApi.MapIngredientsToGroceryProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<MapIngredientsToGroceryProducts200ResponseInner>>("/food/ingredients/map", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MapIngredientsToGroceryProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients Widget Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeIngredients(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeIngredientsWithHttpInfo(ingredientList, servings, language, measure, view, defaultCss, showBacklink);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients Widget Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeIngredientsWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling IngredientsApi->VisualizeIngredients");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (measure != null)
            {
                localVarRequestOptions.FormParameters.Add("measure", spoonacular.Client.ClientUtils.ParameterToString(measure)); // form parameter
            }
            if (view != null)
            {
                localVarRequestOptions.FormParameters.Add("view", spoonacular.Client.ClientUtils.ParameterToString(view)); // form parameter
            }
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "IngredientsApi.VisualizeIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeIngredients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients Widget Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeIngredientsAsync(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeIngredientsWithHttpInfoAsync(ingredientList, servings, language, measure, view, defaultCss, showBacklink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients Widget Visualize ingredients of a recipe. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="measure">The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeIngredientsWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), string? measure = default(string?), string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling IngredientsApi->VisualizeIngredients");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (measure != null)
            {
                localVarRequestOptions.FormParameters.Add("measure", spoonacular.Client.ClientUtils.ParameterToString(measure)); // form parameter
            }
            if (view != null)
            {
                localVarRequestOptions.FormParameters.Add("view", spoonacular.Client.ClientUtils.ParameterToString(view)); // form parameter
            }
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "IngredientsApi.VisualizeIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeIngredients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
