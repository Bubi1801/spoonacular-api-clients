/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Detect Food in Text
        /// </summary>
        /// <remarks>
        /// Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DetectFoodInText200Response</returns>
        DetectFoodInText200Response DetectFoodInText(string? contentType = default(string?), int operationIndex = 0);

        /// <summary>
        /// Detect Food in Text
        /// </summary>
        /// <remarks>
        /// Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DetectFoodInText200Response</returns>
        ApiResponse<DetectFoodInText200Response> DetectFoodInTextWithHttpInfo(string? contentType = default(string?), int operationIndex = 0);
        /// <summary>
        /// Random Food Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetARandomFoodJoke200Response</returns>
        GetARandomFoodJoke200Response GetARandomFoodJoke(int operationIndex = 0);

        /// <summary>
        /// Random Food Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetARandomFoodJoke200Response</returns>
        ApiResponse<GetARandomFoodJoke200Response> GetARandomFoodJokeWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Conversation Suggests
        /// </summary>
        /// <remarks>
        /// This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConversationSuggests200Response</returns>
        GetConversationSuggests200Response GetConversationSuggests(string query, decimal? number = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Conversation Suggests
        /// </summary>
        /// <remarks>
        /// This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConversationSuggests200Response</returns>
        ApiResponse<GetConversationSuggests200Response> GetConversationSuggestsWithHttpInfo(string query, decimal? number = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Random Food Trivia
        /// </summary>
        /// <remarks>
        /// Returns random food trivia.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRandomFoodTrivia200Response</returns>
        GetRandomFoodTrivia200Response GetRandomFoodTrivia(int operationIndex = 0);

        /// <summary>
        /// Random Food Trivia
        /// </summary>
        /// <remarks>
        /// Returns random food trivia.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRandomFoodTrivia200Response</returns>
        ApiResponse<GetRandomFoodTrivia200Response> GetRandomFoodTriviaWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Image Analysis by URL
        /// </summary>
        /// <remarks>
        /// Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImageAnalysisByURL200Response</returns>
        ImageAnalysisByURL200Response ImageAnalysisByURL(string imageUrl, int operationIndex = 0);

        /// <summary>
        /// Image Analysis by URL
        /// </summary>
        /// <remarks>
        /// Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImageAnalysisByURL200Response</returns>
        ApiResponse<ImageAnalysisByURL200Response> ImageAnalysisByURLWithHttpInfo(string imageUrl, int operationIndex = 0);
        /// <summary>
        /// Image Classification by URL
        /// </summary>
        /// <remarks>
        /// Classify a food image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImageClassificationByURL200Response</returns>
        ImageClassificationByURL200Response ImageClassificationByURL(string imageUrl, int operationIndex = 0);

        /// <summary>
        /// Image Classification by URL
        /// </summary>
        /// <remarks>
        /// Classify a food image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImageClassificationByURL200Response</returns>
        ApiResponse<ImageClassificationByURL200Response> ImageClassificationByURLWithHttpInfo(string imageUrl, int operationIndex = 0);
        /// <summary>
        /// Search All Food
        /// </summary>
        /// <remarks>
        /// Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchAllFood200Response</returns>
        SearchAllFood200Response SearchAllFood(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search All Food
        /// </summary>
        /// <remarks>
        /// Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchAllFood200Response</returns>
        ApiResponse<SearchAllFood200Response> SearchAllFoodWithHttpInfo(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Custom Foods
        /// </summary>
        /// <remarks>
        /// Search custom foods in a user&#39;s account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchCustomFoods200Response</returns>
        SearchCustomFoods200Response SearchCustomFoods(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Custom Foods
        /// </summary>
        /// <remarks>
        /// Search custom foods in a user&#39;s account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchCustomFoods200Response</returns>
        ApiResponse<SearchCustomFoods200Response> SearchCustomFoodsWithHttpInfo(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Food Videos
        /// </summary>
        /// <remarks>
        /// Find recipe and other food related videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchFoodVideos200Response</returns>
        SearchFoodVideos200Response SearchFoodVideos(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Food Videos
        /// </summary>
        /// <remarks>
        /// Find recipe and other food related videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchFoodVideos200Response</returns>
        ApiResponse<SearchFoodVideos200Response> SearchFoodVideosWithHttpInfo(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Site Content
        /// </summary>
        /// <remarks>
        /// Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSiteContent200Response</returns>
        SearchSiteContent200Response SearchSiteContent(string query, int operationIndex = 0);

        /// <summary>
        /// Search Site Content
        /// </summary>
        /// <remarks>
        /// Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSiteContent200Response</returns>
        ApiResponse<SearchSiteContent200Response> SearchSiteContentWithHttpInfo(string query, int operationIndex = 0);
        /// <summary>
        /// Talk to Chatbot
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TalkToChatbot200Response</returns>
        TalkToChatbot200Response TalkToChatbot(string text, string? contextId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Talk to Chatbot
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TalkToChatbot200Response</returns>
        ApiResponse<TalkToChatbot200Response> TalkToChatbotWithHttpInfo(string text, string? contextId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Detect Food in Text
        /// </summary>
        /// <remarks>
        /// Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetectFoodInText200Response</returns>
        System.Threading.Tasks.Task<DetectFoodInText200Response> DetectFoodInTextAsync(string? contentType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detect Food in Text
        /// </summary>
        /// <remarks>
        /// Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetectFoodInText200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectFoodInText200Response>> DetectFoodInTextWithHttpInfoAsync(string? contentType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Random Food Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetARandomFoodJoke200Response</returns>
        System.Threading.Tasks.Task<GetARandomFoodJoke200Response> GetARandomFoodJokeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Food Joke
        /// </summary>
        /// <remarks>
        /// Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetARandomFoodJoke200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetARandomFoodJoke200Response>> GetARandomFoodJokeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Conversation Suggests
        /// </summary>
        /// <remarks>
        /// This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConversationSuggests200Response</returns>
        System.Threading.Tasks.Task<GetConversationSuggests200Response> GetConversationSuggestsAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Conversation Suggests
        /// </summary>
        /// <remarks>
        /// This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConversationSuggests200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConversationSuggests200Response>> GetConversationSuggestsWithHttpInfoAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Random Food Trivia
        /// </summary>
        /// <remarks>
        /// Returns random food trivia.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRandomFoodTrivia200Response</returns>
        System.Threading.Tasks.Task<GetRandomFoodTrivia200Response> GetRandomFoodTriviaAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Food Trivia
        /// </summary>
        /// <remarks>
        /// Returns random food trivia.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRandomFoodTrivia200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRandomFoodTrivia200Response>> GetRandomFoodTriviaWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Image Analysis by URL
        /// </summary>
        /// <remarks>
        /// Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageAnalysisByURL200Response</returns>
        System.Threading.Tasks.Task<ImageAnalysisByURL200Response> ImageAnalysisByURLAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Image Analysis by URL
        /// </summary>
        /// <remarks>
        /// Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageAnalysisByURL200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageAnalysisByURL200Response>> ImageAnalysisByURLWithHttpInfoAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Image Classification by URL
        /// </summary>
        /// <remarks>
        /// Classify a food image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageClassificationByURL200Response</returns>
        System.Threading.Tasks.Task<ImageClassificationByURL200Response> ImageClassificationByURLAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Image Classification by URL
        /// </summary>
        /// <remarks>
        /// Classify a food image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageClassificationByURL200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageClassificationByURL200Response>> ImageClassificationByURLWithHttpInfoAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search All Food
        /// </summary>
        /// <remarks>
        /// Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchAllFood200Response</returns>
        System.Threading.Tasks.Task<SearchAllFood200Response> SearchAllFoodAsync(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search All Food
        /// </summary>
        /// <remarks>
        /// Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchAllFood200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchAllFood200Response>> SearchAllFoodWithHttpInfoAsync(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Custom Foods
        /// </summary>
        /// <remarks>
        /// Search custom foods in a user&#39;s account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchCustomFoods200Response</returns>
        System.Threading.Tasks.Task<SearchCustomFoods200Response> SearchCustomFoodsAsync(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Custom Foods
        /// </summary>
        /// <remarks>
        /// Search custom foods in a user&#39;s account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchCustomFoods200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchCustomFoods200Response>> SearchCustomFoodsWithHttpInfoAsync(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Food Videos
        /// </summary>
        /// <remarks>
        /// Find recipe and other food related videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchFoodVideos200Response</returns>
        System.Threading.Tasks.Task<SearchFoodVideos200Response> SearchFoodVideosAsync(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Food Videos
        /// </summary>
        /// <remarks>
        /// Find recipe and other food related videos.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchFoodVideos200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchFoodVideos200Response>> SearchFoodVideosWithHttpInfoAsync(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Site Content
        /// </summary>
        /// <remarks>
        /// Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSiteContent200Response</returns>
        System.Threading.Tasks.Task<SearchSiteContent200Response> SearchSiteContentAsync(string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Site Content
        /// </summary>
        /// <remarks>
        /// Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSiteContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchSiteContent200Response>> SearchSiteContentWithHttpInfoAsync(string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Talk to Chatbot
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TalkToChatbot200Response</returns>
        System.Threading.Tasks.Task<TalkToChatbot200Response> TalkToChatbotAsync(string text, string? contextId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Talk to Chatbot
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TalkToChatbot200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TalkToChatbot200Response>> TalkToChatbotWithHttpInfoAsync(string text, string? contextId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscApi : IMiscApiSync, IMiscApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MiscApi : IMiscApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiscApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiscApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MiscApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MiscApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Detect Food in Text Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DetectFoodInText200Response</returns>
        public DetectFoodInText200Response DetectFoodInText(string? contentType = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<DetectFoodInText200Response> localVarResponse = DetectFoodInTextWithHttpInfo(contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Food in Text Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DetectFoodInText200Response</returns>
        public spoonacular.Client.ApiResponse<DetectFoodInText200Response> DetectFoodInTextWithHttpInfo(string? contentType = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            localVarRequestOptions.Operation = "MiscApi.DetectFoodInText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DetectFoodInText200Response>("/food/detect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectFoodInText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Food in Text Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetectFoodInText200Response</returns>
        public async System.Threading.Tasks.Task<DetectFoodInText200Response> DetectFoodInTextAsync(string? contentType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<DetectFoodInText200Response> localVarResponse = await DetectFoodInTextWithHttpInfoAsync(contentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Food in Text Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetectFoodInText200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<DetectFoodInText200Response>> DetectFoodInTextWithHttpInfoAsync(string? contentType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            localVarRequestOptions.Operation = "MiscApi.DetectFoodInText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DetectFoodInText200Response>("/food/detect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectFoodInText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Food Joke Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetARandomFoodJoke200Response</returns>
        public GetARandomFoodJoke200Response GetARandomFoodJoke(int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetARandomFoodJoke200Response> localVarResponse = GetARandomFoodJokeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Food Joke Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetARandomFoodJoke200Response</returns>
        public spoonacular.Client.ApiResponse<GetARandomFoodJoke200Response> GetARandomFoodJokeWithHttpInfo(int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.GetARandomFoodJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetARandomFoodJoke200Response>("/food/jokes/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetARandomFoodJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Food Joke Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetARandomFoodJoke200Response</returns>
        public async System.Threading.Tasks.Task<GetARandomFoodJoke200Response> GetARandomFoodJokeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetARandomFoodJoke200Response> localVarResponse = await GetARandomFoodJokeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Food Joke Get a random joke that is related to food. Caution: this is an endpoint for adults!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetARandomFoodJoke200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetARandomFoodJoke200Response>> GetARandomFoodJokeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.GetARandomFoodJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetARandomFoodJoke200Response>("/food/jokes/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetARandomFoodJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Conversation Suggests This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConversationSuggests200Response</returns>
        public GetConversationSuggests200Response GetConversationSuggests(string query, decimal? number = default(decimal?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetConversationSuggests200Response> localVarResponse = GetConversationSuggestsWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Conversation Suggests This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConversationSuggests200Response</returns>
        public spoonacular.Client.ApiResponse<GetConversationSuggests200Response> GetConversationSuggestsWithHttpInfo(string query, decimal? number = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MiscApi->GetConversationSuggests");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.GetConversationSuggests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConversationSuggests200Response>("/food/converse/suggest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConversationSuggests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Conversation Suggests This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConversationSuggests200Response</returns>
        public async System.Threading.Tasks.Task<GetConversationSuggests200Response> GetConversationSuggestsAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetConversationSuggests200Response> localVarResponse = await GetConversationSuggestsWithHttpInfoAsync(query, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Conversation Suggests This endpoint returns suggestions for things the user can say or ask the chatbot.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">A (partial) query from the user. The endpoint will return if it matches topics it can talk about.</param>
        /// <param name="number">The number of suggestions to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConversationSuggests200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetConversationSuggests200Response>> GetConversationSuggestsWithHttpInfoAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MiscApi->GetConversationSuggests");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.GetConversationSuggests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConversationSuggests200Response>("/food/converse/suggest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConversationSuggests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Food Trivia Returns random food trivia.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRandomFoodTrivia200Response</returns>
        public GetRandomFoodTrivia200Response GetRandomFoodTrivia(int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRandomFoodTrivia200Response> localVarResponse = GetRandomFoodTriviaWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Food Trivia Returns random food trivia.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRandomFoodTrivia200Response</returns>
        public spoonacular.Client.ApiResponse<GetRandomFoodTrivia200Response> GetRandomFoodTriviaWithHttpInfo(int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.GetRandomFoodTrivia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRandomFoodTrivia200Response>("/food/trivia/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomFoodTrivia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Food Trivia Returns random food trivia.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRandomFoodTrivia200Response</returns>
        public async System.Threading.Tasks.Task<GetRandomFoodTrivia200Response> GetRandomFoodTriviaAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRandomFoodTrivia200Response> localVarResponse = await GetRandomFoodTriviaWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Food Trivia Returns random food trivia.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRandomFoodTrivia200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRandomFoodTrivia200Response>> GetRandomFoodTriviaWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MiscApi.GetRandomFoodTrivia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRandomFoodTrivia200Response>("/food/trivia/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomFoodTrivia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Image Analysis by URL Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImageAnalysisByURL200Response</returns>
        public ImageAnalysisByURL200Response ImageAnalysisByURL(string imageUrl, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ImageAnalysisByURL200Response> localVarResponse = ImageAnalysisByURLWithHttpInfo(imageUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Image Analysis by URL Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImageAnalysisByURL200Response</returns>
        public spoonacular.Client.ApiResponse<ImageAnalysisByURL200Response> ImageAnalysisByURLWithHttpInfo(string imageUrl, int operationIndex = 0)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'imageUrl' when calling MiscApi->ImageAnalysisByURL");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "imageUrl", imageUrl));

            localVarRequestOptions.Operation = "MiscApi.ImageAnalysisByURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ImageAnalysisByURL200Response>("/food/images/analyze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageAnalysisByURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Image Analysis by URL Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageAnalysisByURL200Response</returns>
        public async System.Threading.Tasks.Task<ImageAnalysisByURL200Response> ImageAnalysisByURLAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ImageAnalysisByURL200Response> localVarResponse = await ImageAnalysisByURLWithHttpInfoAsync(imageUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Image Analysis by URL Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be analyzed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageAnalysisByURL200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ImageAnalysisByURL200Response>> ImageAnalysisByURLWithHttpInfoAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'imageUrl' when calling MiscApi->ImageAnalysisByURL");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "imageUrl", imageUrl));

            localVarRequestOptions.Operation = "MiscApi.ImageAnalysisByURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ImageAnalysisByURL200Response>("/food/images/analyze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageAnalysisByURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Image Classification by URL Classify a food image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ImageClassificationByURL200Response</returns>
        public ImageClassificationByURL200Response ImageClassificationByURL(string imageUrl, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ImageClassificationByURL200Response> localVarResponse = ImageClassificationByURLWithHttpInfo(imageUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Image Classification by URL Classify a food image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ImageClassificationByURL200Response</returns>
        public spoonacular.Client.ApiResponse<ImageClassificationByURL200Response> ImageClassificationByURLWithHttpInfo(string imageUrl, int operationIndex = 0)
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'imageUrl' when calling MiscApi->ImageClassificationByURL");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "imageUrl", imageUrl));

            localVarRequestOptions.Operation = "MiscApi.ImageClassificationByURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ImageClassificationByURL200Response>("/food/images/classify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageClassificationByURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Image Classification by URL Classify a food image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ImageClassificationByURL200Response</returns>
        public async System.Threading.Tasks.Task<ImageClassificationByURL200Response> ImageClassificationByURLAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ImageClassificationByURL200Response> localVarResponse = await ImageClassificationByURLWithHttpInfoAsync(imageUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Image Classification by URL Classify a food image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageUrl">The URL of the image to be classified.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ImageClassificationByURL200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ImageClassificationByURL200Response>> ImageClassificationByURLWithHttpInfoAsync(string imageUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'imageUrl' is set
            if (imageUrl == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'imageUrl' when calling MiscApi->ImageClassificationByURL");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "imageUrl", imageUrl));

            localVarRequestOptions.Operation = "MiscApi.ImageClassificationByURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ImageClassificationByURL200Response>("/food/images/classify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageClassificationByURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search All Food Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchAllFood200Response</returns>
        public SearchAllFood200Response SearchAllFood(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchAllFood200Response> localVarResponse = SearchAllFoodWithHttpInfo(query, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search All Food Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchAllFood200Response</returns>
        public spoonacular.Client.ApiResponse<SearchAllFood200Response> SearchAllFoodWithHttpInfo(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MiscApi->SearchAllFood");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.SearchAllFood";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchAllFood200Response>("/food/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAllFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search All Food Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchAllFood200Response</returns>
        public async System.Threading.Tasks.Task<SearchAllFood200Response> SearchAllFoodAsync(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchAllFood200Response> localVarResponse = await SearchAllFoodWithHttpInfoAsync(query, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search All Food Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchAllFood200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchAllFood200Response>> SearchAllFoodWithHttpInfoAsync(string query, int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MiscApi->SearchAllFood");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.SearchAllFood";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchAllFood200Response>("/food/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAllFood", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Custom Foods Search custom foods in a user&#39;s account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchCustomFoods200Response</returns>
        public SearchCustomFoods200Response SearchCustomFoods(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchCustomFoods200Response> localVarResponse = SearchCustomFoodsWithHttpInfo(username, hash, query, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Custom Foods Search custom foods in a user&#39;s account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchCustomFoods200Response</returns>
        public spoonacular.Client.ApiResponse<SearchCustomFoods200Response> SearchCustomFoodsWithHttpInfo(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MiscApi->SearchCustomFoods");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MiscApi->SearchCustomFoods");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.SearchCustomFoods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchCustomFoods200Response>("/food/customFoods/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCustomFoods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Custom Foods Search custom foods in a user&#39;s account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchCustomFoods200Response</returns>
        public async System.Threading.Tasks.Task<SearchCustomFoods200Response> SearchCustomFoodsAsync(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchCustomFoods200Response> localVarResponse = await SearchCustomFoodsWithHttpInfoAsync(username, hash, query, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Custom Foods Search custom foods in a user&#39;s account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchCustomFoods200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchCustomFoods200Response>> SearchCustomFoodsWithHttpInfoAsync(string username, string hash, string? query = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MiscApi->SearchCustomFoods");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MiscApi->SearchCustomFoods");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.SearchCustomFoods";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchCustomFoods200Response>("/food/customFoods/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchCustomFoods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Food Videos Find recipe and other food related videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchFoodVideos200Response</returns>
        public SearchFoodVideos200Response SearchFoodVideos(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchFoodVideos200Response> localVarResponse = SearchFoodVideosWithHttpInfo(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Food Videos Find recipe and other food related videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchFoodVideos200Response</returns>
        public spoonacular.Client.ApiResponse<SearchFoodVideos200Response> SearchFoodVideosWithHttpInfo(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (minLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minLength", minLength));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxLength", maxLength));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.SearchFoodVideos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchFoodVideos200Response>("/food/videos/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchFoodVideos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Food Videos Find recipe and other food related videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchFoodVideos200Response</returns>
        public async System.Threading.Tasks.Task<SearchFoodVideos200Response> SearchFoodVideosAsync(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchFoodVideos200Response> localVarResponse = await SearchFoodVideosWithHttpInfoAsync(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Food Videos Find recipe and other food related videos.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="type">The type of the recipes. See a full list of supported meal types. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="minLength">Minimum video length in seconds. (optional)</param>
        /// <param name="maxLength">Maximum video length in seconds. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchFoodVideos200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchFoodVideos200Response>> SearchFoodVideosWithHttpInfoAsync(string? query = default(string?), string? type = default(string?), string? cuisine = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), decimal? minLength = default(decimal?), decimal? maxLength = default(decimal?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (minLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minLength", minLength));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxLength", maxLength));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MiscApi.SearchFoodVideos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchFoodVideos200Response>("/food/videos/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchFoodVideos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Site Content Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSiteContent200Response</returns>
        public SearchSiteContent200Response SearchSiteContent(string query, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchSiteContent200Response> localVarResponse = SearchSiteContentWithHttpInfo(query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Site Content Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSiteContent200Response</returns>
        public spoonacular.Client.ApiResponse<SearchSiteContent200Response> SearchSiteContentWithHttpInfo(string query, int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MiscApi->SearchSiteContent");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));

            localVarRequestOptions.Operation = "MiscApi.SearchSiteContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchSiteContent200Response>("/food/site/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSiteContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Site Content Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSiteContent200Response</returns>
        public async System.Threading.Tasks.Task<SearchSiteContent200Response> SearchSiteContentAsync(string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchSiteContent200Response> localVarResponse = await SearchSiteContentWithHttpInfoAsync(query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Site Content Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSiteContent200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchSiteContent200Response>> SearchSiteContentWithHttpInfoAsync(string query, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MiscApi->SearchSiteContent");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));

            localVarRequestOptions.Operation = "MiscApi.SearchSiteContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchSiteContent200Response>("/food/site/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSiteContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Talk to Chatbot This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TalkToChatbot200Response</returns>
        public TalkToChatbot200Response TalkToChatbot(string text, string? contextId = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<TalkToChatbot200Response> localVarResponse = TalkToChatbotWithHttpInfo(text, contextId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Talk to Chatbot This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TalkToChatbot200Response</returns>
        public spoonacular.Client.ApiResponse<TalkToChatbot200Response> TalkToChatbotWithHttpInfo(string text, string? contextId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'text' when calling MiscApi->TalkToChatbot");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            if (contextId != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "contextId", contextId));
            }

            localVarRequestOptions.Operation = "MiscApi.TalkToChatbot";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TalkToChatbot200Response>("/food/converse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalkToChatbot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Talk to Chatbot This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TalkToChatbot200Response</returns>
        public async System.Threading.Tasks.Task<TalkToChatbot200Response> TalkToChatbotAsync(string text, string? contextId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<TalkToChatbot200Response> localVarResponse = await TalkToChatbotWithHttpInfoAsync(text, contextId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Talk to Chatbot This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The request / question / answer from the user to the chatbot.</param>
        /// <param name="contextId">An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TalkToChatbot200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<TalkToChatbot200Response>> TalkToChatbotWithHttpInfoAsync(string text, string? contextId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'text' when calling MiscApi->TalkToChatbot");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            if (contextId != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "contextId", contextId));
            }

            localVarRequestOptions.Operation = "MiscApi.TalkToChatbot";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TalkToChatbot200Response>("/food/converse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalkToChatbot", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
