/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Autocomplete Product Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AutocompleteProductSearch200Response</returns>
        AutocompleteProductSearch200Response AutocompleteProductSearch(string query, int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Autocomplete Product Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AutocompleteProductSearch200Response</returns>
        ApiResponse<AutocompleteProductSearch200Response> AutocompleteProductSearchWithHttpInfo(string query, int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Classify Grocery Product
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClassifyGroceryProduct200Response</returns>
        ClassifyGroceryProduct200Response ClassifyGroceryProduct(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0);

        /// <summary>
        /// Classify Grocery Product
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClassifyGroceryProduct200Response</returns>
        ApiResponse<ClassifyGroceryProduct200Response> ClassifyGroceryProductWithHttpInfo(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0);
        /// <summary>
        /// Classify Grocery Product Bulk
        /// </summary>
        /// <remarks>
        /// Provide a set of product jsons, get back classified products.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;</returns>
        List<ClassifyGroceryProductBulk200ResponseInner> ClassifyGroceryProductBulk(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0);

        /// <summary>
        /// Classify Grocery Product Bulk
        /// </summary>
        /// <remarks>
        /// Provide a set of product jsons, get back classified products.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;</returns>
        ApiResponse<List<ClassifyGroceryProductBulk200ResponseInner>> ClassifyGroceryProductBulkWithHttpInfo(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Comparable Products
        /// </summary>
        /// <remarks>
        /// Find comparable products to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetComparableProducts200Response</returns>
        GetComparableProducts200Response GetComparableProducts(decimal upc, int operationIndex = 0);

        /// <summary>
        /// Get Comparable Products
        /// </summary>
        /// <remarks>
        /// Find comparable products to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetComparableProducts200Response</returns>
        ApiResponse<GetComparableProducts200Response> GetComparableProductsWithHttpInfo(decimal upc, int operationIndex = 0);
        /// <summary>
        /// Get Product Information
        /// </summary>
        /// <remarks>
        /// Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProductInformation200Response</returns>
        GetProductInformation200Response GetProductInformation(int id, int operationIndex = 0);

        /// <summary>
        /// Get Product Information
        /// </summary>
        /// <remarks>
        /// Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProductInformation200Response</returns>
        ApiResponse<GetProductInformation200Response> GetProductInformationWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Product Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ProductNutritionByIDImage(decimal id, int operationIndex = 0);

        /// <summary>
        /// Product Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ProductNutritionByIDImageWithHttpInfo(decimal id, int operationIndex = 0);
        /// <summary>
        /// Product Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ProductNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Product Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ProductNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Product Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ProductNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Product Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ProductNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search Grocery Products
        /// </summary>
        /// <remarks>
        /// Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGroceryProducts200Response</returns>
        SearchGroceryProducts200Response SearchGroceryProducts(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Grocery Products
        /// </summary>
        /// <remarks>
        /// Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGroceryProducts200Response</returns>
        ApiResponse<SearchGroceryProducts200Response> SearchGroceryProductsWithHttpInfo(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Grocery Products by UPC
        /// </summary>
        /// <remarks>
        /// Get information about a packaged food using its UPC.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGroceryProductsByUPC200Response</returns>
        SearchGroceryProductsByUPC200Response SearchGroceryProductsByUPC(decimal upc, int operationIndex = 0);

        /// <summary>
        /// Search Grocery Products by UPC
        /// </summary>
        /// <remarks>
        /// Get information about a packaged food using its UPC.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGroceryProductsByUPC200Response</returns>
        ApiResponse<SearchGroceryProductsByUPC200Response> SearchGroceryProductsByUPCWithHttpInfo(decimal upc, int operationIndex = 0);
        /// <summary>
        /// Product Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeProductNutritionByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Product Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeProductNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Autocomplete Product Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutocompleteProductSearch200Response</returns>
        System.Threading.Tasks.Task<AutocompleteProductSearch200Response> AutocompleteProductSearchAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Autocomplete Product Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutocompleteProductSearch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutocompleteProductSearch200Response>> AutocompleteProductSearchWithHttpInfoAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Classify Grocery Product
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClassifyGroceryProduct200Response</returns>
        System.Threading.Tasks.Task<ClassifyGroceryProduct200Response> ClassifyGroceryProductAsync(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Classify Grocery Product
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClassifyGroceryProduct200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassifyGroceryProduct200Response>> ClassifyGroceryProductWithHttpInfoAsync(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Classify Grocery Product Bulk
        /// </summary>
        /// <remarks>
        /// Provide a set of product jsons, get back classified products.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<ClassifyGroceryProductBulk200ResponseInner>> ClassifyGroceryProductBulkAsync(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Classify Grocery Product Bulk
        /// </summary>
        /// <remarks>
        /// Provide a set of product jsons, get back classified products.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClassifyGroceryProductBulk200ResponseInner>>> ClassifyGroceryProductBulkWithHttpInfoAsync(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Comparable Products
        /// </summary>
        /// <remarks>
        /// Find comparable products to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetComparableProducts200Response</returns>
        System.Threading.Tasks.Task<GetComparableProducts200Response> GetComparableProductsAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Comparable Products
        /// </summary>
        /// <remarks>
        /// Find comparable products to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetComparableProducts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetComparableProducts200Response>> GetComparableProductsWithHttpInfoAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Product Information
        /// </summary>
        /// <remarks>
        /// Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductInformation200Response</returns>
        System.Threading.Tasks.Task<GetProductInformation200Response> GetProductInformationAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Product Information
        /// </summary>
        /// <remarks>
        /// Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductInformation200Response>> GetProductInformationWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Product Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ProductNutritionByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Product Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProductNutritionByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Product Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ProductNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Product Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ProductNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Product Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ProductNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Product Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a product&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ProductNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Grocery Products
        /// </summary>
        /// <remarks>
        /// Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGroceryProducts200Response</returns>
        System.Threading.Tasks.Task<SearchGroceryProducts200Response> SearchGroceryProductsAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Grocery Products
        /// </summary>
        /// <remarks>
        /// Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGroceryProducts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchGroceryProducts200Response>> SearchGroceryProductsWithHttpInfoAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Grocery Products by UPC
        /// </summary>
        /// <remarks>
        /// Get information about a packaged food using its UPC.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGroceryProductsByUPC200Response</returns>
        System.Threading.Tasks.Task<SearchGroceryProductsByUPC200Response> SearchGroceryProductsByUPCAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Grocery Products by UPC
        /// </summary>
        /// <remarks>
        /// Get information about a packaged food using its UPC.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGroceryProductsByUPC200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchGroceryProductsByUPC200Response>> SearchGroceryProductsByUPCWithHttpInfoAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Product Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeProductNutritionByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Product Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeProductNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IProductsApiSync, IProductsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductsApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Autocomplete Product Search Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AutocompleteProductSearch200Response</returns>
        public AutocompleteProductSearch200Response AutocompleteProductSearch(string query, int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<AutocompleteProductSearch200Response> localVarResponse = AutocompleteProductSearchWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Product Search Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AutocompleteProductSearch200Response</returns>
        public spoonacular.Client.ApiResponse<AutocompleteProductSearch200Response> AutocompleteProductSearchWithHttpInfo(string query, int? number = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling ProductsApi->AutocompleteProductSearch");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "ProductsApi.AutocompleteProductSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AutocompleteProductSearch200Response>("/food/products/suggest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteProductSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Product Search Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutocompleteProductSearch200Response</returns>
        public async System.Threading.Tasks.Task<AutocompleteProductSearch200Response> AutocompleteProductSearchAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<AutocompleteProductSearch200Response> localVarResponse = await AutocompleteProductSearchWithHttpInfoAsync(query, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Product Search Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutocompleteProductSearch200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<AutocompleteProductSearch200Response>> AutocompleteProductSearchWithHttpInfoAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling ProductsApi->AutocompleteProductSearch");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "ProductsApi.AutocompleteProductSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AutocompleteProductSearch200Response>("/food/products/suggest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteProductSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Grocery Product This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClassifyGroceryProduct200Response</returns>
        public ClassifyGroceryProduct200Response ClassifyGroceryProduct(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ClassifyGroceryProduct200Response> localVarResponse = ClassifyGroceryProductWithHttpInfo(classifyGroceryProductRequest, locale);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Grocery Product This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClassifyGroceryProduct200Response</returns>
        public spoonacular.Client.ApiResponse<ClassifyGroceryProduct200Response> ClassifyGroceryProductWithHttpInfo(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'classifyGroceryProductRequest' is set
            if (classifyGroceryProductRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'classifyGroceryProductRequest' when calling ProductsApi->ClassifyGroceryProduct");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            localVarRequestOptions.Data = classifyGroceryProductRequest;

            localVarRequestOptions.Operation = "ProductsApi.ClassifyGroceryProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClassifyGroceryProduct200Response>("/food/products/classify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyGroceryProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Grocery Product This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClassifyGroceryProduct200Response</returns>
        public async System.Threading.Tasks.Task<ClassifyGroceryProduct200Response> ClassifyGroceryProductAsync(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ClassifyGroceryProduct200Response> localVarResponse = await ClassifyGroceryProductWithHttpInfoAsync(classifyGroceryProductRequest, locale, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Grocery Product This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductRequest"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClassifyGroceryProduct200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ClassifyGroceryProduct200Response>> ClassifyGroceryProductWithHttpInfoAsync(ClassifyGroceryProductRequest classifyGroceryProductRequest, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'classifyGroceryProductRequest' is set
            if (classifyGroceryProductRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'classifyGroceryProductRequest' when calling ProductsApi->ClassifyGroceryProduct");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            localVarRequestOptions.Data = classifyGroceryProductRequest;

            localVarRequestOptions.Operation = "ProductsApi.ClassifyGroceryProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClassifyGroceryProduct200Response>("/food/products/classify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyGroceryProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Grocery Product Bulk Provide a set of product jsons, get back classified products.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;</returns>
        public List<ClassifyGroceryProductBulk200ResponseInner> ClassifyGroceryProductBulk(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<ClassifyGroceryProductBulk200ResponseInner>> localVarResponse = ClassifyGroceryProductBulkWithHttpInfo(classifyGroceryProductBulkRequestInner, locale);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Grocery Product Bulk Provide a set of product jsons, get back classified products.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<ClassifyGroceryProductBulk200ResponseInner>> ClassifyGroceryProductBulkWithHttpInfo(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'classifyGroceryProductBulkRequestInner' is set
            if (classifyGroceryProductBulkRequestInner == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'classifyGroceryProductBulkRequestInner' when calling ProductsApi->ClassifyGroceryProductBulk");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            localVarRequestOptions.Data = classifyGroceryProductBulkRequestInner;

            localVarRequestOptions.Operation = "ProductsApi.ClassifyGroceryProductBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ClassifyGroceryProductBulk200ResponseInner>>("/food/products/classifyBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyGroceryProductBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Grocery Product Bulk Provide a set of product jsons, get back classified products.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClassifyGroceryProductBulk200ResponseInner>> ClassifyGroceryProductBulkAsync(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<ClassifyGroceryProductBulk200ResponseInner>> localVarResponse = await ClassifyGroceryProductBulkWithHttpInfoAsync(classifyGroceryProductBulkRequestInner, locale, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Grocery Product Bulk Provide a set of product jsons, get back classified products.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classifyGroceryProductBulkRequestInner"></param>
        /// <param name="locale">The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClassifyGroceryProductBulk200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<ClassifyGroceryProductBulk200ResponseInner>>> ClassifyGroceryProductBulkWithHttpInfoAsync(List<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, string? locale = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'classifyGroceryProductBulkRequestInner' is set
            if (classifyGroceryProductBulkRequestInner == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'classifyGroceryProductBulkRequestInner' when calling ProductsApi->ClassifyGroceryProductBulk");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            localVarRequestOptions.Data = classifyGroceryProductBulkRequestInner;

            localVarRequestOptions.Operation = "ProductsApi.ClassifyGroceryProductBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ClassifyGroceryProductBulk200ResponseInner>>("/food/products/classifyBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyGroceryProductBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comparable Products Find comparable products to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetComparableProducts200Response</returns>
        public GetComparableProducts200Response GetComparableProducts(decimal upc, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetComparableProducts200Response> localVarResponse = GetComparableProductsWithHttpInfo(upc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comparable Products Find comparable products to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetComparableProducts200Response</returns>
        public spoonacular.Client.ApiResponse<GetComparableProducts200Response> GetComparableProductsWithHttpInfo(decimal upc, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("upc", spoonacular.Client.ClientUtils.ParameterToString(upc)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetComparableProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetComparableProducts200Response>("/food/products/upc/{upc}/comparable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetComparableProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Comparable Products Find comparable products to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetComparableProducts200Response</returns>
        public async System.Threading.Tasks.Task<GetComparableProducts200Response> GetComparableProductsAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetComparableProducts200Response> localVarResponse = await GetComparableProductsWithHttpInfoAsync(upc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Comparable Products Find comparable products to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The UPC of the product for which you want to find comparable products.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetComparableProducts200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetComparableProducts200Response>> GetComparableProductsWithHttpInfoAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("upc", spoonacular.Client.ClientUtils.ParameterToString(upc)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetComparableProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetComparableProducts200Response>("/food/products/upc/{upc}/comparable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetComparableProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Information Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProductInformation200Response</returns>
        public GetProductInformation200Response GetProductInformation(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetProductInformation200Response> localVarResponse = GetProductInformationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Information Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProductInformation200Response</returns>
        public spoonacular.Client.ApiResponse<GetProductInformation200Response> GetProductInformationWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetProductInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductInformation200Response>("/food/products/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Information Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductInformation200Response</returns>
        public async System.Threading.Tasks.Task<GetProductInformation200Response> GetProductInformationAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetProductInformation200Response> localVarResponse = await GetProductInformationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Information Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductInformation200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetProductInformation200Response>> GetProductInformationWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetProductInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductInformation200Response>("/food/products/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition by ID Image Visualize a product&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ProductNutritionByIDImage(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = ProductNutritionByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition by ID Image Visualize a product&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> ProductNutritionByIDImageWithHttpInfo(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.ProductNutritionByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/food/products/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition by ID Image Visualize a product&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ProductNutritionByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await ProductNutritionByIDImageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition by ID Image Visualize a product&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the product.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> ProductNutritionByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.ProductNutritionByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/food/products/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition Label Image Get a product&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ProductNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = ProductNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition Label Image Get a product&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> ProductNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "ProductsApi.ProductNutritionLabelImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/food/products/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition Label Image Get a product&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ProductNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await ProductNutritionLabelImageWithHttpInfoAsync(id, showOptionalNutrients, showZeroValues, showIngredients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition Label Image Get a product&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> ProductNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "ProductsApi.ProductNutritionLabelImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/food/products/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition Label Widget Get a product&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ProductNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = ProductNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition Label Widget Get a product&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> ProductNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "ProductsApi.ProductNutritionLabelWidget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/food/products/{id}/nutritionLabel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition Label Widget Get a product&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ProductNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await ProductNutritionLabelWidgetWithHttpInfoAsync(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition Label Widget Get a product&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The product id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> ProductNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "ProductsApi.ProductNutritionLabelWidget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/food/products/{id}/nutritionLabel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Grocery Products Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGroceryProducts200Response</returns>
        public SearchGroceryProducts200Response SearchGroceryProducts(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchGroceryProducts200Response> localVarResponse = SearchGroceryProductsWithHttpInfo(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Grocery Products Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGroceryProducts200Response</returns>
        public spoonacular.Client.ApiResponse<SearchGroceryProducts200Response> SearchGroceryProductsWithHttpInfo(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (addProductInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addProductInformation", addProductInformation));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "ProductsApi.SearchGroceryProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchGroceryProducts200Response>("/food/products/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroceryProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Grocery Products Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGroceryProducts200Response</returns>
        public async System.Threading.Tasks.Task<SearchGroceryProducts200Response> SearchGroceryProductsAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchGroceryProducts200Response> localVarResponse = await SearchGroceryProductsWithHttpInfoAsync(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Grocery Products Search packaged food products, such as frozen pizza or Greek yogurt.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the product must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the product can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the product must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the product can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the product must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the product can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the product must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the product can have. (optional)</param>
        /// <param name="addProductInformation">If set to true, you get more information about the products returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGroceryProducts200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchGroceryProducts200Response>> SearchGroceryProductsWithHttpInfoAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addProductInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (addProductInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addProductInformation", addProductInformation));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "ProductsApi.SearchGroceryProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchGroceryProducts200Response>("/food/products/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroceryProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Grocery Products by UPC Get information about a packaged food using its UPC.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGroceryProductsByUPC200Response</returns>
        public SearchGroceryProductsByUPC200Response SearchGroceryProductsByUPC(decimal upc, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchGroceryProductsByUPC200Response> localVarResponse = SearchGroceryProductsByUPCWithHttpInfo(upc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Grocery Products by UPC Get information about a packaged food using its UPC.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGroceryProductsByUPC200Response</returns>
        public spoonacular.Client.ApiResponse<SearchGroceryProductsByUPC200Response> SearchGroceryProductsByUPCWithHttpInfo(decimal upc, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("upc", spoonacular.Client.ClientUtils.ParameterToString(upc)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.SearchGroceryProductsByUPC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchGroceryProductsByUPC200Response>("/food/products/upc/{upc}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroceryProductsByUPC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Grocery Products by UPC Get information about a packaged food using its UPC.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGroceryProductsByUPC200Response</returns>
        public async System.Threading.Tasks.Task<SearchGroceryProductsByUPC200Response> SearchGroceryProductsByUPCAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchGroceryProductsByUPC200Response> localVarResponse = await SearchGroceryProductsByUPCWithHttpInfoAsync(upc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Grocery Products by UPC Get information about a packaged food using its UPC.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="upc">The product&#39;s UPC.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGroceryProductsByUPC200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchGroceryProductsByUPC200Response>> SearchGroceryProductsByUPCWithHttpInfoAsync(decimal upc, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("upc", spoonacular.Client.ClientUtils.ParameterToString(upc)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.SearchGroceryProductsByUPC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchGroceryProductsByUPC200Response>("/food/products/upc/{upc}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroceryProductsByUPC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition by ID Widget Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeProductNutritionByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeProductNutritionByIDWithHttpInfo(id, defaultCss);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition by ID Widget Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeProductNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "ProductsApi.VisualizeProductNutritionByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/food/products/{id}/nutritionWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeProductNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Product Nutrition by ID Widget Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeProductNutritionByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeProductNutritionByIDWithHttpInfoAsync(id, defaultCss, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Product Nutrition by ID Widget Visualize a product&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeProductNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "ProductsApi.VisualizeProductNutritionByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/food/products/{id}/nutritionWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeProductNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
