/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyzeARecipeSearchQuery200Response</returns>
        AnalyzeARecipeSearchQuery200Response AnalyzeARecipeSearchQuery(string q, int operationIndex = 0);

        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyzeARecipeSearchQuery200Response</returns>
        ApiResponse<AnalyzeARecipeSearchQuery200Response> AnalyzeARecipeSearchQueryWithHttpInfo(string q, int operationIndex = 0);
        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyzeRecipeInstructions200Response</returns>
        AnalyzeRecipeInstructions200Response AnalyzeRecipeInstructions(string instructions, int operationIndex = 0);

        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyzeRecipeInstructions200Response</returns>
        ApiResponse<AnalyzeRecipeInstructions200Response> AnalyzeRecipeInstructionsWithHttpInfo(string instructions, int operationIndex = 0);
        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRecipeSearch200ResponseInner&gt;</returns>
        List<AutocompleteRecipeSearch200ResponseInner> AutocompleteRecipeSearch(string? query = default(string?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRecipeSearch200ResponseInner&gt;</returns>
        ApiResponse<List<AutocompleteRecipeSearch200ResponseInner>> AutocompleteRecipeSearchWithHttpInfo(string? query = default(string?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClassifyCuisine200Response</returns>
        ClassifyCuisine200Response ClassifyCuisine(string title, string ingredientList, string? language = default(string?), int operationIndex = 0);

        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClassifyCuisine200Response</returns>
        ApiResponse<ClassifyCuisine200Response> ClassifyCuisineWithHttpInfo(string title, string ingredientList, string? language = default(string?), int operationIndex = 0);
        /// <summary>
        /// Compute Glycemic Load
        /// </summary>
        /// <remarks>
        /// Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComputeGlycemicLoad200Response</returns>
        ComputeGlycemicLoad200Response ComputeGlycemicLoad(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0);

        /// <summary>
        /// Compute Glycemic Load
        /// </summary>
        /// <remarks>
        /// Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComputeGlycemicLoad200Response</returns>
        ApiResponse<ComputeGlycemicLoad200Response> ComputeGlycemicLoadWithHttpInfo(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0);
        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvertAmounts200Response</returns>
        ConvertAmounts200Response ConvertAmounts(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0);

        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvertAmounts200Response</returns>
        ApiResponse<ConvertAmounts200Response> ConvertAmountsWithHttpInfo(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0);
        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateRecipeCard200Response</returns>
        CreateRecipeCard200Response CreateRecipeCard(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateRecipeCard200Response</returns>
        ApiResponse<CreateRecipeCard200Response> CreateRecipeCardWithHttpInfo(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0);
        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream EquipmentByIDImage(decimal id, int operationIndex = 0);

        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> EquipmentByIDImageWithHttpInfo(decimal id, int operationIndex = 0);
        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeInformation200Response</returns>
        GetRecipeInformation200Response ExtractRecipeFromWebsite(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeInformation200Response</returns>
        ApiResponse<GetRecipeInformation200Response> ExtractRecipeFromWebsiteWithHttpInfo(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAnalyzedRecipeInstructions200Response</returns>
        GetAnalyzedRecipeInstructions200Response GetAnalyzedRecipeInstructions(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAnalyzedRecipeInstructions200Response</returns>
        ApiResponse<GetAnalyzedRecipeInstructions200Response> GetAnalyzedRecipeInstructionsWithHttpInfo(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRandomRecipes200Response</returns>
        GetRandomRecipes200Response GetRandomRecipes(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRandomRecipes200Response</returns>
        ApiResponse<GetRandomRecipes200Response> GetRandomRecipesWithHttpInfo(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeEquipmentByID200Response</returns>
        GetRecipeEquipmentByID200Response GetRecipeEquipmentByID(int id, int operationIndex = 0);

        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeEquipmentByID200Response</returns>
        ApiResponse<GetRecipeEquipmentByID200Response> GetRecipeEquipmentByIDWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeInformation200Response</returns>
        GetRecipeInformation200Response GetRecipeInformation(int id, bool? includeNutrition = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeInformation200Response</returns>
        ApiResponse<GetRecipeInformation200Response> GetRecipeInformationWithHttpInfo(int id, bool? includeNutrition = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetRecipeInformationBulk200ResponseInner&gt;</returns>
        List<GetRecipeInformationBulk200ResponseInner> GetRecipeInformationBulk(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetRecipeInformationBulk200ResponseInner&gt;</returns>
        ApiResponse<List<GetRecipeInformationBulk200ResponseInner>> GetRecipeInformationBulkWithHttpInfo(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeIngredientsByID200Response</returns>
        GetRecipeIngredientsByID200Response GetRecipeIngredientsByID(int id, int operationIndex = 0);

        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeIngredientsByID200Response</returns>
        ApiResponse<GetRecipeIngredientsByID200Response> GetRecipeIngredientsByIDWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeNutritionWidgetByID200Response</returns>
        GetRecipeNutritionWidgetByID200Response GetRecipeNutritionWidgetByID(int id, int operationIndex = 0);

        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeNutritionWidgetByID200Response</returns>
        ApiResponse<GetRecipeNutritionWidgetByID200Response> GetRecipeNutritionWidgetByIDWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipePriceBreakdownByID200Response</returns>
        GetRecipePriceBreakdownByID200Response GetRecipePriceBreakdownByID(int id, int operationIndex = 0);

        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipePriceBreakdownByID200Response</returns>
        ApiResponse<GetRecipePriceBreakdownByID200Response> GetRecipePriceBreakdownByIDWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeTasteByID200Response</returns>
        GetRecipeTasteByID200Response GetRecipeTasteByID(int id, bool? normalize = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeTasteByID200Response</returns>
        ApiResponse<GetRecipeTasteByID200Response> GetRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetSimilarRecipes200ResponseInner&gt;</returns>
        List<GetSimilarRecipes200ResponseInner> GetSimilarRecipes(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetSimilarRecipes200ResponseInner&gt;</returns>
        ApiResponse<List<GetSimilarRecipes200ResponseInner>> GetSimilarRecipesWithHttpInfo(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuessNutritionByDishName200Response</returns>
        GuessNutritionByDishName200Response GuessNutritionByDishName(string title, int operationIndex = 0);

        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuessNutritionByDishName200Response</returns>
        ApiResponse<GuessNutritionByDishName200Response> GuessNutritionByDishNameWithHttpInfo(string title, int operationIndex = 0);
        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ParseIngredients200ResponseInner&gt;</returns>
        List<ParseIngredients200ResponseInner> ParseIngredients(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ParseIngredients200ResponseInner&gt;</returns>
        ApiResponse<List<ParseIngredients200ResponseInner>> ParseIngredientsWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PriceBreakdownByIDImage(decimal id, int operationIndex = 0);

        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PriceBreakdownByIDImageWithHttpInfo(decimal id, int operationIndex = 0);
        /// <summary>
        /// Quick Answer
        /// </summary>
        /// <remarks>
        /// Answer a nutrition related natural language question.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuickAnswer200Response</returns>
        QuickAnswer200Response QuickAnswer(string q, int operationIndex = 0);

        /// <summary>
        /// Quick Answer
        /// </summary>
        /// <remarks>
        /// Answer a nutrition related natural language question.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuickAnswer200Response</returns>
        ApiResponse<QuickAnswer200Response> QuickAnswerWithHttpInfo(string q, int operationIndex = 0);
        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RecipeNutritionByIDImage(decimal id, int operationIndex = 0);

        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RecipeNutritionByIDImageWithHttpInfo(decimal id, int operationIndex = 0);
        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RecipeNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RecipeNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string RecipeNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RecipeNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RecipeTasteByIDImage(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0);

        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RecipeTasteByIDImageWithHttpInfo(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0);
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRecipes200Response</returns>
        SearchRecipes200Response SearchRecipes(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRecipes200Response</returns>
        ApiResponse<SearchRecipes200Response> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SearchRecipesByIngredients200ResponseInner&gt;</returns>
        List<SearchRecipesByIngredients200ResponseInner> SearchRecipesByIngredients(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SearchRecipesByIngredients200ResponseInner&gt;</returns>
        ApiResponse<List<SearchRecipesByIngredients200ResponseInner>> SearchRecipesByIngredientsWithHttpInfo(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SearchRecipesByNutrients200ResponseInner&gt;</returns>
        List<SearchRecipesByNutrients200ResponseInner> SearchRecipesByNutrients(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SearchRecipesByNutrients200ResponseInner&gt;</returns>
        ApiResponse<List<SearchRecipesByNutrients200ResponseInner>> SearchRecipesByNutrientsWithHttpInfo(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SummarizeRecipe200Response</returns>
        SummarizeRecipe200Response SummarizeRecipe(int id, int operationIndex = 0);

        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SummarizeRecipe200Response</returns>
        ApiResponse<SummarizeRecipe200Response> SummarizeRecipeWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeEquipment(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeEquipmentWithHttpInfo(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizePriceBreakdown(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizePriceBreakdownWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipeEquipmentByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeEquipmentByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipeIngredientsByID(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0);

        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeIngredientsByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0);
        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipeNutrition(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeNutritionWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipeNutritionByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipePriceBreakdownByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipePriceBreakdownByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipeTaste(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0);

        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeTasteWithHttpInfo(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0);
        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeRecipeTasteByID(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0);

        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyzeARecipeSearchQuery200Response</returns>
        System.Threading.Tasks.Task<AnalyzeARecipeSearchQuery200Response> AnalyzeARecipeSearchQueryAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyzeARecipeSearchQuery200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyzeARecipeSearchQuery200Response>> AnalyzeARecipeSearchQueryWithHttpInfoAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyzeRecipeInstructions200Response</returns>
        System.Threading.Tasks.Task<AnalyzeRecipeInstructions200Response> AnalyzeRecipeInstructionsAsync(string instructions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyzeRecipeInstructions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyzeRecipeInstructions200Response>> AnalyzeRecipeInstructionsWithHttpInfoAsync(string instructions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRecipeSearch200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<AutocompleteRecipeSearch200ResponseInner>> AutocompleteRecipeSearchAsync(string? query = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRecipeSearch200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AutocompleteRecipeSearch200ResponseInner>>> AutocompleteRecipeSearchWithHttpInfoAsync(string? query = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClassifyCuisine200Response</returns>
        System.Threading.Tasks.Task<ClassifyCuisine200Response> ClassifyCuisineAsync(string title, string ingredientList, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClassifyCuisine200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassifyCuisine200Response>> ClassifyCuisineWithHttpInfoAsync(string title, string ingredientList, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Compute Glycemic Load
        /// </summary>
        /// <remarks>
        /// Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComputeGlycemicLoad200Response</returns>
        System.Threading.Tasks.Task<ComputeGlycemicLoad200Response> ComputeGlycemicLoadAsync(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Compute Glycemic Load
        /// </summary>
        /// <remarks>
        /// Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComputeGlycemicLoad200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComputeGlycemicLoad200Response>> ComputeGlycemicLoadWithHttpInfoAsync(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertAmounts200Response</returns>
        System.Threading.Tasks.Task<ConvertAmounts200Response> ConvertAmountsAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertAmounts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertAmounts200Response>> ConvertAmountsWithHttpInfoAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRecipeCard200Response</returns>
        System.Threading.Tasks.Task<CreateRecipeCard200Response> CreateRecipeCardAsync(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRecipeCard200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateRecipeCard200Response>> CreateRecipeCardWithHttpInfoAsync(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> EquipmentByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> EquipmentByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeInformation200Response</returns>
        System.Threading.Tasks.Task<GetRecipeInformation200Response> ExtractRecipeFromWebsiteAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeInformation200Response>> ExtractRecipeFromWebsiteWithHttpInfoAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAnalyzedRecipeInstructions200Response</returns>
        System.Threading.Tasks.Task<GetAnalyzedRecipeInstructions200Response> GetAnalyzedRecipeInstructionsAsync(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAnalyzedRecipeInstructions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAnalyzedRecipeInstructions200Response>> GetAnalyzedRecipeInstructionsWithHttpInfoAsync(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRandomRecipes200Response</returns>
        System.Threading.Tasks.Task<GetRandomRecipes200Response> GetRandomRecipesAsync(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRandomRecipes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRandomRecipes200Response>> GetRandomRecipesWithHttpInfoAsync(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeEquipmentByID200Response</returns>
        System.Threading.Tasks.Task<GetRecipeEquipmentByID200Response> GetRecipeEquipmentByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeEquipmentByID200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeEquipmentByID200Response>> GetRecipeEquipmentByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeInformation200Response</returns>
        System.Threading.Tasks.Task<GetRecipeInformation200Response> GetRecipeInformationAsync(int id, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeInformation200Response>> GetRecipeInformationWithHttpInfoAsync(int id, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetRecipeInformationBulk200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetRecipeInformationBulk200ResponseInner>> GetRecipeInformationBulkAsync(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetRecipeInformationBulk200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetRecipeInformationBulk200ResponseInner>>> GetRecipeInformationBulkWithHttpInfoAsync(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeIngredientsByID200Response</returns>
        System.Threading.Tasks.Task<GetRecipeIngredientsByID200Response> GetRecipeIngredientsByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeIngredientsByID200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeIngredientsByID200Response>> GetRecipeIngredientsByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeNutritionWidgetByID200Response</returns>
        System.Threading.Tasks.Task<GetRecipeNutritionWidgetByID200Response> GetRecipeNutritionWidgetByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeNutritionWidgetByID200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeNutritionWidgetByID200Response>> GetRecipeNutritionWidgetByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipePriceBreakdownByID200Response</returns>
        System.Threading.Tasks.Task<GetRecipePriceBreakdownByID200Response> GetRecipePriceBreakdownByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipePriceBreakdownByID200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipePriceBreakdownByID200Response>> GetRecipePriceBreakdownByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeTasteByID200Response</returns>
        System.Threading.Tasks.Task<GetRecipeTasteByID200Response> GetRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeTasteByID200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecipeTasteByID200Response>> GetRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetSimilarRecipes200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetSimilarRecipes200ResponseInner>> GetSimilarRecipesAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetSimilarRecipes200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetSimilarRecipes200ResponseInner>>> GetSimilarRecipesWithHttpInfoAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuessNutritionByDishName200Response</returns>
        System.Threading.Tasks.Task<GuessNutritionByDishName200Response> GuessNutritionByDishNameAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuessNutritionByDishName200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GuessNutritionByDishName200Response>> GuessNutritionByDishNameWithHttpInfoAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParseIngredients200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<ParseIngredients200ResponseInner>> ParseIngredientsAsync(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParseIngredients200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ParseIngredients200ResponseInner>>> ParseIngredientsWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PriceBreakdownByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PriceBreakdownByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Quick Answer
        /// </summary>
        /// <remarks>
        /// Answer a nutrition related natural language question.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuickAnswer200Response</returns>
        System.Threading.Tasks.Task<QuickAnswer200Response> QuickAnswerAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Quick Answer
        /// </summary>
        /// <remarks>
        /// Answer a nutrition related natural language question.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuickAnswer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickAnswer200Response>> QuickAnswerWithHttpInfoAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RecipeNutritionByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipeNutritionByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RecipeNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipeNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RecipeNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RecipeNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RecipeTasteByIDImageAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RecipeTasteByIDImageWithHttpInfoAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRecipes200Response</returns>
        System.Threading.Tasks.Task<SearchRecipes200Response> SearchRecipesAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRecipes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchRecipes200Response>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SearchRecipesByIngredients200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<SearchRecipesByIngredients200ResponseInner>> SearchRecipesByIngredientsAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SearchRecipesByIngredients200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SearchRecipesByIngredients200ResponseInner>>> SearchRecipesByIngredientsWithHttpInfoAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SearchRecipesByNutrients200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<SearchRecipesByNutrients200ResponseInner>> SearchRecipesByNutrientsAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SearchRecipesByNutrients200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SearchRecipesByNutrients200ResponseInner>>> SearchRecipesByNutrientsWithHttpInfoAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizeRecipe200Response</returns>
        System.Threading.Tasks.Task<SummarizeRecipe200Response> SummarizeRecipeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizeRecipe200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizeRecipe200Response>> SummarizeRecipeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeEquipmentAsync(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeEquipmentWithHttpInfoAsync(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizePriceBreakdownAsync(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizePriceBreakdownWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeEquipmentByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeEquipmentByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeIngredientsByIDAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeIngredientsByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeNutritionAsync(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeNutritionWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeNutritionByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipePriceBreakdownByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipePriceBreakdownByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeTasteAsync(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeTasteWithHttpInfoAsync(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApi : IRecipesApiSync, IRecipesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecipesApi : IRecipesApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecipesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecipesApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecipesApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecipesApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyzeARecipeSearchQuery200Response</returns>
        public AnalyzeARecipeSearchQuery200Response AnalyzeARecipeSearchQuery(string q, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<AnalyzeARecipeSearchQuery200Response> localVarResponse = AnalyzeARecipeSearchQueryWithHttpInfo(q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyzeARecipeSearchQuery200Response</returns>
        public spoonacular.Client.ApiResponse<AnalyzeARecipeSearchQuery200Response> AnalyzeARecipeSearchQueryWithHttpInfo(string q, int operationIndex = 0)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'q' when calling RecipesApi->AnalyzeARecipeSearchQuery");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "q", q));

            localVarRequestOptions.Operation = "RecipesApi.AnalyzeARecipeSearchQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnalyzeARecipeSearchQuery200Response>("/recipes/queries/analyze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeARecipeSearchQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyzeARecipeSearchQuery200Response</returns>
        public async System.Threading.Tasks.Task<AnalyzeARecipeSearchQuery200Response> AnalyzeARecipeSearchQueryAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<AnalyzeARecipeSearchQuery200Response> localVarResponse = await AnalyzeARecipeSearchQueryWithHttpInfoAsync(q, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyzeARecipeSearchQuery200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<AnalyzeARecipeSearchQuery200Response>> AnalyzeARecipeSearchQueryWithHttpInfoAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'q' when calling RecipesApi->AnalyzeARecipeSearchQuery");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "q", q));

            localVarRequestOptions.Operation = "RecipesApi.AnalyzeARecipeSearchQuery";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnalyzeARecipeSearchQuery200Response>("/recipes/queries/analyze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeARecipeSearchQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyzeRecipeInstructions200Response</returns>
        public AnalyzeRecipeInstructions200Response AnalyzeRecipeInstructions(string instructions, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<AnalyzeRecipeInstructions200Response> localVarResponse = AnalyzeRecipeInstructionsWithHttpInfo(instructions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyzeRecipeInstructions200Response</returns>
        public spoonacular.Client.ApiResponse<AnalyzeRecipeInstructions200Response> AnalyzeRecipeInstructionsWithHttpInfo(string instructions, int operationIndex = 0)
        {
            // verify the required parameter 'instructions' is set
            if (instructions == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'instructions' when calling RecipesApi->AnalyzeRecipeInstructions");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("instructions", spoonacular.Client.ClientUtils.ParameterToString(instructions)); // form parameter

            localVarRequestOptions.Operation = "RecipesApi.AnalyzeRecipeInstructions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AnalyzeRecipeInstructions200Response>("/recipes/analyzeInstructions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyzeRecipeInstructions200Response</returns>
        public async System.Threading.Tasks.Task<AnalyzeRecipeInstructions200Response> AnalyzeRecipeInstructionsAsync(string instructions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<AnalyzeRecipeInstructions200Response> localVarResponse = await AnalyzeRecipeInstructionsWithHttpInfoAsync(instructions, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyzeRecipeInstructions200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<AnalyzeRecipeInstructions200Response>> AnalyzeRecipeInstructionsWithHttpInfoAsync(string instructions, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instructions' is set
            if (instructions == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'instructions' when calling RecipesApi->AnalyzeRecipeInstructions");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("instructions", spoonacular.Client.ClientUtils.ParameterToString(instructions)); // form parameter

            localVarRequestOptions.Operation = "RecipesApi.AnalyzeRecipeInstructions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AnalyzeRecipeInstructions200Response>("/recipes/analyzeInstructions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRecipeSearch200ResponseInner&gt;</returns>
        public List<AutocompleteRecipeSearch200ResponseInner> AutocompleteRecipeSearch(string? query = default(string?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<AutocompleteRecipeSearch200ResponseInner>> localVarResponse = AutocompleteRecipeSearchWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRecipeSearch200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<AutocompleteRecipeSearch200ResponseInner>> AutocompleteRecipeSearchWithHttpInfo(string? query = default(string?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "RecipesApi.AutocompleteRecipeSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AutocompleteRecipeSearch200ResponseInner>>("/recipes/autocomplete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteRecipeSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRecipeSearch200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<AutocompleteRecipeSearch200ResponseInner>> AutocompleteRecipeSearchAsync(string? query = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<AutocompleteRecipeSearch200ResponseInner>> localVarResponse = await AutocompleteRecipeSearchWithHttpInfoAsync(query, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRecipeSearch200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<AutocompleteRecipeSearch200ResponseInner>>> AutocompleteRecipeSearchWithHttpInfoAsync(string? query = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "RecipesApi.AutocompleteRecipeSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AutocompleteRecipeSearch200ResponseInner>>("/recipes/autocomplete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteRecipeSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClassifyCuisine200Response</returns>
        public ClassifyCuisine200Response ClassifyCuisine(string title, string ingredientList, string? language = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ClassifyCuisine200Response> localVarResponse = ClassifyCuisineWithHttpInfo(title, ingredientList, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClassifyCuisine200Response</returns>
        public spoonacular.Client.ApiResponse<ClassifyCuisine200Response> ClassifyCuisineWithHttpInfo(string title, string ingredientList, string? language = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->ClassifyCuisine");
            }

            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->ClassifyCuisine");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("title", spoonacular.Client.ClientUtils.ParameterToString(title)); // form parameter
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter

            localVarRequestOptions.Operation = "RecipesApi.ClassifyCuisine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClassifyCuisine200Response>("/recipes/cuisine", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyCuisine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClassifyCuisine200Response</returns>
        public async System.Threading.Tasks.Task<ClassifyCuisine200Response> ClassifyCuisineAsync(string title, string ingredientList, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ClassifyCuisine200Response> localVarResponse = await ClassifyCuisineWithHttpInfoAsync(title, ingredientList, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClassifyCuisine200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ClassifyCuisine200Response>> ClassifyCuisineWithHttpInfoAsync(string title, string ingredientList, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->ClassifyCuisine");
            }

            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->ClassifyCuisine");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("title", spoonacular.Client.ClientUtils.ParameterToString(title)); // form parameter
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter

            localVarRequestOptions.Operation = "RecipesApi.ClassifyCuisine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClassifyCuisine200Response>("/recipes/cuisine", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyCuisine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Compute Glycemic Load Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComputeGlycemicLoad200Response</returns>
        public ComputeGlycemicLoad200Response ComputeGlycemicLoad(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ComputeGlycemicLoad200Response> localVarResponse = ComputeGlycemicLoadWithHttpInfo(computeGlycemicLoadRequest, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compute Glycemic Load Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComputeGlycemicLoad200Response</returns>
        public spoonacular.Client.ApiResponse<ComputeGlycemicLoad200Response> ComputeGlycemicLoadWithHttpInfo(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'computeGlycemicLoadRequest' is set
            if (computeGlycemicLoadRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'computeGlycemicLoadRequest' when calling RecipesApi->ComputeGlycemicLoad");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.Data = computeGlycemicLoadRequest;

            localVarRequestOptions.Operation = "RecipesApi.ComputeGlycemicLoad";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ComputeGlycemicLoad200Response>("/food/ingredients/glycemicLoad", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComputeGlycemicLoad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Compute Glycemic Load Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComputeGlycemicLoad200Response</returns>
        public async System.Threading.Tasks.Task<ComputeGlycemicLoad200Response> ComputeGlycemicLoadAsync(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ComputeGlycemicLoad200Response> localVarResponse = await ComputeGlycemicLoadWithHttpInfoAsync(computeGlycemicLoadRequest, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compute Glycemic Load Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="computeGlycemicLoadRequest"></param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComputeGlycemicLoad200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ComputeGlycemicLoad200Response>> ComputeGlycemicLoadWithHttpInfoAsync(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, string? language = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'computeGlycemicLoadRequest' is set
            if (computeGlycemicLoadRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'computeGlycemicLoadRequest' when calling RecipesApi->ComputeGlycemicLoad");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.Data = computeGlycemicLoadRequest;

            localVarRequestOptions.Operation = "RecipesApi.ComputeGlycemicLoad";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ComputeGlycemicLoad200Response>("/food/ingredients/glycemicLoad", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComputeGlycemicLoad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvertAmounts200Response</returns>
        public ConvertAmounts200Response ConvertAmounts(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ConvertAmounts200Response> localVarResponse = ConvertAmountsWithHttpInfo(ingredientName, sourceAmount, sourceUnit, targetUnit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvertAmounts200Response</returns>
        public spoonacular.Client.ApiResponse<ConvertAmounts200Response> ConvertAmountsWithHttpInfo(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0)
        {
            // verify the required parameter 'ingredientName' is set
            if (ingredientName == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientName' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'sourceUnit' is set
            if (sourceUnit == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'sourceUnit' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'targetUnit' is set
            if (targetUnit == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'targetUnit' when calling RecipesApi->ConvertAmounts");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredientName", ingredientName));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceAmount", sourceAmount));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceUnit", sourceUnit));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "targetUnit", targetUnit));

            localVarRequestOptions.Operation = "RecipesApi.ConvertAmounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvertAmounts200Response>("/recipes/convert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertAmounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertAmounts200Response</returns>
        public async System.Threading.Tasks.Task<ConvertAmounts200Response> ConvertAmountsAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ConvertAmounts200Response> localVarResponse = await ConvertAmountsWithHttpInfoAsync(ingredientName, sourceAmount, sourceUnit, targetUnit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertAmounts200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ConvertAmounts200Response>> ConvertAmountsWithHttpInfoAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientName' is set
            if (ingredientName == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientName' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'sourceUnit' is set
            if (sourceUnit == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'sourceUnit' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'targetUnit' is set
            if (targetUnit == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'targetUnit' when calling RecipesApi->ConvertAmounts");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredientName", ingredientName));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceAmount", sourceAmount));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceUnit", sourceUnit));
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "targetUnit", targetUnit));

            localVarRequestOptions.Operation = "RecipesApi.ConvertAmounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvertAmounts200Response>("/recipes/convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertAmounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateRecipeCard200Response</returns>
        public CreateRecipeCard200Response CreateRecipeCard(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<CreateRecipeCard200Response> localVarResponse = CreateRecipeCardWithHttpInfo(title, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, image, imageUrl, author, backgroundColor, fontColor, source);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateRecipeCard200Response</returns>
        public spoonacular.Client.ApiResponse<CreateRecipeCard200Response> CreateRecipeCardWithHttpInfo(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'ingredients' is set
            if (ingredients == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredients' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'instructions' is set
            if (instructions == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'instructions' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'mask' is set
            if (mask == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'mask' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'backgroundImage' is set
            if (backgroundImage == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'backgroundImage' when calling RecipesApi->CreateRecipeCard");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("title", spoonacular.Client.ClientUtils.ParameterToString(title)); // form parameter
            localVarRequestOptions.FormParameters.Add("ingredients", spoonacular.Client.ClientUtils.ParameterToString(ingredients)); // form parameter
            localVarRequestOptions.FormParameters.Add("instructions", spoonacular.Client.ClientUtils.ParameterToString(instructions)); // form parameter
            localVarRequestOptions.FormParameters.Add("readyInMinutes", spoonacular.Client.ClientUtils.ParameterToString(readyInMinutes)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            localVarRequestOptions.FormParameters.Add("mask", spoonacular.Client.ClientUtils.ParameterToString(mask)); // form parameter
            localVarRequestOptions.FormParameters.Add("backgroundImage", spoonacular.Client.ClientUtils.ParameterToString(backgroundImage)); // form parameter
            if (image != null)
            {
                localVarRequestOptions.FileParameters.Add("image", image);
            }
            if (imageUrl != null)
            {
                localVarRequestOptions.FormParameters.Add("imageUrl", spoonacular.Client.ClientUtils.ParameterToString(imageUrl)); // form parameter
            }
            if (author != null)
            {
                localVarRequestOptions.FormParameters.Add("author", spoonacular.Client.ClientUtils.ParameterToString(author)); // form parameter
            }
            if (backgroundColor != null)
            {
                localVarRequestOptions.FormParameters.Add("backgroundColor", spoonacular.Client.ClientUtils.ParameterToString(backgroundColor)); // form parameter
            }
            if (fontColor != null)
            {
                localVarRequestOptions.FormParameters.Add("fontColor", spoonacular.Client.ClientUtils.ParameterToString(fontColor)); // form parameter
            }
            if (source != null)
            {
                localVarRequestOptions.FormParameters.Add("source", spoonacular.Client.ClientUtils.ParameterToString(source)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.CreateRecipeCard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateRecipeCard200Response>("/recipes/visualizeRecipe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateRecipeCard200Response</returns>
        public async System.Threading.Tasks.Task<CreateRecipeCard200Response> CreateRecipeCardAsync(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<CreateRecipeCard200Response> localVarResponse = await CreateRecipeCardWithHttpInfoAsync(title, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, image, imageUrl, author, backgroundColor, fontColor, source, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the recipe.</param>
        /// <param name="ingredients">The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).</param>
        /// <param name="instructions">The instructions to make the recipe. One step per line (separate lines with \\\\n).</param>
        /// <param name="readyInMinutes">The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">The number of servings the recipe makes.</param>
        /// <param name="mask">The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).</param>
        /// <param name="backgroundImage">The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).</param>
        /// <param name="image">The binary image of the recipe as jpg. (optional)</param>
        /// <param name="imageUrl">If you do not sent a binary image you can also pass the image URL. (optional)</param>
        /// <param name="author">The author of the recipe. (optional)</param>
        /// <param name="backgroundColor">The background color for the recipe card as a hex-string. (optional)</param>
        /// <param name="fontColor">The font color for the recipe card as a hex-string. (optional)</param>
        /// <param name="source">The source of the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateRecipeCard200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<CreateRecipeCard200Response>> CreateRecipeCardWithHttpInfoAsync(string title, string ingredients, string instructions, decimal readyInMinutes, decimal servings, string mask, string backgroundImage, System.IO.Stream? image = default(System.IO.Stream?), string? imageUrl = default(string?), string? author = default(string?), string? backgroundColor = default(string?), string? fontColor = default(string?), string? source = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'ingredients' is set
            if (ingredients == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredients' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'instructions' is set
            if (instructions == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'instructions' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'mask' is set
            if (mask == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'mask' when calling RecipesApi->CreateRecipeCard");
            }

            // verify the required parameter 'backgroundImage' is set
            if (backgroundImage == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'backgroundImage' when calling RecipesApi->CreateRecipeCard");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("title", spoonacular.Client.ClientUtils.ParameterToString(title)); // form parameter
            localVarRequestOptions.FormParameters.Add("ingredients", spoonacular.Client.ClientUtils.ParameterToString(ingredients)); // form parameter
            localVarRequestOptions.FormParameters.Add("instructions", spoonacular.Client.ClientUtils.ParameterToString(instructions)); // form parameter
            localVarRequestOptions.FormParameters.Add("readyInMinutes", spoonacular.Client.ClientUtils.ParameterToString(readyInMinutes)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            localVarRequestOptions.FormParameters.Add("mask", spoonacular.Client.ClientUtils.ParameterToString(mask)); // form parameter
            localVarRequestOptions.FormParameters.Add("backgroundImage", spoonacular.Client.ClientUtils.ParameterToString(backgroundImage)); // form parameter
            if (image != null)
            {
                localVarRequestOptions.FileParameters.Add("image", image);
            }
            if (imageUrl != null)
            {
                localVarRequestOptions.FormParameters.Add("imageUrl", spoonacular.Client.ClientUtils.ParameterToString(imageUrl)); // form parameter
            }
            if (author != null)
            {
                localVarRequestOptions.FormParameters.Add("author", spoonacular.Client.ClientUtils.ParameterToString(author)); // form parameter
            }
            if (backgroundColor != null)
            {
                localVarRequestOptions.FormParameters.Add("backgroundColor", spoonacular.Client.ClientUtils.ParameterToString(backgroundColor)); // form parameter
            }
            if (fontColor != null)
            {
                localVarRequestOptions.FormParameters.Add("fontColor", spoonacular.Client.ClientUtils.ParameterToString(fontColor)); // form parameter
            }
            if (source != null)
            {
                localVarRequestOptions.FormParameters.Add("source", spoonacular.Client.ClientUtils.ParameterToString(source)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.CreateRecipeCard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateRecipeCard200Response>("/recipes/visualizeRecipe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream EquipmentByIDImage(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = EquipmentByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> EquipmentByIDImageWithHttpInfo(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.EquipmentByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/recipes/{id}/equipmentWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EquipmentByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> EquipmentByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await EquipmentByIDImageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> EquipmentByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.EquipmentByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/recipes/{id}/equipmentWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EquipmentByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeInformation200Response</returns>
        public GetRecipeInformation200Response ExtractRecipeFromWebsite(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipeInformation200Response> localVarResponse = ExtractRecipeFromWebsiteWithHttpInfo(url, forceExtraction, analyze, includeNutrition, includeTaste);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeInformation200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipeInformation200Response> ExtractRecipeFromWebsiteWithHttpInfo(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'url' when calling RecipesApi->ExtractRecipeFromWebsite");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (forceExtraction != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "forceExtraction", forceExtraction));
            }
            if (analyze != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTaste != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeTaste", includeTaste));
            }

            localVarRequestOptions.Operation = "RecipesApi.ExtractRecipeFromWebsite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipeInformation200Response>("/recipes/extract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractRecipeFromWebsite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeInformation200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipeInformation200Response> ExtractRecipeFromWebsiteAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipeInformation200Response> localVarResponse = await ExtractRecipeFromWebsiteWithHttpInfoAsync(url, forceExtraction, analyze, includeNutrition, includeTaste, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeInformation200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipeInformation200Response>> ExtractRecipeFromWebsiteWithHttpInfoAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'url' when calling RecipesApi->ExtractRecipeFromWebsite");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (forceExtraction != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "forceExtraction", forceExtraction));
            }
            if (analyze != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTaste != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeTaste", includeTaste));
            }

            localVarRequestOptions.Operation = "RecipesApi.ExtractRecipeFromWebsite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipeInformation200Response>("/recipes/extract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractRecipeFromWebsite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAnalyzedRecipeInstructions200Response</returns>
        public GetAnalyzedRecipeInstructions200Response GetAnalyzedRecipeInstructions(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetAnalyzedRecipeInstructions200Response> localVarResponse = GetAnalyzedRecipeInstructionsWithHttpInfo(id, stepBreakdown);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAnalyzedRecipeInstructions200Response</returns>
        public spoonacular.Client.ApiResponse<GetAnalyzedRecipeInstructions200Response> GetAnalyzedRecipeInstructionsWithHttpInfo(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (stepBreakdown != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "stepBreakdown", stepBreakdown));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetAnalyzedRecipeInstructions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAnalyzedRecipeInstructions200Response>("/recipes/{id}/analyzedInstructions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyzedRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAnalyzedRecipeInstructions200Response</returns>
        public async System.Threading.Tasks.Task<GetAnalyzedRecipeInstructions200Response> GetAnalyzedRecipeInstructionsAsync(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetAnalyzedRecipeInstructions200Response> localVarResponse = await GetAnalyzedRecipeInstructionsWithHttpInfoAsync(id, stepBreakdown, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAnalyzedRecipeInstructions200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetAnalyzedRecipeInstructions200Response>> GetAnalyzedRecipeInstructionsWithHttpInfoAsync(int id, bool? stepBreakdown = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (stepBreakdown != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "stepBreakdown", stepBreakdown));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetAnalyzedRecipeInstructions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAnalyzedRecipeInstructions200Response>("/recipes/{id}/analyzedInstructions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyzedRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRandomRecipes200Response</returns>
        public GetRandomRecipes200Response GetRandomRecipes(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRandomRecipes200Response> localVarResponse = GetRandomRecipesWithHttpInfo(limitLicense, includeNutrition, includeTags, excludeTags, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRandomRecipes200Response</returns>
        public spoonacular.Client.ApiResponse<GetRandomRecipes200Response> GetRandomRecipesWithHttpInfo(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRandomRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRandomRecipes200Response>("/recipes/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRandomRecipes200Response</returns>
        public async System.Threading.Tasks.Task<GetRandomRecipes200Response> GetRandomRecipesAsync(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRandomRecipes200Response> localVarResponse = await GetRandomRecipesWithHttpInfoAsync(limitLicense, includeNutrition, includeTags, excludeTags, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTags">A comma-separated list of tags that the random recipe(s) must adhere to. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags that the random recipe(s) must not adhere to. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRandomRecipes200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRandomRecipes200Response>> GetRandomRecipesWithHttpInfoAsync(bool? limitLicense = default(bool?), bool? includeNutrition = default(bool?), string? includeTags = default(string?), string? excludeTags = default(string?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRandomRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRandomRecipes200Response>("/recipes/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeEquipmentByID200Response</returns>
        public GetRecipeEquipmentByID200Response GetRecipeEquipmentByID(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipeEquipmentByID200Response> localVarResponse = GetRecipeEquipmentByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeEquipmentByID200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipeEquipmentByID200Response> GetRecipeEquipmentByIDWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeEquipmentByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipeEquipmentByID200Response>("/recipes/{id}/equipmentWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeEquipmentByID200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipeEquipmentByID200Response> GetRecipeEquipmentByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipeEquipmentByID200Response> localVarResponse = await GetRecipeEquipmentByIDWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeEquipmentByID200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipeEquipmentByID200Response>> GetRecipeEquipmentByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeEquipmentByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipeEquipmentByID200Response>("/recipes/{id}/equipmentWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeInformation200Response</returns>
        public GetRecipeInformation200Response GetRecipeInformation(int id, bool? includeNutrition = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipeInformation200Response> localVarResponse = GetRecipeInformationWithHttpInfo(id, includeNutrition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeInformation200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipeInformation200Response> GetRecipeInformationWithHttpInfo(int id, bool? includeNutrition = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipeInformation200Response>("/recipes/{id}/information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeInformation200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipeInformation200Response> GetRecipeInformationAsync(int id, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipeInformation200Response> localVarResponse = await GetRecipeInformationWithHttpInfoAsync(id, includeNutrition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeInformation200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipeInformation200Response>> GetRecipeInformationWithHttpInfoAsync(int id, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipeInformation200Response>("/recipes/{id}/information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetRecipeInformationBulk200ResponseInner&gt;</returns>
        public List<GetRecipeInformationBulk200ResponseInner> GetRecipeInformationBulk(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<GetRecipeInformationBulk200ResponseInner>> localVarResponse = GetRecipeInformationBulkWithHttpInfo(ids, includeNutrition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetRecipeInformationBulk200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<GetRecipeInformationBulk200ResponseInner>> GetRecipeInformationBulkWithHttpInfo(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ids' when calling RecipesApi->GetRecipeInformationBulk");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeInformationBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetRecipeInformationBulk200ResponseInner>>("/recipes/informationBulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformationBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetRecipeInformationBulk200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetRecipeInformationBulk200ResponseInner>> GetRecipeInformationBulkAsync(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<GetRecipeInformationBulk200ResponseInner>> localVarResponse = await GetRecipeInformationBulkWithHttpInfoAsync(ids, includeNutrition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetRecipeInformationBulk200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<GetRecipeInformationBulk200ResponseInner>>> GetRecipeInformationBulkWithHttpInfoAsync(string ids, bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ids' when calling RecipesApi->GetRecipeInformationBulk");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeInformationBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetRecipeInformationBulk200ResponseInner>>("/recipes/informationBulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformationBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeIngredientsByID200Response</returns>
        public GetRecipeIngredientsByID200Response GetRecipeIngredientsByID(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipeIngredientsByID200Response> localVarResponse = GetRecipeIngredientsByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeIngredientsByID200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipeIngredientsByID200Response> GetRecipeIngredientsByIDWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeIngredientsByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipeIngredientsByID200Response>("/recipes/{id}/ingredientWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeIngredientsByID200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipeIngredientsByID200Response> GetRecipeIngredientsByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipeIngredientsByID200Response> localVarResponse = await GetRecipeIngredientsByIDWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeIngredientsByID200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipeIngredientsByID200Response>> GetRecipeIngredientsByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeIngredientsByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipeIngredientsByID200Response>("/recipes/{id}/ingredientWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeNutritionWidgetByID200Response</returns>
        public GetRecipeNutritionWidgetByID200Response GetRecipeNutritionWidgetByID(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipeNutritionWidgetByID200Response> localVarResponse = GetRecipeNutritionWidgetByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeNutritionWidgetByID200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipeNutritionWidgetByID200Response> GetRecipeNutritionWidgetByIDWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeNutritionWidgetByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipeNutritionWidgetByID200Response>("/recipes/{id}/nutritionWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeNutritionWidgetByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeNutritionWidgetByID200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipeNutritionWidgetByID200Response> GetRecipeNutritionWidgetByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipeNutritionWidgetByID200Response> localVarResponse = await GetRecipeNutritionWidgetByIDWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeNutritionWidgetByID200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipeNutritionWidgetByID200Response>> GetRecipeNutritionWidgetByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeNutritionWidgetByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipeNutritionWidgetByID200Response>("/recipes/{id}/nutritionWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeNutritionWidgetByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipePriceBreakdownByID200Response</returns>
        public GetRecipePriceBreakdownByID200Response GetRecipePriceBreakdownByID(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipePriceBreakdownByID200Response> localVarResponse = GetRecipePriceBreakdownByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipePriceBreakdownByID200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipePriceBreakdownByID200Response> GetRecipePriceBreakdownByIDWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipePriceBreakdownByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipePriceBreakdownByID200Response>("/recipes/{id}/priceBreakdownWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipePriceBreakdownByID200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipePriceBreakdownByID200Response> GetRecipePriceBreakdownByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipePriceBreakdownByID200Response> localVarResponse = await GetRecipePriceBreakdownByIDWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipePriceBreakdownByID200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipePriceBreakdownByID200Response>> GetRecipePriceBreakdownByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.GetRecipePriceBreakdownByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipePriceBreakdownByID200Response>("/recipes/{id}/priceBreakdownWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecipeTasteByID200Response</returns>
        public GetRecipeTasteByID200Response GetRecipeTasteByID(int id, bool? normalize = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetRecipeTasteByID200Response> localVarResponse = GetRecipeTasteByIDWithHttpInfo(id, normalize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecipeTasteByID200Response</returns>
        public spoonacular.Client.ApiResponse<GetRecipeTasteByID200Response> GetRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeTasteByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecipeTasteByID200Response>("/recipes/{id}/tasteWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecipeTasteByID200Response</returns>
        public async System.Threading.Tasks.Task<GetRecipeTasteByID200Response> GetRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetRecipeTasteByID200Response> localVarResponse = await GetRecipeTasteByIDWithHttpInfoAsync(id, normalize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecipeTasteByID200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetRecipeTasteByID200Response>> GetRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetRecipeTasteByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecipeTasteByID200Response>("/recipes/{id}/tasteWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetSimilarRecipes200ResponseInner&gt;</returns>
        public List<GetSimilarRecipes200ResponseInner> GetSimilarRecipes(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<GetSimilarRecipes200ResponseInner>> localVarResponse = GetSimilarRecipesWithHttpInfo(id, number, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetSimilarRecipes200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<GetSimilarRecipes200ResponseInner>> GetSimilarRecipesWithHttpInfo(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetSimilarRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetSimilarRecipes200ResponseInner>>("/recipes/{id}/similar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimilarRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetSimilarRecipes200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetSimilarRecipes200ResponseInner>> GetSimilarRecipesAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<GetSimilarRecipes200ResponseInner>> localVarResponse = await GetSimilarRecipesWithHttpInfoAsync(id, number, limitLicense, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetSimilarRecipes200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<GetSimilarRecipes200ResponseInner>>> GetSimilarRecipesWithHttpInfoAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            localVarRequestOptions.Operation = "RecipesApi.GetSimilarRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetSimilarRecipes200ResponseInner>>("/recipes/{id}/similar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimilarRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GuessNutritionByDishName200Response</returns>
        public GuessNutritionByDishName200Response GuessNutritionByDishName(string title, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GuessNutritionByDishName200Response> localVarResponse = GuessNutritionByDishNameWithHttpInfo(title);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GuessNutritionByDishName200Response</returns>
        public spoonacular.Client.ApiResponse<GuessNutritionByDishName200Response> GuessNutritionByDishNameWithHttpInfo(string title, int operationIndex = 0)
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->GuessNutritionByDishName");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "title", title));

            localVarRequestOptions.Operation = "RecipesApi.GuessNutritionByDishName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GuessNutritionByDishName200Response>("/recipes/guessNutrition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GuessNutritionByDishName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GuessNutritionByDishName200Response</returns>
        public async System.Threading.Tasks.Task<GuessNutritionByDishName200Response> GuessNutritionByDishNameAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GuessNutritionByDishName200Response> localVarResponse = await GuessNutritionByDishNameWithHttpInfoAsync(title, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GuessNutritionByDishName200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GuessNutritionByDishName200Response>> GuessNutritionByDishNameWithHttpInfoAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->GuessNutritionByDishName");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "title", title));

            localVarRequestOptions.Operation = "RecipesApi.GuessNutritionByDishName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GuessNutritionByDishName200Response>("/recipes/guessNutrition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GuessNutritionByDishName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ParseIngredients200ResponseInner&gt;</returns>
        public List<ParseIngredients200ResponseInner> ParseIngredients(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<ParseIngredients200ResponseInner>> localVarResponse = ParseIngredientsWithHttpInfo(ingredientList, servings, language, includeNutrition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ParseIngredients200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<ParseIngredients200ResponseInner>> ParseIngredientsWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->ParseIngredients");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.FormParameters.Add("includeNutrition", spoonacular.Client.ClientUtils.ParameterToString(includeNutrition)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.ParseIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ParseIngredients200ResponseInner>>("/recipes/parseIngredients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ParseIngredients200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ParseIngredients200ResponseInner>> ParseIngredientsAsync(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<ParseIngredients200ResponseInner>> localVarResponse = await ParseIngredientsWithHttpInfoAsync(ingredientList, servings, language, includeNutrition, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings that you can make from the ingredients.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="includeNutrition"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ParseIngredients200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<ParseIngredients200ResponseInner>>> ParseIngredientsWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), bool? includeNutrition = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->ParseIngredients");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.FormParameters.Add("includeNutrition", spoonacular.Client.ClientUtils.ParameterToString(includeNutrition)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.ParseIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ParseIngredients200ResponseInner>>("/recipes/parseIngredients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PriceBreakdownByIDImage(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = PriceBreakdownByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> PriceBreakdownByIDImageWithHttpInfo(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.PriceBreakdownByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/recipes/{id}/priceBreakdownWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceBreakdownByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PriceBreakdownByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await PriceBreakdownByIDImageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> PriceBreakdownByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.PriceBreakdownByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/recipes/{id}/priceBreakdownWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceBreakdownByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quick Answer Answer a nutrition related natural language question.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuickAnswer200Response</returns>
        public QuickAnswer200Response QuickAnswer(string q, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<QuickAnswer200Response> localVarResponse = QuickAnswerWithHttpInfo(q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quick Answer Answer a nutrition related natural language question.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuickAnswer200Response</returns>
        public spoonacular.Client.ApiResponse<QuickAnswer200Response> QuickAnswerWithHttpInfo(string q, int operationIndex = 0)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'q' when calling RecipesApi->QuickAnswer");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "q", q));

            localVarRequestOptions.Operation = "RecipesApi.QuickAnswer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QuickAnswer200Response>("/recipes/quickAnswer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuickAnswer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Quick Answer Answer a nutrition related natural language question.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuickAnswer200Response</returns>
        public async System.Threading.Tasks.Task<QuickAnswer200Response> QuickAnswerAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<QuickAnswer200Response> localVarResponse = await QuickAnswerWithHttpInfoAsync(q, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Quick Answer Answer a nutrition related natural language question.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The nutrition related question.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuickAnswer200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<QuickAnswer200Response>> QuickAnswerWithHttpInfoAsync(string q, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'q' when calling RecipesApi->QuickAnswer");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "q", q));

            localVarRequestOptions.Operation = "RecipesApi.QuickAnswer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuickAnswer200Response>("/recipes/quickAnswer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QuickAnswer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RecipeNutritionByIDImage(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = RecipeNutritionByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> RecipeNutritionByIDImageWithHttpInfo(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.RecipeNutritionByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/recipes/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RecipeNutritionByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await RecipeNutritionByIDImageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> RecipeNutritionByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.RecipeNutritionByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/recipes/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RecipeNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = RecipeNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> RecipeNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "RecipesApi.RecipeNutritionLabelImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/recipes/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RecipeNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await RecipeNutritionLabelImageWithHttpInfoAsync(id, showOptionalNutrients, showZeroValues, showIngredients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> RecipeNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "RecipesApi.RecipeNutritionLabelImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/recipes/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string RecipeNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = RecipeNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> RecipeNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "RecipesApi.RecipeNutritionLabelWidget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/nutritionLabel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RecipeNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await RecipeNutritionLabelWidgetWithHttpInfoAsync(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> RecipeNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "RecipesApi.RecipeNutritionLabelWidget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/nutritionLabel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RecipeTasteByIDImage(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = RecipeTasteByIDImageWithHttpInfo(id, normalize, rgb);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public spoonacular.Client.ApiResponse<System.IO.Stream> RecipeTasteByIDImageWithHttpInfo(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            localVarRequestOptions.Operation = "RecipesApi.RecipeTasteByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/recipes/{id}/tasteWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeTasteByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RecipeTasteByIDImageAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<System.IO.Stream> localVarResponse = await RecipeTasteByIDImageWithHttpInfoAsync(id, normalize, rgb, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<System.IO.Stream>> RecipeTasteByIDImageWithHttpInfoAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            localVarRequestOptions.Operation = "RecipesApi.RecipeTasteByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/recipes/{id}/tasteWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeTasteByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRecipes200Response</returns>
        public SearchRecipes200Response SearchRecipes(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchRecipes200Response> localVarResponse = SearchRecipesWithHttpInfo(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, minServings, maxServings, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRecipes200Response</returns>
        public spoonacular.Client.ApiResponse<SearchRecipes200Response> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (excludeCuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeCuisine", excludeCuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (instructionsRequired != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "instructionsRequired", instructionsRequired));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fillIngredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeInformation", addRecipeInformation));
            }
            if (addRecipeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeNutrition", addRecipeNutrition));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (recipeBoxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "recipeBoxId", recipeBoxId));
            }
            if (titleMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "titleMatch", titleMatch));
            }
            if (maxReadyTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxReadyTime", maxReadyTime));
            }
            if (minServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minServings", minServings));
            }
            if (maxServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxServings", maxServings));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            localVarRequestOptions.Operation = "RecipesApi.SearchRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchRecipes200Response>("/recipes/complexSearch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRecipes200Response</returns>
        public async System.Threading.Tasks.Task<SearchRecipes200Response> SearchRecipesAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchRecipes200Response> localVarResponse = await SearchRecipesWithHttpInfoAsync(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, minServings, maxServings, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRecipes200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchRecipes200Response>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), decimal? minServings = default(decimal?), decimal? maxServings = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (excludeCuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeCuisine", excludeCuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (instructionsRequired != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "instructionsRequired", instructionsRequired));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fillIngredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeInformation", addRecipeInformation));
            }
            if (addRecipeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeNutrition", addRecipeNutrition));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (recipeBoxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "recipeBoxId", recipeBoxId));
            }
            if (titleMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "titleMatch", titleMatch));
            }
            if (maxReadyTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxReadyTime", maxReadyTime));
            }
            if (minServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minServings", minServings));
            }
            if (maxServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxServings", maxServings));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            localVarRequestOptions.Operation = "RecipesApi.SearchRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchRecipes200Response>("/recipes/complexSearch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SearchRecipesByIngredients200ResponseInner&gt;</returns>
        public List<SearchRecipesByIngredients200ResponseInner> SearchRecipesByIngredients(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<SearchRecipesByIngredients200ResponseInner>> localVarResponse = SearchRecipesByIngredientsWithHttpInfo(ingredients, number, limitLicense, ranking, ignorePantry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SearchRecipesByIngredients200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<SearchRecipesByIngredients200ResponseInner>> SearchRecipesByIngredientsWithHttpInfo(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (ranking != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ranking", ranking));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }

            localVarRequestOptions.Operation = "RecipesApi.SearchRecipesByIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SearchRecipesByIngredients200ResponseInner>>("/recipes/findByIngredients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SearchRecipesByIngredients200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<SearchRecipesByIngredients200ResponseInner>> SearchRecipesByIngredientsAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<SearchRecipesByIngredients200ResponseInner>> localVarResponse = await SearchRecipesByIngredientsWithHttpInfoAsync(ingredients, number, limitLicense, ranking, ignorePantry, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SearchRecipesByIngredients200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<SearchRecipesByIngredients200ResponseInner>>> SearchRecipesByIngredientsWithHttpInfoAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (ranking != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ranking", ranking));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }

            localVarRequestOptions.Operation = "RecipesApi.SearchRecipesByIngredients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SearchRecipesByIngredients200ResponseInner>>("/recipes/findByIngredients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SearchRecipesByNutrients200ResponseInner&gt;</returns>
        public List<SearchRecipesByNutrients200ResponseInner> SearchRecipesByNutrients(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<List<SearchRecipesByNutrients200ResponseInner>> localVarResponse = SearchRecipesByNutrientsWithHttpInfo(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SearchRecipesByNutrients200ResponseInner&gt;</returns>
        public spoonacular.Client.ApiResponse<List<SearchRecipesByNutrients200ResponseInner>> SearchRecipesByNutrientsWithHttpInfo(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            localVarRequestOptions.Operation = "RecipesApi.SearchRecipesByNutrients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SearchRecipesByNutrients200ResponseInner>>("/recipes/findByNutrients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByNutrients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SearchRecipesByNutrients200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<SearchRecipesByNutrients200ResponseInner>> SearchRecipesByNutrientsAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<List<SearchRecipesByNutrients200ResponseInner>> localVarResponse = await SearchRecipesByNutrientsWithHttpInfoAsync(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SearchRecipesByNutrients200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<List<SearchRecipesByNutrients200ResponseInner>>> SearchRecipesByNutrientsWithHttpInfoAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            localVarRequestOptions.Operation = "RecipesApi.SearchRecipesByNutrients";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SearchRecipesByNutrients200ResponseInner>>("/recipes/findByNutrients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByNutrients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SummarizeRecipe200Response</returns>
        public SummarizeRecipe200Response SummarizeRecipe(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SummarizeRecipe200Response> localVarResponse = SummarizeRecipeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SummarizeRecipe200Response</returns>
        public spoonacular.Client.ApiResponse<SummarizeRecipe200Response> SummarizeRecipeWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.SummarizeRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SummarizeRecipe200Response>("/recipes/{id}/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizeRecipe200Response</returns>
        public async System.Threading.Tasks.Task<SummarizeRecipe200Response> SummarizeRecipeAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SummarizeRecipe200Response> localVarResponse = await SummarizeRecipeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizeRecipe200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SummarizeRecipe200Response>> SummarizeRecipeWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RecipesApi.SummarizeRecipe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SummarizeRecipe200Response>("/recipes/{id}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeEquipment(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeEquipmentWithHttpInfo(instructions, view, defaultCss, showBacklink);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeEquipmentWithHttpInfo(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'instructions' is set
            if (instructions == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'instructions' when calling RecipesApi->VisualizeEquipment");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("instructions", spoonacular.Client.ClientUtils.ParameterToString(instructions)); // form parameter
            if (view != null)
            {
                localVarRequestOptions.FormParameters.Add("view", spoonacular.Client.ClientUtils.ParameterToString(view)); // form parameter
            }
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeEquipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeEquipment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeEquipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeEquipmentAsync(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeEquipmentWithHttpInfoAsync(instructions, view, defaultCss, showBacklink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instructions">The recipe&#39;s instructions.</param>
        /// <param name="view">How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeEquipmentWithHttpInfoAsync(string instructions, string? view = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instructions' is set
            if (instructions == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'instructions' when calling RecipesApi->VisualizeEquipment");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("instructions", spoonacular.Client.ClientUtils.ParameterToString(instructions)); // form parameter
            if (view != null)
            {
                localVarRequestOptions.FormParameters.Add("view", spoonacular.Client.ClientUtils.ParameterToString(view)); // form parameter
            }
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeEquipment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeEquipment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeEquipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizePriceBreakdown(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizePriceBreakdownWithHttpInfo(ingredientList, servings, language, mode, defaultCss, showBacklink);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizePriceBreakdownWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->VisualizePriceBreakdown");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (mode != null)
            {
                localVarRequestOptions.FormParameters.Add("mode", spoonacular.Client.ClientUtils.ParameterToString(mode)); // form parameter
            }
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizePriceBreakdown";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizePriceEstimator", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizePriceBreakdown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizePriceBreakdownAsync(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizePriceBreakdownWithHttpInfoAsync(ingredientList, servings, language, mode, defaultCss, showBacklink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="mode">The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizePriceBreakdownWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), decimal? mode = default(decimal?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->VisualizePriceBreakdown");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (mode != null)
            {
                localVarRequestOptions.FormParameters.Add("mode", spoonacular.Client.ClientUtils.ParameterToString(mode)); // form parameter
            }
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizePriceBreakdown";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizePriceEstimator", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizePriceBreakdown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipeEquipmentByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeEquipmentByIDWithHttpInfo(id, defaultCss);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipeEquipmentByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeEquipmentByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/equipmentWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeEquipmentByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeEquipmentByIDWithHttpInfoAsync(id, defaultCss, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipeEquipmentByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeEquipmentByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/equipmentWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipeIngredientsByID(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeIngredientsByIDWithHttpInfo(id, defaultCss, measure);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipeIngredientsByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeIngredientsByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/ingredientWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeIngredientsByIDAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeIngredientsByIDWithHttpInfoAsync(id, defaultCss, measure, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipeIngredientsByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeIngredientsByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/ingredientWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipeNutrition(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeNutritionWithHttpInfo(ingredientList, servings, language, defaultCss, showBacklink);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipeNutritionWithHttpInfo(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->VisualizeRecipeNutrition");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeNutrition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeNutrition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutrition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeNutritionAsync(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeNutritionWithHttpInfoAsync(ingredientList, servings, language, defaultCss, showBacklink, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">The number of servings.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional)</param>
        /// <param name="showBacklink">Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipeNutritionWithHttpInfoAsync(string ingredientList, decimal servings, string? language = default(string?), bool? defaultCss = default(bool?), bool? showBacklink = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->VisualizeRecipeNutrition");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            localVarRequestOptions.FormParameters.Add("servings", spoonacular.Client.ClientUtils.ParameterToString(servings)); // form parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.FormParameters.Add("defaultCss", spoonacular.Client.ClientUtils.ParameterToString(defaultCss)); // form parameter
            }
            if (showBacklink != null)
            {
                localVarRequestOptions.FormParameters.Add("showBacklink", spoonacular.Client.ClientUtils.ParameterToString(showBacklink)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeNutrition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeNutrition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutrition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipeNutritionByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeNutritionByIDWithHttpInfo(id, defaultCss);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipeNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeNutritionByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/nutritionWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeNutritionByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeNutritionByIDWithHttpInfoAsync(id, defaultCss, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipeNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeNutritionByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/nutritionWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipePriceBreakdownByID(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipePriceBreakdownByIDWithHttpInfo(id, defaultCss);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipePriceBreakdownByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipePriceBreakdownByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/priceBreakdownWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipePriceBreakdownByIDAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipePriceBreakdownByIDWithHttpInfoAsync(id, defaultCss, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipePriceBreakdownByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipePriceBreakdownByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/priceBreakdownWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipeTaste(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeTasteWithHttpInfo(ingredientList, language, normalize, rgb);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipeTasteWithHttpInfo(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->VisualizeRecipeTaste");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            if (normalize != null)
            {
                localVarRequestOptions.FormParameters.Add("normalize", spoonacular.Client.ClientUtils.ParameterToString(normalize)); // form parameter
            }
            if (rgb != null)
            {
                localVarRequestOptions.FormParameters.Add("rgb", spoonacular.Client.ClientUtils.ParameterToString(rgb)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeTaste";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeTaste", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTaste", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeTasteAsync(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeTasteWithHttpInfoAsync(ingredientList, language, normalize, rgb, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientList">The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipeTasteWithHttpInfoAsync(string ingredientList, string? language = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientList' is set
            if (ingredientList == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientList' when calling RecipesApi->VisualizeRecipeTaste");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.FormParameters.Add("ingredientList", spoonacular.Client.ClientUtils.ParameterToString(ingredientList)); // form parameter
            if (normalize != null)
            {
                localVarRequestOptions.FormParameters.Add("normalize", spoonacular.Client.ClientUtils.ParameterToString(normalize)); // form parameter
            }
            if (rgb != null)
            {
                localVarRequestOptions.FormParameters.Add("rgb", spoonacular.Client.ClientUtils.ParameterToString(rgb)); // form parameter
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeTaste";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeTaste", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTaste", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeRecipeTasteByID(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeTasteByIDWithHttpInfo(id, normalize, rgb);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeTasteByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/tasteWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeTasteByIDWithHttpInfoAsync(id, normalize, rgb, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            localVarRequestOptions.Operation = "RecipesApi.VisualizeRecipeTasteByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/tasteWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
