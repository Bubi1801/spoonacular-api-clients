/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuItemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Autocomplete Menu Item Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AutocompleteMenuItemSearch200Response</returns>
        AutocompleteMenuItemSearch200Response AutocompleteMenuItemSearch(string query, decimal? number = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Autocomplete Menu Item Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AutocompleteMenuItemSearch200Response</returns>
        ApiResponse<AutocompleteMenuItemSearch200Response> AutocompleteMenuItemSearchWithHttpInfo(string query, decimal? number = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Get Menu Item Information
        /// </summary>
        /// <remarks>
        /// Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMenuItemInformation200Response</returns>
        GetMenuItemInformation200Response GetMenuItemInformation(int id, int operationIndex = 0);

        /// <summary>
        /// Get Menu Item Information
        /// </summary>
        /// <remarks>
        /// Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMenuItemInformation200Response</returns>
        ApiResponse<GetMenuItemInformation200Response> GetMenuItemInformationWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Menu Item Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MenuItemNutritionByIDImage(decimal id, int operationIndex = 0);

        /// <summary>
        /// Menu Item Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MenuItemNutritionByIDImageWithHttpInfo(decimal id, int operationIndex = 0);
        /// <summary>
        /// Menu Item Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MenuItemNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Menu Item Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MenuItemNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Menu Item Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string MenuItemNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Menu Item Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> MenuItemNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search Menu Items
        /// </summary>
        /// <remarks>
        /// Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchMenuItems200Response</returns>
        SearchMenuItems200Response SearchMenuItems(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Menu Items
        /// </summary>
        /// <remarks>
        /// Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchMenuItems200Response</returns>
        ApiResponse<SearchMenuItems200Response> SearchMenuItemsWithHttpInfo(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Menu Item Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string VisualizeMenuItemNutritionByID(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// Menu Item Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeMenuItemNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuItemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Autocomplete Menu Item Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutocompleteMenuItemSearch200Response</returns>
        System.Threading.Tasks.Task<AutocompleteMenuItemSearch200Response> AutocompleteMenuItemSearchAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Autocomplete Menu Item Search
        /// </summary>
        /// <remarks>
        /// Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutocompleteMenuItemSearch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutocompleteMenuItemSearch200Response>> AutocompleteMenuItemSearchWithHttpInfoAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Menu Item Information
        /// </summary>
        /// <remarks>
        /// Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMenuItemInformation200Response</returns>
        System.Threading.Tasks.Task<GetMenuItemInformation200Response> GetMenuItemInformationAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Menu Item Information
        /// </summary>
        /// <remarks>
        /// Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMenuItemInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMenuItemInformation200Response>> GetMenuItemInformationWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Menu Item Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MenuItemNutritionByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Menu Item Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MenuItemNutritionByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Menu Item Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MenuItemNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Menu Item Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as an image.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MenuItemNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Menu Item Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> MenuItemNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Menu Item Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> MenuItemNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Menu Items
        /// </summary>
        /// <remarks>
        /// Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchMenuItems200Response</returns>
        System.Threading.Tasks.Task<SearchMenuItems200Response> SearchMenuItemsAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Menu Items
        /// </summary>
        /// <remarks>
        /// Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchMenuItems200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchMenuItems200Response>> SearchMenuItemsWithHttpInfoAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Menu Item Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeMenuItemNutritionByIDAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Menu Item Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeMenuItemNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuItemsApi : IMenuItemsApiSync, IMenuItemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuItemsApi : IMenuItemsApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuItemsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuItemsApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuItemsApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MenuItemsApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Autocomplete Menu Item Search Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AutocompleteMenuItemSearch200Response</returns>
        public AutocompleteMenuItemSearch200Response AutocompleteMenuItemSearch(string query, decimal? number = default(decimal?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<AutocompleteMenuItemSearch200Response> localVarResponse = AutocompleteMenuItemSearchWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Menu Item Search Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AutocompleteMenuItemSearch200Response</returns>
        public spoonacular.Client.ApiResponse<AutocompleteMenuItemSearch200Response> AutocompleteMenuItemSearchWithHttpInfo(string query, decimal? number = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MenuItemsApi->AutocompleteMenuItemSearch");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.AutocompleteMenuItemSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AutocompleteMenuItemSearch200Response>("/food/menuItems/suggest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteMenuItemSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Menu Item Search Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AutocompleteMenuItemSearch200Response</returns>
        public async System.Threading.Tasks.Task<AutocompleteMenuItemSearch200Response> AutocompleteMenuItemSearchAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<AutocompleteMenuItemSearch200Response> localVarResponse = await AutocompleteMenuItemSearchWithHttpInfoAsync(query, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Menu Item Search Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (partial) search query.</param>
        /// <param name="number">The number of results to return (between 1 and 25). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AutocompleteMenuItemSearch200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<AutocompleteMenuItemSearch200Response>> AutocompleteMenuItemSearchWithHttpInfoAsync(string query, decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'query' when calling MenuItemsApi->AutocompleteMenuItemSearch");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.AutocompleteMenuItemSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AutocompleteMenuItemSearch200Response>("/food/menuItems/suggest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteMenuItemSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Menu Item Information Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMenuItemInformation200Response</returns>
        public GetMenuItemInformation200Response GetMenuItemInformation(int id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetMenuItemInformation200Response> localVarResponse = GetMenuItemInformationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Menu Item Information Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMenuItemInformation200Response</returns>
        public spoonacular.Client.ApiResponse<GetMenuItemInformation200Response> GetMenuItemInformationWithHttpInfo(int id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MenuItemsApi.GetMenuItemInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMenuItemInformation200Response>("/food/menuItems/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMenuItemInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Menu Item Information Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMenuItemInformation200Response</returns>
        public async System.Threading.Tasks.Task<GetMenuItemInformation200Response> GetMenuItemInformationAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetMenuItemInformation200Response> localVarResponse = await GetMenuItemInformationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Menu Item Information Use a menu item id to get all available information about a menu item, such as nutrition.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMenuItemInformation200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetMenuItemInformation200Response>> GetMenuItemInformationWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MenuItemsApi.GetMenuItemInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMenuItemInformation200Response>("/food/menuItems/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMenuItemInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Image Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MenuItemNutritionByIDImage(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = MenuItemNutritionByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Image Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> MenuItemNutritionByIDImageWithHttpInfo(decimal id, int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MenuItemsApi.MenuItemNutritionByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/food/menuItems/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MenuItemNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Image Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MenuItemNutritionByIDImageAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await MenuItemNutritionByIDImageWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Image Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> MenuItemNutritionByIDImageWithHttpInfoAsync(decimal id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MenuItemsApi.MenuItemNutritionByIDImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/food/menuItems/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MenuItemNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition Label Image Visualize a menu item&#39;s nutritional label information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MenuItemNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = MenuItemNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition Label Image Visualize a menu item&#39;s nutritional label information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> MenuItemNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.MenuItemNutritionLabelImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/food/menuItems/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MenuItemNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition Label Image Visualize a menu item&#39;s nutritional label information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MenuItemNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await MenuItemNutritionLabelImageWithHttpInfoAsync(id, showOptionalNutrients, showZeroValues, showIngredients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition Label Image Visualize a menu item&#39;s nutritional label information as an image.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> MenuItemNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.MenuItemNutritionLabelImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/food/menuItems/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MenuItemNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition Label Widget Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string MenuItemNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = MenuItemNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition Label Widget Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> MenuItemNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.MenuItemNutritionLabelWidget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/food/menuItems/{id}/nutritionLabel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MenuItemNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition Label Widget Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> MenuItemNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await MenuItemNutritionLabelWidgetWithHttpInfoAsync(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition Label Widget Visualize a menu item&#39;s nutritional label information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The menu item id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> MenuItemNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.MenuItemNutritionLabelWidget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/food/menuItems/{id}/nutritionLabel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MenuItemNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Menu Items Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchMenuItems200Response</returns>
        public SearchMenuItems200Response SearchMenuItems(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<SearchMenuItems200Response> localVarResponse = SearchMenuItemsWithHttpInfo(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addMenuItemInformation, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Menu Items Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchMenuItems200Response</returns>
        public spoonacular.Client.ApiResponse<SearchMenuItems200Response> SearchMenuItemsWithHttpInfo(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (addMenuItemInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addMenuItemInformation", addMenuItemInformation));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.SearchMenuItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchMenuItems200Response>("/food/menuItems/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMenuItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Menu Items Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchMenuItems200Response</returns>
        public async System.Threading.Tasks.Task<SearchMenuItems200Response> SearchMenuItemsAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<SearchMenuItems200Response> localVarResponse = await SearchMenuItemsWithHttpInfoAsync(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addMenuItemInformation, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Menu Items Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the menu item must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the menu item can have. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the menu item must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the menu item can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the menu item must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the menu item can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the menu item must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the menu item can have. (optional)</param>
        /// <param name="addMenuItemInformation">If set to true, you get more information about the menu items returned. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchMenuItems200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<SearchMenuItems200Response>> SearchMenuItemsWithHttpInfoAsync(string? query = default(string?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), bool? addMenuItemInformation = default(bool?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (addMenuItemInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addMenuItemInformation", addMenuItemInformation));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "MenuItemsApi.SearchMenuItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchMenuItems200Response>("/food/menuItems/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMenuItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Widget Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string VisualizeMenuItemNutritionByID(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeMenuItemNutritionByIDWithHttpInfo(id, defaultCss, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Widget Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public spoonacular.Client.ApiResponse<string> VisualizeMenuItemNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "MenuItemsApi.VisualizeMenuItemNutritionByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/food/menuItems/{id}/nutritionWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeMenuItemNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Widget Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeMenuItemNutritionByIDAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeMenuItemNutritionByIDWithHttpInfoAsync(id, defaultCss, accept, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Menu Item Nutrition by ID Widget Visualize a menu item&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<string>> VisualizeMenuItemNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "MenuItemsApi.VisualizeMenuItemNutritionByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/food/menuItems/{id}/nutritionWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeMenuItemNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
