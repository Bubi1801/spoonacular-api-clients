/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWineApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Dish Pairing for Wine
        /// </summary>
        /// <remarks>
        /// Find a dish that goes well with a given wine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDishPairingForWine200Response</returns>
        GetDishPairingForWine200Response GetDishPairingForWine(string wine, int operationIndex = 0);

        /// <summary>
        /// Dish Pairing for Wine
        /// </summary>
        /// <remarks>
        /// Find a dish that goes well with a given wine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDishPairingForWine200Response</returns>
        ApiResponse<GetDishPairingForWine200Response> GetDishPairingForWineWithHttpInfo(string wine, int operationIndex = 0);
        /// <summary>
        /// Wine Description
        /// </summary>
        /// <remarks>
        /// Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWineDescription200Response</returns>
        GetWineDescription200Response GetWineDescription(string wine, int operationIndex = 0);

        /// <summary>
        /// Wine Description
        /// </summary>
        /// <remarks>
        /// Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWineDescription200Response</returns>
        ApiResponse<GetWineDescription200Response> GetWineDescriptionWithHttpInfo(string wine, int operationIndex = 0);
        /// <summary>
        /// Wine Pairing
        /// </summary>
        /// <remarks>
        /// Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWinePairing200Response</returns>
        GetWinePairing200Response GetWinePairing(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Wine Pairing
        /// </summary>
        /// <remarks>
        /// Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWinePairing200Response</returns>
        ApiResponse<GetWinePairing200Response> GetWinePairingWithHttpInfo(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Wine Recommendation
        /// </summary>
        /// <remarks>
        /// Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWineRecommendation200Response</returns>
        GetWineRecommendation200Response GetWineRecommendation(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Wine Recommendation
        /// </summary>
        /// <remarks>
        /// Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWineRecommendation200Response</returns>
        ApiResponse<GetWineRecommendation200Response> GetWineRecommendationWithHttpInfo(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWineApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Dish Pairing for Wine
        /// </summary>
        /// <remarks>
        /// Find a dish that goes well with a given wine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDishPairingForWine200Response</returns>
        System.Threading.Tasks.Task<GetDishPairingForWine200Response> GetDishPairingForWineAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dish Pairing for Wine
        /// </summary>
        /// <remarks>
        /// Find a dish that goes well with a given wine.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDishPairingForWine200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDishPairingForWine200Response>> GetDishPairingForWineWithHttpInfoAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wine Description
        /// </summary>
        /// <remarks>
        /// Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWineDescription200Response</returns>
        System.Threading.Tasks.Task<GetWineDescription200Response> GetWineDescriptionAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wine Description
        /// </summary>
        /// <remarks>
        /// Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWineDescription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWineDescription200Response>> GetWineDescriptionWithHttpInfoAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wine Pairing
        /// </summary>
        /// <remarks>
        /// Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWinePairing200Response</returns>
        System.Threading.Tasks.Task<GetWinePairing200Response> GetWinePairingAsync(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wine Pairing
        /// </summary>
        /// <remarks>
        /// Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWinePairing200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWinePairing200Response>> GetWinePairingWithHttpInfoAsync(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wine Recommendation
        /// </summary>
        /// <remarks>
        /// Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWineRecommendation200Response</returns>
        System.Threading.Tasks.Task<GetWineRecommendation200Response> GetWineRecommendationAsync(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wine Recommendation
        /// </summary>
        /// <remarks>
        /// Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWineRecommendation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWineRecommendation200Response>> GetWineRecommendationWithHttpInfoAsync(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWineApi : IWineApiSync, IWineApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WineApi : IWineApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WineApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WineApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WineApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WineApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WineApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WineApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Dish Pairing for Wine Find a dish that goes well with a given wine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDishPairingForWine200Response</returns>
        public GetDishPairingForWine200Response GetDishPairingForWine(string wine, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetDishPairingForWine200Response> localVarResponse = GetDishPairingForWineWithHttpInfo(wine);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dish Pairing for Wine Find a dish that goes well with a given wine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDishPairingForWine200Response</returns>
        public spoonacular.Client.ApiResponse<GetDishPairingForWine200Response> GetDishPairingForWineWithHttpInfo(string wine, int operationIndex = 0)
        {
            // verify the required parameter 'wine' is set
            if (wine == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'wine' when calling WineApi->GetDishPairingForWine");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "wine", wine));

            localVarRequestOptions.Operation = "WineApi.GetDishPairingForWine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDishPairingForWine200Response>("/food/wine/dishes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDishPairingForWine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dish Pairing for Wine Find a dish that goes well with a given wine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDishPairingForWine200Response</returns>
        public async System.Threading.Tasks.Task<GetDishPairingForWine200Response> GetDishPairingForWineAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetDishPairingForWine200Response> localVarResponse = await GetDishPairingForWineWithHttpInfoAsync(wine, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dish Pairing for Wine Find a dish that goes well with a given wine.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDishPairingForWine200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetDishPairingForWine200Response>> GetDishPairingForWineWithHttpInfoAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'wine' is set
            if (wine == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'wine' when calling WineApi->GetDishPairingForWine");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "wine", wine));

            localVarRequestOptions.Operation = "WineApi.GetDishPairingForWine";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDishPairingForWine200Response>("/food/wine/dishes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDishPairingForWine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wine Description Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWineDescription200Response</returns>
        public GetWineDescription200Response GetWineDescription(string wine, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetWineDescription200Response> localVarResponse = GetWineDescriptionWithHttpInfo(wine);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wine Description Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWineDescription200Response</returns>
        public spoonacular.Client.ApiResponse<GetWineDescription200Response> GetWineDescriptionWithHttpInfo(string wine, int operationIndex = 0)
        {
            // verify the required parameter 'wine' is set
            if (wine == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'wine' when calling WineApi->GetWineDescription");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "wine", wine));

            localVarRequestOptions.Operation = "WineApi.GetWineDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWineDescription200Response>("/food/wine/description", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWineDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wine Description Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWineDescription200Response</returns>
        public async System.Threading.Tasks.Task<GetWineDescription200Response> GetWineDescriptionAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetWineDescription200Response> localVarResponse = await GetWineDescriptionWithHttpInfoAsync(wine, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wine Description Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWineDescription200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetWineDescription200Response>> GetWineDescriptionWithHttpInfoAsync(string wine, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'wine' is set
            if (wine == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'wine' when calling WineApi->GetWineDescription");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "wine", wine));

            localVarRequestOptions.Operation = "WineApi.GetWineDescription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWineDescription200Response>("/food/wine/description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWineDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wine Pairing Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWinePairing200Response</returns>
        public GetWinePairing200Response GetWinePairing(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetWinePairing200Response> localVarResponse = GetWinePairingWithHttpInfo(food, maxPrice);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wine Pairing Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWinePairing200Response</returns>
        public spoonacular.Client.ApiResponse<GetWinePairing200Response> GetWinePairingWithHttpInfo(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'food' is set
            if (food == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'food' when calling WineApi->GetWinePairing");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "food", food));
            if (maxPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPrice", maxPrice));
            }

            localVarRequestOptions.Operation = "WineApi.GetWinePairing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWinePairing200Response>("/food/wine/pairing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWinePairing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wine Pairing Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWinePairing200Response</returns>
        public async System.Threading.Tasks.Task<GetWinePairing200Response> GetWinePairingAsync(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetWinePairing200Response> localVarResponse = await GetWinePairingWithHttpInfoAsync(food, maxPrice, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wine Pairing Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="food">The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWinePairing200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetWinePairing200Response>> GetWinePairingWithHttpInfoAsync(string food, decimal? maxPrice = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'food' is set
            if (food == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'food' when calling WineApi->GetWinePairing");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "food", food));
            if (maxPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPrice", maxPrice));
            }

            localVarRequestOptions.Operation = "WineApi.GetWinePairing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWinePairing200Response>("/food/wine/pairing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWinePairing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wine Recommendation Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWineRecommendation200Response</returns>
        public GetWineRecommendation200Response GetWineRecommendation(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetWineRecommendation200Response> localVarResponse = GetWineRecommendationWithHttpInfo(wine, maxPrice, minRating, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wine Recommendation Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWineRecommendation200Response</returns>
        public spoonacular.Client.ApiResponse<GetWineRecommendation200Response> GetWineRecommendationWithHttpInfo(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'wine' is set
            if (wine == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'wine' when calling WineApi->GetWineRecommendation");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "wine", wine));
            if (maxPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPrice", maxPrice));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minRating", minRating));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "WineApi.GetWineRecommendation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWineRecommendation200Response>("/food/wine/recommendation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWineRecommendation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wine Recommendation Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWineRecommendation200Response</returns>
        public async System.Threading.Tasks.Task<GetWineRecommendation200Response> GetWineRecommendationAsync(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetWineRecommendation200Response> localVarResponse = await GetWineRecommendationWithHttpInfoAsync(wine, maxPrice, minRating, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Wine Recommendation Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wine">The type of wine to get a specific product recommendation for.</param>
        /// <param name="maxPrice">The maximum price for the specific wine recommendation in USD. (optional)</param>
        /// <param name="minRating">The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)</param>
        /// <param name="number">The number of wine recommendations expected (between 1 and 100). (optional, default to 10M)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWineRecommendation200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetWineRecommendation200Response>> GetWineRecommendationWithHttpInfoAsync(string wine, decimal? maxPrice = default(decimal?), decimal? minRating = default(decimal?), decimal? number = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'wine' is set
            if (wine == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'wine' when calling WineApi->GetWineRecommendation");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "wine", wine));
            if (maxPrice != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPrice", maxPrice));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minRating", minRating));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "WineApi.GetWineRecommendation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWineRecommendation200Response>("/food/wine/recommendation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWineRecommendation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
