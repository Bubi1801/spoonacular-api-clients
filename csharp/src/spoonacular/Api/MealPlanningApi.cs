/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spoonacular.Client;
using spoonacular.Model;

namespace spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMealPlanningApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Add a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddMealPlanTemplate200Response</returns>
        AddMealPlanTemplate200Response AddMealPlanTemplate(string username, string hash, int operationIndex = 0);

        /// <summary>
        /// Add Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Add a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddMealPlanTemplate200Response</returns>
        ApiResponse<AddMealPlanTemplate200Response> AddMealPlanTemplateWithHttpInfo(string username, string hash, int operationIndex = 0);
        /// <summary>
        /// Add to Meal Plan
        /// </summary>
        /// <remarks>
        /// Add an item to the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object AddToMealPlan(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0);

        /// <summary>
        /// Add to Meal Plan
        /// </summary>
        /// <remarks>
        /// Add an item to the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddToMealPlanWithHttpInfo(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0);
        /// <summary>
        /// Add to Shopping List
        /// </summary>
        /// <remarks>
        /// Add an item to the current shopping list of a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateShoppingList200Response</returns>
        GenerateShoppingList200Response AddToShoppingList(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0);

        /// <summary>
        /// Add to Shopping List
        /// </summary>
        /// <remarks>
        /// Add an item to the current shopping list of a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateShoppingList200Response</returns>
        ApiResponse<GenerateShoppingList200Response> AddToShoppingListWithHttpInfo(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0);
        /// <summary>
        /// Clear Meal Plan Day
        /// </summary>
        /// <remarks>
        /// Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ClearMealPlanDay(string username, string date, string hash, int operationIndex = 0);

        /// <summary>
        /// Clear Meal Plan Day
        /// </summary>
        /// <remarks>
        /// Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClearMealPlanDayWithHttpInfo(string username, string date, string hash, int operationIndex = 0);
        /// <summary>
        /// Connect User
        /// </summary>
        /// <remarks>
        /// In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectUser200Response</returns>
        ConnectUser200Response ConnectUser(ConnectUserRequest connectUserRequest, int operationIndex = 0);

        /// <summary>
        /// Connect User
        /// </summary>
        /// <remarks>
        /// In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectUser200Response</returns>
        ApiResponse<ConnectUser200Response> ConnectUserWithHttpInfo(ConnectUserRequest connectUserRequest, int operationIndex = 0);
        /// <summary>
        /// Delete from Meal Plan
        /// </summary>
        /// <remarks>
        /// Delete an item from the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteFromMealPlan(string username, decimal id, string hash, int operationIndex = 0);

        /// <summary>
        /// Delete from Meal Plan
        /// </summary>
        /// <remarks>
        /// Delete an item from the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteFromMealPlanWithHttpInfo(string username, decimal id, string hash, int operationIndex = 0);
        /// <summary>
        /// Delete from Shopping List
        /// </summary>
        /// <remarks>
        /// Delete an item from the current shopping list of the user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteFromShoppingList(string username, int id, string hash, int operationIndex = 0);

        /// <summary>
        /// Delete from Shopping List
        /// </summary>
        /// <remarks>
        /// Delete an item from the current shopping list of the user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteFromShoppingListWithHttpInfo(string username, int id, string hash, int operationIndex = 0);
        /// <summary>
        /// Delete Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Delete a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteMealPlanTemplate(string username, int id, string hash, int operationIndex = 0);

        /// <summary>
        /// Delete Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Delete a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMealPlanTemplateWithHttpInfo(string username, int id, string hash, int operationIndex = 0);
        /// <summary>
        /// Generate Meal Plan
        /// </summary>
        /// <remarks>
        /// Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateMealPlan200Response</returns>
        GenerateMealPlan200Response GenerateMealPlan(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0);

        /// <summary>
        /// Generate Meal Plan
        /// </summary>
        /// <remarks>
        /// Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateMealPlan200Response</returns>
        ApiResponse<GenerateMealPlan200Response> GenerateMealPlanWithHttpInfo(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0);
        /// <summary>
        /// Generate Shopping List
        /// </summary>
        /// <remarks>
        /// Generate the shopping list for a user from the meal planner in a given time frame.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateShoppingList200Response</returns>
        GenerateShoppingList200Response GenerateShoppingList(string username, string startDate, string endDate, string hash, int operationIndex = 0);

        /// <summary>
        /// Generate Shopping List
        /// </summary>
        /// <remarks>
        /// Generate the shopping list for a user from the meal planner in a given time frame.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateShoppingList200Response</returns>
        ApiResponse<GenerateShoppingList200Response> GenerateShoppingListWithHttpInfo(string username, string startDate, string endDate, string hash, int operationIndex = 0);
        /// <summary>
        /// Get Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Get information about a meal plan template.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMealPlanTemplate200Response</returns>
        GetMealPlanTemplate200Response GetMealPlanTemplate(string username, int id, string hash, int operationIndex = 0);

        /// <summary>
        /// Get Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Get information about a meal plan template.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMealPlanTemplate200Response</returns>
        ApiResponse<GetMealPlanTemplate200Response> GetMealPlanTemplateWithHttpInfo(string username, int id, string hash, int operationIndex = 0);
        /// <summary>
        /// Get Meal Plan Templates
        /// </summary>
        /// <remarks>
        /// Get meal plan templates from user or public ones.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMealPlanTemplates200Response</returns>
        GetMealPlanTemplates200Response GetMealPlanTemplates(string username, string hash, int operationIndex = 0);

        /// <summary>
        /// Get Meal Plan Templates
        /// </summary>
        /// <remarks>
        /// Get meal plan templates from user or public ones.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMealPlanTemplates200Response</returns>
        ApiResponse<GetMealPlanTemplates200Response> GetMealPlanTemplatesWithHttpInfo(string username, string hash, int operationIndex = 0);
        /// <summary>
        /// Get Meal Plan Week
        /// </summary>
        /// <remarks>
        /// Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMealPlanWeek200Response</returns>
        GetMealPlanWeek200Response GetMealPlanWeek(string username, string startDate, string hash, int operationIndex = 0);

        /// <summary>
        /// Get Meal Plan Week
        /// </summary>
        /// <remarks>
        /// Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMealPlanWeek200Response</returns>
        ApiResponse<GetMealPlanWeek200Response> GetMealPlanWeekWithHttpInfo(string username, string startDate, string hash, int operationIndex = 0);
        /// <summary>
        /// Get Shopping List
        /// </summary>
        /// <remarks>
        /// Get the current shopping list for the given user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetShoppingList200Response</returns>
        GetShoppingList200Response GetShoppingList(string username, string hash, int operationIndex = 0);

        /// <summary>
        /// Get Shopping List
        /// </summary>
        /// <remarks>
        /// Get the current shopping list for the given user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetShoppingList200Response</returns>
        ApiResponse<GetShoppingList200Response> GetShoppingListWithHttpInfo(string username, string hash, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMealPlanningApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Add a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMealPlanTemplate200Response</returns>
        System.Threading.Tasks.Task<AddMealPlanTemplate200Response> AddMealPlanTemplateAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Add a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMealPlanTemplate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddMealPlanTemplate200Response>> AddMealPlanTemplateWithHttpInfoAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add to Meal Plan
        /// </summary>
        /// <remarks>
        /// Add an item to the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddToMealPlanAsync(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add to Meal Plan
        /// </summary>
        /// <remarks>
        /// Add an item to the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddToMealPlanWithHttpInfoAsync(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add to Shopping List
        /// </summary>
        /// <remarks>
        /// Add an item to the current shopping list of a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateShoppingList200Response</returns>
        System.Threading.Tasks.Task<GenerateShoppingList200Response> AddToShoppingListAsync(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add to Shopping List
        /// </summary>
        /// <remarks>
        /// Add an item to the current shopping list of a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateShoppingList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateShoppingList200Response>> AddToShoppingListWithHttpInfoAsync(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear Meal Plan Day
        /// </summary>
        /// <remarks>
        /// Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClearMealPlanDayAsync(string username, string date, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear Meal Plan Day
        /// </summary>
        /// <remarks>
        /// Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearMealPlanDayWithHttpInfoAsync(string username, string date, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Connect User
        /// </summary>
        /// <remarks>
        /// In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectUser200Response</returns>
        System.Threading.Tasks.Task<ConnectUser200Response> ConnectUserAsync(ConnectUserRequest connectUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Connect User
        /// </summary>
        /// <remarks>
        /// In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectUser200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectUser200Response>> ConnectUserWithHttpInfoAsync(ConnectUserRequest connectUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete from Meal Plan
        /// </summary>
        /// <remarks>
        /// Delete an item from the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteFromMealPlanAsync(string username, decimal id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete from Meal Plan
        /// </summary>
        /// <remarks>
        /// Delete an item from the user&#39;s meal plan.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFromMealPlanWithHttpInfoAsync(string username, decimal id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete from Shopping List
        /// </summary>
        /// <remarks>
        /// Delete an item from the current shopping list of the user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteFromShoppingListAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete from Shopping List
        /// </summary>
        /// <remarks>
        /// Delete an item from the current shopping list of the user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFromShoppingListWithHttpInfoAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Delete a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMealPlanTemplateAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Delete a meal plan template for a user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMealPlanTemplateWithHttpInfoAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Meal Plan
        /// </summary>
        /// <remarks>
        /// Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateMealPlan200Response</returns>
        System.Threading.Tasks.Task<GenerateMealPlan200Response> GenerateMealPlanAsync(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Meal Plan
        /// </summary>
        /// <remarks>
        /// Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateMealPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateMealPlan200Response>> GenerateMealPlanWithHttpInfoAsync(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Shopping List
        /// </summary>
        /// <remarks>
        /// Generate the shopping list for a user from the meal planner in a given time frame.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateShoppingList200Response</returns>
        System.Threading.Tasks.Task<GenerateShoppingList200Response> GenerateShoppingListAsync(string username, string startDate, string endDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Shopping List
        /// </summary>
        /// <remarks>
        /// Generate the shopping list for a user from the meal planner in a given time frame.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateShoppingList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateShoppingList200Response>> GenerateShoppingListWithHttpInfoAsync(string username, string startDate, string endDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Get information about a meal plan template.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMealPlanTemplate200Response</returns>
        System.Threading.Tasks.Task<GetMealPlanTemplate200Response> GetMealPlanTemplateAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Meal Plan Template
        /// </summary>
        /// <remarks>
        /// Get information about a meal plan template.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMealPlanTemplate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMealPlanTemplate200Response>> GetMealPlanTemplateWithHttpInfoAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Meal Plan Templates
        /// </summary>
        /// <remarks>
        /// Get meal plan templates from user or public ones.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMealPlanTemplates200Response</returns>
        System.Threading.Tasks.Task<GetMealPlanTemplates200Response> GetMealPlanTemplatesAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Meal Plan Templates
        /// </summary>
        /// <remarks>
        /// Get meal plan templates from user or public ones.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMealPlanTemplates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMealPlanTemplates200Response>> GetMealPlanTemplatesWithHttpInfoAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Meal Plan Week
        /// </summary>
        /// <remarks>
        /// Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMealPlanWeek200Response</returns>
        System.Threading.Tasks.Task<GetMealPlanWeek200Response> GetMealPlanWeekAsync(string username, string startDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Meal Plan Week
        /// </summary>
        /// <remarks>
        /// Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMealPlanWeek200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMealPlanWeek200Response>> GetMealPlanWeekWithHttpInfoAsync(string username, string startDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Shopping List
        /// </summary>
        /// <remarks>
        /// Get the current shopping list for the given user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShoppingList200Response</returns>
        System.Threading.Tasks.Task<GetShoppingList200Response> GetShoppingListAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Shopping List
        /// </summary>
        /// <remarks>
        /// Get the current shopping list for the given user.
        /// </remarks>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShoppingList200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShoppingList200Response>> GetShoppingListWithHttpInfoAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMealPlanningApi : IMealPlanningApiSync, IMealPlanningApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MealPlanningApi : IMealPlanningApi
    {
        private spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MealPlanningApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MealPlanningApi(string basePath)
        {
            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                new spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MealPlanningApi(spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spoonacular.Client.Configuration.MergeConfigurations(
                spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MealPlanningApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MealPlanningApi(spoonacular.Client.ISynchronousClient client, spoonacular.Client.IAsynchronousClient asyncClient, spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Meal Plan Template Add a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddMealPlanTemplate200Response</returns>
        public AddMealPlanTemplate200Response AddMealPlanTemplate(string username, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<AddMealPlanTemplate200Response> localVarResponse = AddMealPlanTemplateWithHttpInfo(username, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Meal Plan Template Add a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddMealPlanTemplate200Response</returns>
        public spoonacular.Client.ApiResponse<AddMealPlanTemplate200Response> AddMealPlanTemplateWithHttpInfo(string username, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->AddMealPlanTemplate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->AddMealPlanTemplate");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.AddMealPlanTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddMealPlanTemplate200Response>("/mealplanner/{username}/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMealPlanTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Meal Plan Template Add a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMealPlanTemplate200Response</returns>
        public async System.Threading.Tasks.Task<AddMealPlanTemplate200Response> AddMealPlanTemplateAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<AddMealPlanTemplate200Response> localVarResponse = await AddMealPlanTemplateWithHttpInfoAsync(username, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Meal Plan Template Add a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMealPlanTemplate200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<AddMealPlanTemplate200Response>> AddMealPlanTemplateWithHttpInfoAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->AddMealPlanTemplate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->AddMealPlanTemplate");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.AddMealPlanTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddMealPlanTemplate200Response>("/mealplanner/{username}/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMealPlanTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add to Meal Plan Add an item to the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object AddToMealPlan(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = AddToMealPlanWithHttpInfo(username, hash, addToMealPlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add to Meal Plan Add an item to the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> AddToMealPlanWithHttpInfo(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->AddToMealPlan");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->AddToMealPlan");
            }

            // verify the required parameter 'addToMealPlanRequest' is set
            if (addToMealPlanRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'addToMealPlanRequest' when calling MealPlanningApi->AddToMealPlan");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            localVarRequestOptions.Data = addToMealPlanRequest;

            localVarRequestOptions.Operation = "MealPlanningApi.AddToMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mealplanner/{username}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add to Meal Plan Add an item to the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddToMealPlanAsync(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await AddToMealPlanWithHttpInfoAsync(username, hash, addToMealPlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add to Meal Plan Add an item to the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToMealPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> AddToMealPlanWithHttpInfoAsync(string username, string hash, AddToMealPlanRequest addToMealPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->AddToMealPlan");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->AddToMealPlan");
            }

            // verify the required parameter 'addToMealPlanRequest' is set
            if (addToMealPlanRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'addToMealPlanRequest' when calling MealPlanningApi->AddToMealPlan");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            localVarRequestOptions.Data = addToMealPlanRequest;

            localVarRequestOptions.Operation = "MealPlanningApi.AddToMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mealplanner/{username}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add to Shopping List Add an item to the current shopping list of a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateShoppingList200Response</returns>
        public GenerateShoppingList200Response AddToShoppingList(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GenerateShoppingList200Response> localVarResponse = AddToShoppingListWithHttpInfo(username, hash, addToShoppingListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add to Shopping List Add an item to the current shopping list of a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateShoppingList200Response</returns>
        public spoonacular.Client.ApiResponse<GenerateShoppingList200Response> AddToShoppingListWithHttpInfo(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->AddToShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->AddToShoppingList");
            }

            // verify the required parameter 'addToShoppingListRequest' is set
            if (addToShoppingListRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'addToShoppingListRequest' when calling MealPlanningApi->AddToShoppingList");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            localVarRequestOptions.Data = addToShoppingListRequest;

            localVarRequestOptions.Operation = "MealPlanningApi.AddToShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateShoppingList200Response>("/mealplanner/{username}/shopping-list/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add to Shopping List Add an item to the current shopping list of a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateShoppingList200Response</returns>
        public async System.Threading.Tasks.Task<GenerateShoppingList200Response> AddToShoppingListAsync(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GenerateShoppingList200Response> localVarResponse = await AddToShoppingListWithHttpInfoAsync(username, hash, addToShoppingListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add to Shopping List Add an item to the current shopping list of a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="addToShoppingListRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateShoppingList200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GenerateShoppingList200Response>> AddToShoppingListWithHttpInfoAsync(string username, string hash, AddToShoppingListRequest addToShoppingListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->AddToShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->AddToShoppingList");
            }

            // verify the required parameter 'addToShoppingListRequest' is set
            if (addToShoppingListRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'addToShoppingListRequest' when calling MealPlanningApi->AddToShoppingList");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            localVarRequestOptions.Data = addToShoppingListRequest;

            localVarRequestOptions.Operation = "MealPlanningApi.AddToShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateShoppingList200Response>("/mealplanner/{username}/shopping-list/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Meal Plan Day Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ClearMealPlanDay(string username, string date, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = ClearMealPlanDayWithHttpInfo(username, date, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Meal Plan Day Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> ClearMealPlanDayWithHttpInfo(string username, string date, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->ClearMealPlanDay");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'date' when calling MealPlanningApi->ClearMealPlanDay");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->ClearMealPlanDay");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", spoonacular.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.ClearMealPlanDay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mealplanner/{username}/day/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearMealPlanDay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Meal Plan Day Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClearMealPlanDayAsync(string username, string date, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await ClearMealPlanDayWithHttpInfoAsync(username, date, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Meal Plan Day Delete all planned items from the user&#39;s meal plan for a specific day.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="date">The date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> ClearMealPlanDayWithHttpInfoAsync(string username, string date, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->ClearMealPlanDay");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'date' when calling MealPlanningApi->ClearMealPlanDay");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->ClearMealPlanDay");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", spoonacular.Client.ClientUtils.ParameterToString(date)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.ClearMealPlanDay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mealplanner/{username}/day/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearMealPlanDay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Connect User In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectUser200Response</returns>
        public ConnectUser200Response ConnectUser(ConnectUserRequest connectUserRequest, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<ConnectUser200Response> localVarResponse = ConnectUserWithHttpInfo(connectUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Connect User In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectUser200Response</returns>
        public spoonacular.Client.ApiResponse<ConnectUser200Response> ConnectUserWithHttpInfo(ConnectUserRequest connectUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'connectUserRequest' is set
            if (connectUserRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'connectUserRequest' when calling MealPlanningApi->ConnectUser");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = connectUserRequest;

            localVarRequestOptions.Operation = "MealPlanningApi.ConnectUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConnectUser200Response>("/users/connect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Connect User In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectUser200Response</returns>
        public async System.Threading.Tasks.Task<ConnectUser200Response> ConnectUserAsync(ConnectUserRequest connectUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<ConnectUser200Response> localVarResponse = await ConnectUserWithHttpInfoAsync(connectUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Connect User In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectUser200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<ConnectUser200Response>> ConnectUserWithHttpInfoAsync(ConnectUserRequest connectUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectUserRequest' is set
            if (connectUserRequest == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'connectUserRequest' when calling MealPlanningApi->ConnectUser");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = connectUserRequest;

            localVarRequestOptions.Operation = "MealPlanningApi.ConnectUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConnectUser200Response>("/users/connect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConnectUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete from Meal Plan Delete an item from the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteFromMealPlan(string username, decimal id, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = DeleteFromMealPlanWithHttpInfo(username, id, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete from Meal Plan Delete an item from the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> DeleteFromMealPlanWithHttpInfo(string username, decimal id, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->DeleteFromMealPlan");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->DeleteFromMealPlan");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.DeleteFromMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mealplanner/{username}/items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFromMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete from Meal Plan Delete an item from the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteFromMealPlanAsync(string username, decimal id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await DeleteFromMealPlanWithHttpInfoAsync(username, id, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete from Meal Plan Delete an item from the user&#39;s meal plan.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The shopping list item id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> DeleteFromMealPlanWithHttpInfoAsync(string username, decimal id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->DeleteFromMealPlan");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->DeleteFromMealPlan");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.DeleteFromMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mealplanner/{username}/items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFromMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete from Shopping List Delete an item from the current shopping list of the user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteFromShoppingList(string username, int id, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = DeleteFromShoppingListWithHttpInfo(username, id, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete from Shopping List Delete an item from the current shopping list of the user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> DeleteFromShoppingListWithHttpInfo(string username, int id, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->DeleteFromShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->DeleteFromShoppingList");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.DeleteFromShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mealplanner/{username}/shopping-list/items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFromShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete from Shopping List Delete an item from the current shopping list of the user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteFromShoppingListAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await DeleteFromShoppingListWithHttpInfoAsync(username, id, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete from Shopping List Delete an item from the current shopping list of the user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> DeleteFromShoppingListWithHttpInfoAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->DeleteFromShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->DeleteFromShoppingList");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.DeleteFromShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mealplanner/{username}/shopping-list/items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFromShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Meal Plan Template Delete a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteMealPlanTemplate(string username, int id, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = DeleteMealPlanTemplateWithHttpInfo(username, id, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Meal Plan Template Delete a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public spoonacular.Client.ApiResponse<Object> DeleteMealPlanTemplateWithHttpInfo(string username, int id, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->DeleteMealPlanTemplate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->DeleteMealPlanTemplate");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.DeleteMealPlanTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mealplanner/{username}/templates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMealPlanTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Meal Plan Template Delete a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMealPlanTemplateAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<Object> localVarResponse = await DeleteMealPlanTemplateWithHttpInfoAsync(username, id, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Meal Plan Template Delete a meal plan template for a user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<Object>> DeleteMealPlanTemplateWithHttpInfoAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->DeleteMealPlanTemplate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->DeleteMealPlanTemplate");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.DeleteMealPlanTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mealplanner/{username}/templates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMealPlanTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Meal Plan Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateMealPlan200Response</returns>
        public GenerateMealPlan200Response GenerateMealPlan(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GenerateMealPlan200Response> localVarResponse = GenerateMealPlanWithHttpInfo(timeFrame, targetCalories, diet, exclude);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Meal Plan Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateMealPlan200Response</returns>
        public spoonacular.Client.ApiResponse<GenerateMealPlan200Response> GenerateMealPlanWithHttpInfo(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0)
        {
            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (timeFrame != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "timeFrame", timeFrame));
            }
            if (targetCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "targetCalories", targetCalories));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "MealPlanningApi.GenerateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerateMealPlan200Response>("/mealplanner/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Meal Plan Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateMealPlan200Response</returns>
        public async System.Threading.Tasks.Task<GenerateMealPlan200Response> GenerateMealPlanAsync(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GenerateMealPlan200Response> localVarResponse = await GenerateMealPlanWithHttpInfoAsync(timeFrame, targetCalories, diet, exclude, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Meal Plan Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeFrame">Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)</param>
        /// <param name="targetCalories">What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)</param>
        /// <param name="diet">Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)</param>
        /// <param name="exclude">A comma-separated list of allergens or ingredients that must be excluded. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateMealPlan200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GenerateMealPlan200Response>> GenerateMealPlanWithHttpInfoAsync(string? timeFrame = default(string?), decimal? targetCalories = default(decimal?), string? diet = default(string?), string? exclude = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (timeFrame != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "timeFrame", timeFrame));
            }
            if (targetCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "targetCalories", targetCalories));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (exclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "exclude", exclude));
            }

            localVarRequestOptions.Operation = "MealPlanningApi.GenerateMealPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerateMealPlan200Response>("/mealplanner/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateMealPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Shopping List Generate the shopping list for a user from the meal planner in a given time frame.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateShoppingList200Response</returns>
        public GenerateShoppingList200Response GenerateShoppingList(string username, string startDate, string endDate, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GenerateShoppingList200Response> localVarResponse = GenerateShoppingListWithHttpInfo(username, startDate, endDate, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Shopping List Generate the shopping list for a user from the meal planner in a given time frame.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateShoppingList200Response</returns>
        public spoonacular.Client.ApiResponse<GenerateShoppingList200Response> GenerateShoppingListWithHttpInfo(string username, string startDate, string endDate, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GenerateShoppingList");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'startDate' when calling MealPlanningApi->GenerateShoppingList");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'endDate' when calling MealPlanningApi->GenerateShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GenerateShoppingList");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("start_date", spoonacular.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("end_date", spoonacular.Client.ClientUtils.ParameterToString(endDate)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GenerateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateShoppingList200Response>("/mealplanner/{username}/shopping-list/{start_date}/{end_date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Shopping List Generate the shopping list for a user from the meal planner in a given time frame.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateShoppingList200Response</returns>
        public async System.Threading.Tasks.Task<GenerateShoppingList200Response> GenerateShoppingListAsync(string username, string startDate, string endDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GenerateShoppingList200Response> localVarResponse = await GenerateShoppingListWithHttpInfoAsync(username, startDate, endDate, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Shopping List Generate the shopping list for a user from the meal planner in a given time frame.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date in the format yyyy-mm-dd.</param>
        /// <param name="endDate">The end date in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateShoppingList200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GenerateShoppingList200Response>> GenerateShoppingListWithHttpInfoAsync(string username, string startDate, string endDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GenerateShoppingList");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'startDate' when calling MealPlanningApi->GenerateShoppingList");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'endDate' when calling MealPlanningApi->GenerateShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GenerateShoppingList");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("start_date", spoonacular.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("end_date", spoonacular.Client.ClientUtils.ParameterToString(endDate)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GenerateShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateShoppingList200Response>("/mealplanner/{username}/shopping-list/{start_date}/{end_date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meal Plan Template Get information about a meal plan template.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMealPlanTemplate200Response</returns>
        public GetMealPlanTemplate200Response GetMealPlanTemplate(string username, int id, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetMealPlanTemplate200Response> localVarResponse = GetMealPlanTemplateWithHttpInfo(username, id, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meal Plan Template Get information about a meal plan template.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMealPlanTemplate200Response</returns>
        public spoonacular.Client.ApiResponse<GetMealPlanTemplate200Response> GetMealPlanTemplateWithHttpInfo(string username, int id, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetMealPlanTemplate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetMealPlanTemplate");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetMealPlanTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMealPlanTemplate200Response>("/mealplanner/{username}/templates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMealPlanTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meal Plan Template Get information about a meal plan template.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMealPlanTemplate200Response</returns>
        public async System.Threading.Tasks.Task<GetMealPlanTemplate200Response> GetMealPlanTemplateAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetMealPlanTemplate200Response> localVarResponse = await GetMealPlanTemplateWithHttpInfoAsync(username, id, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meal Plan Template Get information about a meal plan template.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMealPlanTemplate200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetMealPlanTemplate200Response>> GetMealPlanTemplateWithHttpInfoAsync(string username, int id, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetMealPlanTemplate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetMealPlanTemplate");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetMealPlanTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMealPlanTemplate200Response>("/mealplanner/{username}/templates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMealPlanTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meal Plan Templates Get meal plan templates from user or public ones.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMealPlanTemplates200Response</returns>
        public GetMealPlanTemplates200Response GetMealPlanTemplates(string username, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetMealPlanTemplates200Response> localVarResponse = GetMealPlanTemplatesWithHttpInfo(username, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meal Plan Templates Get meal plan templates from user or public ones.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMealPlanTemplates200Response</returns>
        public spoonacular.Client.ApiResponse<GetMealPlanTemplates200Response> GetMealPlanTemplatesWithHttpInfo(string username, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetMealPlanTemplates");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetMealPlanTemplates");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetMealPlanTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMealPlanTemplates200Response>("/mealplanner/{username}/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMealPlanTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meal Plan Templates Get meal plan templates from user or public ones.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMealPlanTemplates200Response</returns>
        public async System.Threading.Tasks.Task<GetMealPlanTemplates200Response> GetMealPlanTemplatesAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetMealPlanTemplates200Response> localVarResponse = await GetMealPlanTemplatesWithHttpInfoAsync(username, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meal Plan Templates Get meal plan templates from user or public ones.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMealPlanTemplates200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetMealPlanTemplates200Response>> GetMealPlanTemplatesWithHttpInfoAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetMealPlanTemplates");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetMealPlanTemplates");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetMealPlanTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMealPlanTemplates200Response>("/mealplanner/{username}/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMealPlanTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meal Plan Week Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMealPlanWeek200Response</returns>
        public GetMealPlanWeek200Response GetMealPlanWeek(string username, string startDate, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetMealPlanWeek200Response> localVarResponse = GetMealPlanWeekWithHttpInfo(username, startDate, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meal Plan Week Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMealPlanWeek200Response</returns>
        public spoonacular.Client.ApiResponse<GetMealPlanWeek200Response> GetMealPlanWeekWithHttpInfo(string username, string startDate, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetMealPlanWeek");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'startDate' when calling MealPlanningApi->GetMealPlanWeek");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetMealPlanWeek");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("start_date", spoonacular.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetMealPlanWeek";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMealPlanWeek200Response>("/mealplanner/{username}/week/{start_date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMealPlanWeek", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meal Plan Week Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMealPlanWeek200Response</returns>
        public async System.Threading.Tasks.Task<GetMealPlanWeek200Response> GetMealPlanWeekAsync(string username, string startDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetMealPlanWeek200Response> localVarResponse = await GetMealPlanWeekWithHttpInfoAsync(username, startDate, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meal Plan Week Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="startDate">The start date of the meal planned week in the format yyyy-mm-dd.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMealPlanWeek200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetMealPlanWeek200Response>> GetMealPlanWeekWithHttpInfoAsync(string username, string startDate, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetMealPlanWeek");
            }

            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'startDate' when calling MealPlanningApi->GetMealPlanWeek");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetMealPlanWeek");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("start_date", spoonacular.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetMealPlanWeek";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMealPlanWeek200Response>("/mealplanner/{username}/week/{start_date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMealPlanWeek", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shopping List Get the current shopping list for the given user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetShoppingList200Response</returns>
        public GetShoppingList200Response GetShoppingList(string username, string hash, int operationIndex = 0)
        {
            spoonacular.Client.ApiResponse<GetShoppingList200Response> localVarResponse = GetShoppingListWithHttpInfo(username, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shopping List Get the current shopping list for the given user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetShoppingList200Response</returns>
        public spoonacular.Client.ApiResponse<GetShoppingList200Response> GetShoppingListWithHttpInfo(string username, string hash, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetShoppingList");
            }

            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetShoppingList200Response>("/mealplanner/{username}/shopping-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shopping List Get the current shopping list for the given user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShoppingList200Response</returns>
        public async System.Threading.Tasks.Task<GetShoppingList200Response> GetShoppingListAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            spoonacular.Client.ApiResponse<GetShoppingList200Response> localVarResponse = await GetShoppingListWithHttpInfoAsync(username, hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shopping List Get the current shopping list for the given user.
        /// </summary>
        /// <exception cref="spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The username.</param>
        /// <param name="hash">The private hash for the username.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShoppingList200Response)</returns>
        public async System.Threading.Tasks.Task<spoonacular.Client.ApiResponse<GetShoppingList200Response>> GetShoppingListWithHttpInfoAsync(string username, string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'username' when calling MealPlanningApi->GetShoppingList");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new spoonacular.Client.ApiException(400, "Missing required parameter 'hash' when calling MealPlanningApi->GetShoppingList");
            }


            spoonacular.Client.RequestOptions localVarRequestOptions = new spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", spoonacular.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.QueryParameters.Add(spoonacular.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));

            localVarRequestOptions.Operation = "MealPlanningApi.GetShoppingList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetShoppingList200Response>("/mealplanner/{username}/shopping-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShoppingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
