/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = spoonacular.Client.OpenAPIDateConverter;

namespace spoonacular.Model
{
    /// <summary>
    /// AnalyzeRecipeRequest
    /// </summary>
    [DataContract(Name = "analyzeRecipe_request")]
    public partial class AnalyzeRecipeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeRecipeRequest" /> class.
        /// </summary>
        /// <param name="language">The input language, either \&quot;en\&quot; or \&quot;de\&quot;..</param>
        /// <param name="includeNutrition">Whether nutrition data should be added to correctly parsed ingredients..</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients..</param>
        public AnalyzeRecipeRequest(string language = default(string), bool includeNutrition = default(bool), bool includeTaste = default(bool))
        {
            this.Language = language;
            this.IncludeNutrition = includeNutrition;
            this.IncludeTaste = includeTaste;
        }

        /// <summary>
        /// The input language, either \&quot;en\&quot; or \&quot;de\&quot;.
        /// </summary>
        /// <value>The input language, either \&quot;en\&quot; or \&quot;de\&quot;.</value>
        /// <example>en</example>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Whether nutrition data should be added to correctly parsed ingredients.
        /// </summary>
        /// <value>Whether nutrition data should be added to correctly parsed ingredients.</value>
        /// <example>false</example>
        [DataMember(Name = "includeNutrition", EmitDefaultValue = true)]
        public bool IncludeNutrition { get; set; }

        /// <summary>
        /// Whether taste data should be added to correctly parsed ingredients.
        /// </summary>
        /// <value>Whether taste data should be added to correctly parsed ingredients.</value>
        /// <example>false</example>
        [DataMember(Name = "includeTaste", EmitDefaultValue = true)]
        public bool IncludeTaste { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyzeRecipeRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  IncludeNutrition: ").Append(IncludeNutrition).Append("\n");
            sb.Append("  IncludeTaste: ").Append(IncludeTaste).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
