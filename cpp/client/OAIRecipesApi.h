/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecipesApi_H
#define OAI_OAIRecipesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyzeARecipeSearchQuery_200_response.h"
#include "OAIAnalyzeRecipeInstructions_200_response.h"
#include "OAIAutocompleteRecipeSearch_200_response_inner.h"
#include "OAIClassifyCuisine_200_response.h"
#include "OAIComputeGlycemicLoad_200_response.h"
#include "OAIComputeGlycemicLoad_request.h"
#include "OAIConvertAmounts_200_response.h"
#include "OAICreateRecipeCard_200_response.h"
#include "OAIGetAnalyzedRecipeInstructions_200_response.h"
#include "OAIGetRandomRecipes_200_response.h"
#include "OAIGetRecipeEquipmentByID_200_response.h"
#include "OAIGetRecipeInformationBulk_200_response_inner.h"
#include "OAIGetRecipeInformation_200_response.h"
#include "OAIGetRecipeIngredientsByID_200_response.h"
#include "OAIGetRecipeNutritionWidgetByID_200_response.h"
#include "OAIGetRecipePriceBreakdownByID_200_response.h"
#include "OAIGetRecipeTasteByID_200_response.h"
#include "OAIGetSimilarRecipes_200_response_inner.h"
#include "OAIGuessNutritionByDishName_200_response.h"
#include "OAIObject.h"
#include "OAIParseIngredients_200_response_inner.h"
#include "OAIQuickAnswer_200_response.h"
#include "OAISearchRecipesByIngredients_200_response_inner.h"
#include "OAISearchRecipesByNutrients_200_response_inner.h"
#include "OAISearchRecipes_200_response.h"
#include "OAISummarizeRecipe_200_response.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecipesApi : public QObject {
    Q_OBJECT

public:
    OAIRecipesApi(const int timeOut = 0);
    ~OAIRecipesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QString [required]
    */
    void analyzeARecipeSearchQuery(const QString &q);

    /**
    * @param[in]  content_type QString [optional]
    */
    void analyzeRecipeInstructions(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  number qint32 [optional]
    */
    void autocompleteRecipeSearch(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  content_type QString [optional]
    */
    void classifyCuisine(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_compute_glycemic_load_request OAIComputeGlycemicLoad_request [required]
    * @param[in]  language QString [optional]
    */
    void computeGlycemicLoad(const OAIComputeGlycemicLoad_request &oai_compute_glycemic_load_request, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ingredient_name QString [required]
    * @param[in]  source_amount double [required]
    * @param[in]  source_unit QString [required]
    * @param[in]  target_unit QString [required]
    */
    void convertAmounts(const QString &ingredient_name, const double &source_amount, const QString &source_unit, const QString &target_unit);

    /**
    * @param[in]  content_type QString [optional]
    */
    void createRecipeCard(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [required]
    */
    void equipmentByIDImage(const double &id);

    /**
    * @param[in]  url QString [required]
    * @param[in]  force_extraction bool [optional]
    * @param[in]  analyze bool [optional]
    * @param[in]  include_nutrition bool [optional]
    * @param[in]  include_taste bool [optional]
    */
    void extractRecipeFromWebsite(const QString &url, const ::OpenAPI::OptionalParam<bool> &force_extraction = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &analyze = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_nutrition = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_taste = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  step_breakdown bool [optional]
    */
    void getAnalyzedRecipeInstructions(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &step_breakdown = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit_license bool [optional]
    * @param[in]  include_nutrition bool [optional]
    * @param[in]  include_tags QString [optional]
    * @param[in]  exclude_tags QString [optional]
    * @param[in]  number qint32 [optional]
    */
    void getRandomRecipes(const ::OpenAPI::OptionalParam<bool> &limit_license = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_nutrition = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    void getRecipeEquipmentByID(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  include_nutrition bool [optional]
    */
    void getRecipeInformation(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &include_nutrition = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  include_nutrition bool [optional]
    */
    void getRecipeInformationBulk(const QString &ids, const ::OpenAPI::OptionalParam<bool> &include_nutrition = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    void getRecipeIngredientsByID(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    void getRecipeNutritionWidgetByID(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    void getRecipePriceBreakdownByID(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  normalize bool [optional]
    */
    void getRecipeTasteByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &normalize = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  number qint32 [optional]
    * @param[in]  limit_license bool [optional]
    */
    void getSimilarRecipes(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &limit_license = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  title QString [required]
    */
    void guessNutritionByDishName(const QString &title);

    /**
    * @param[in]  id double [required]
    * @param[in]  measure QString [optional]
    */
    void ingredientsByIDImage(const double &id, const ::OpenAPI::OptionalParam<QString> &measure = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [optional]
    * @param[in]  language QString [optional]
    */
    void parseIngredients(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [required]
    */
    void priceBreakdownByIDImage(const double &id);

    /**
    * @param[in]  q QString [required]
    */
    void quickAnswer(const QString &q);

    /**
    * @param[in]  id double [required]
    */
    void recipeNutritionByIDImage(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  show_optional_nutrients bool [optional]
    * @param[in]  show_zero_values bool [optional]
    * @param[in]  show_ingredients bool [optional]
    */
    void recipeNutritionLabelImage(const double &id, const ::OpenAPI::OptionalParam<bool> &show_optional_nutrients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_zero_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_ingredients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id double [required]
    * @param[in]  default_css bool [optional]
    * @param[in]  show_optional_nutrients bool [optional]
    * @param[in]  show_zero_values bool [optional]
    * @param[in]  show_ingredients bool [optional]
    */
    void recipeNutritionLabelWidget(const double &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_optional_nutrients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_zero_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_ingredients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id double [required]
    * @param[in]  normalize bool [optional]
    * @param[in]  rgb QString [optional]
    */
    void recipeTasteByIDImage(const double &id, const ::OpenAPI::OptionalParam<bool> &normalize = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &rgb = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  cuisine QString [optional]
    * @param[in]  exclude_cuisine QString [optional]
    * @param[in]  diet QString [optional]
    * @param[in]  intolerances QString [optional]
    * @param[in]  equipment QString [optional]
    * @param[in]  include_ingredients QString [optional]
    * @param[in]  exclude_ingredients QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  instructions_required bool [optional]
    * @param[in]  fill_ingredients bool [optional]
    * @param[in]  add_recipe_information bool [optional]
    * @param[in]  add_recipe_nutrition bool [optional]
    * @param[in]  author QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  recipe_box_id double [optional]
    * @param[in]  title_match QString [optional]
    * @param[in]  max_ready_time double [optional]
    * @param[in]  min_servings double [optional]
    * @param[in]  max_servings double [optional]
    * @param[in]  ignore_pantry bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  min_carbs double [optional]
    * @param[in]  max_carbs double [optional]
    * @param[in]  min_protein double [optional]
    * @param[in]  max_protein double [optional]
    * @param[in]  min_calories double [optional]
    * @param[in]  max_calories double [optional]
    * @param[in]  min_fat double [optional]
    * @param[in]  max_fat double [optional]
    * @param[in]  min_alcohol double [optional]
    * @param[in]  max_alcohol double [optional]
    * @param[in]  min_caffeine double [optional]
    * @param[in]  max_caffeine double [optional]
    * @param[in]  min_copper double [optional]
    * @param[in]  max_copper double [optional]
    * @param[in]  min_calcium double [optional]
    * @param[in]  max_calcium double [optional]
    * @param[in]  min_choline double [optional]
    * @param[in]  max_choline double [optional]
    * @param[in]  min_cholesterol double [optional]
    * @param[in]  max_cholesterol double [optional]
    * @param[in]  min_fluoride double [optional]
    * @param[in]  max_fluoride double [optional]
    * @param[in]  min_saturated_fat double [optional]
    * @param[in]  max_saturated_fat double [optional]
    * @param[in]  min_vitamin_a double [optional]
    * @param[in]  max_vitamin_a double [optional]
    * @param[in]  min_vitamin_c double [optional]
    * @param[in]  max_vitamin_c double [optional]
    * @param[in]  min_vitamin_d double [optional]
    * @param[in]  max_vitamin_d double [optional]
    * @param[in]  min_vitamin_e double [optional]
    * @param[in]  max_vitamin_e double [optional]
    * @param[in]  min_vitamin_k double [optional]
    * @param[in]  max_vitamin_k double [optional]
    * @param[in]  min_vitamin_b1 double [optional]
    * @param[in]  max_vitamin_b1 double [optional]
    * @param[in]  min_vitamin_b2 double [optional]
    * @param[in]  max_vitamin_b2 double [optional]
    * @param[in]  min_vitamin_b5 double [optional]
    * @param[in]  max_vitamin_b5 double [optional]
    * @param[in]  min_vitamin_b3 double [optional]
    * @param[in]  max_vitamin_b3 double [optional]
    * @param[in]  min_vitamin_b6 double [optional]
    * @param[in]  max_vitamin_b6 double [optional]
    * @param[in]  min_vitamin_b12 double [optional]
    * @param[in]  max_vitamin_b12 double [optional]
    * @param[in]  min_fiber double [optional]
    * @param[in]  max_fiber double [optional]
    * @param[in]  min_folate double [optional]
    * @param[in]  max_folate double [optional]
    * @param[in]  min_folic_acid double [optional]
    * @param[in]  max_folic_acid double [optional]
    * @param[in]  min_iodine double [optional]
    * @param[in]  max_iodine double [optional]
    * @param[in]  min_iron double [optional]
    * @param[in]  max_iron double [optional]
    * @param[in]  min_magnesium double [optional]
    * @param[in]  max_magnesium double [optional]
    * @param[in]  min_manganese double [optional]
    * @param[in]  max_manganese double [optional]
    * @param[in]  min_phosphorus double [optional]
    * @param[in]  max_phosphorus double [optional]
    * @param[in]  min_potassium double [optional]
    * @param[in]  max_potassium double [optional]
    * @param[in]  min_selenium double [optional]
    * @param[in]  max_selenium double [optional]
    * @param[in]  min_sodium double [optional]
    * @param[in]  max_sodium double [optional]
    * @param[in]  min_sugar double [optional]
    * @param[in]  max_sugar double [optional]
    * @param[in]  min_zinc double [optional]
    * @param[in]  max_zinc double [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    * @param[in]  limit_license bool [optional]
    */
    void searchRecipes(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cuisine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_cuisine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &diet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intolerances = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &equipment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &instructions_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fill_ingredients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_recipe_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_recipe_nutrition = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &recipe_box_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &title_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &max_ready_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_servings = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_servings = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &ignore_pantry = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_alcohol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_alcohol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_copper = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_copper = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_calcium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calcium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_choline = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_choline = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_cholesterol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_cholesterol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fluoride = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fluoride = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_saturated_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_saturated_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_a = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_a = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_c = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_c = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_d = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_d = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_e = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_e = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_k = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_k = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b1 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b1 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b2 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b2 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b5 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b5 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b3 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b3 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b6 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b6 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b12 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b12 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fiber = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fiber = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_folate = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_folate = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_folic_acid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_folic_acid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_iodine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_iodine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_iron = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_iron = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_magnesium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_magnesium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_manganese = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_manganese = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_phosphorus = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_phosphorus = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_potassium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_potassium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_selenium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_selenium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_sodium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_sodium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_sugar = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_sugar = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_zinc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_zinc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &limit_license = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ingredients QString [optional]
    * @param[in]  number qint32 [optional]
    * @param[in]  limit_license bool [optional]
    * @param[in]  ranking double [optional]
    * @param[in]  ignore_pantry bool [optional]
    */
    void searchRecipesByIngredients(const ::OpenAPI::OptionalParam<QString> &ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &limit_license = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &ranking = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &ignore_pantry = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  min_carbs double [optional]
    * @param[in]  max_carbs double [optional]
    * @param[in]  min_protein double [optional]
    * @param[in]  max_protein double [optional]
    * @param[in]  min_calories double [optional]
    * @param[in]  max_calories double [optional]
    * @param[in]  min_fat double [optional]
    * @param[in]  max_fat double [optional]
    * @param[in]  min_alcohol double [optional]
    * @param[in]  max_alcohol double [optional]
    * @param[in]  min_caffeine double [optional]
    * @param[in]  max_caffeine double [optional]
    * @param[in]  min_copper double [optional]
    * @param[in]  max_copper double [optional]
    * @param[in]  min_calcium double [optional]
    * @param[in]  max_calcium double [optional]
    * @param[in]  min_choline double [optional]
    * @param[in]  max_choline double [optional]
    * @param[in]  min_cholesterol double [optional]
    * @param[in]  max_cholesterol double [optional]
    * @param[in]  min_fluoride double [optional]
    * @param[in]  max_fluoride double [optional]
    * @param[in]  min_saturated_fat double [optional]
    * @param[in]  max_saturated_fat double [optional]
    * @param[in]  min_vitamin_a double [optional]
    * @param[in]  max_vitamin_a double [optional]
    * @param[in]  min_vitamin_c double [optional]
    * @param[in]  max_vitamin_c double [optional]
    * @param[in]  min_vitamin_d double [optional]
    * @param[in]  max_vitamin_d double [optional]
    * @param[in]  min_vitamin_e double [optional]
    * @param[in]  max_vitamin_e double [optional]
    * @param[in]  min_vitamin_k double [optional]
    * @param[in]  max_vitamin_k double [optional]
    * @param[in]  min_vitamin_b1 double [optional]
    * @param[in]  max_vitamin_b1 double [optional]
    * @param[in]  min_vitamin_b2 double [optional]
    * @param[in]  max_vitamin_b2 double [optional]
    * @param[in]  min_vitamin_b5 double [optional]
    * @param[in]  max_vitamin_b5 double [optional]
    * @param[in]  min_vitamin_b3 double [optional]
    * @param[in]  max_vitamin_b3 double [optional]
    * @param[in]  min_vitamin_b6 double [optional]
    * @param[in]  max_vitamin_b6 double [optional]
    * @param[in]  min_vitamin_b12 double [optional]
    * @param[in]  max_vitamin_b12 double [optional]
    * @param[in]  min_fiber double [optional]
    * @param[in]  max_fiber double [optional]
    * @param[in]  min_folate double [optional]
    * @param[in]  max_folate double [optional]
    * @param[in]  min_folic_acid double [optional]
    * @param[in]  max_folic_acid double [optional]
    * @param[in]  min_iodine double [optional]
    * @param[in]  max_iodine double [optional]
    * @param[in]  min_iron double [optional]
    * @param[in]  max_iron double [optional]
    * @param[in]  min_magnesium double [optional]
    * @param[in]  max_magnesium double [optional]
    * @param[in]  min_manganese double [optional]
    * @param[in]  max_manganese double [optional]
    * @param[in]  min_phosphorus double [optional]
    * @param[in]  max_phosphorus double [optional]
    * @param[in]  min_potassium double [optional]
    * @param[in]  max_potassium double [optional]
    * @param[in]  min_selenium double [optional]
    * @param[in]  max_selenium double [optional]
    * @param[in]  min_sodium double [optional]
    * @param[in]  max_sodium double [optional]
    * @param[in]  min_sugar double [optional]
    * @param[in]  max_sugar double [optional]
    * @param[in]  min_zinc double [optional]
    * @param[in]  max_zinc double [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    * @param[in]  random bool [optional]
    * @param[in]  limit_license bool [optional]
    */
    void searchRecipesByNutrients(const ::OpenAPI::OptionalParam<double> &min_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_alcohol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_alcohol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_copper = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_copper = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_calcium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calcium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_choline = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_choline = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_cholesterol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_cholesterol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fluoride = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fluoride = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_saturated_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_saturated_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_a = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_a = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_c = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_c = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_d = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_d = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_e = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_e = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_k = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_k = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b1 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b1 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b2 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b2 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b5 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b5 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b3 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b3 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b6 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b6 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b12 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b12 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fiber = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fiber = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_folate = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_folate = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_folic_acid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_folic_acid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_iodine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_iodine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_iron = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_iron = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_magnesium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_magnesium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_manganese = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_manganese = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_phosphorus = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_phosphorus = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_potassium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_potassium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_selenium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_selenium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_sodium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_sodium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_sugar = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_sugar = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_zinc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_zinc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &random = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &limit_license = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    void summarizeRecipe(const qint32 &id);

    /**
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    */
    void visualizeEquipment(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  language QString [optional]
    */
    void visualizePriceBreakdown(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  default_css bool [optional]
    */
    void visualizeRecipeEquipmentByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  default_css bool [optional]
    * @param[in]  measure QString [optional]
    */
    void visualizeRecipeIngredientsByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &measure = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  language QString [optional]
    */
    void visualizeRecipeNutrition(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  default_css bool [optional]
    * @param[in]  accept QString [optional]
    */
    void visualizeRecipeNutritionByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  default_css bool [optional]
    */
    void visualizeRecipePriceBreakdownByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  language QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  normalize bool [optional]
    * @param[in]  rgb QString [optional]
    */
    void visualizeRecipeTaste(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &normalize = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &rgb = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  normalize bool [optional]
    * @param[in]  rgb QString [optional]
    */
    void visualizeRecipeTasteByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &normalize = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &rgb = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeARecipeSearchQueryCallback(OAIHttpRequestWorker *worker);
    void analyzeRecipeInstructionsCallback(OAIHttpRequestWorker *worker);
    void autocompleteRecipeSearchCallback(OAIHttpRequestWorker *worker);
    void classifyCuisineCallback(OAIHttpRequestWorker *worker);
    void computeGlycemicLoadCallback(OAIHttpRequestWorker *worker);
    void convertAmountsCallback(OAIHttpRequestWorker *worker);
    void createRecipeCardCallback(OAIHttpRequestWorker *worker);
    void equipmentByIDImageCallback(OAIHttpRequestWorker *worker);
    void extractRecipeFromWebsiteCallback(OAIHttpRequestWorker *worker);
    void getAnalyzedRecipeInstructionsCallback(OAIHttpRequestWorker *worker);
    void getRandomRecipesCallback(OAIHttpRequestWorker *worker);
    void getRecipeEquipmentByIDCallback(OAIHttpRequestWorker *worker);
    void getRecipeInformationCallback(OAIHttpRequestWorker *worker);
    void getRecipeInformationBulkCallback(OAIHttpRequestWorker *worker);
    void getRecipeIngredientsByIDCallback(OAIHttpRequestWorker *worker);
    void getRecipeNutritionWidgetByIDCallback(OAIHttpRequestWorker *worker);
    void getRecipePriceBreakdownByIDCallback(OAIHttpRequestWorker *worker);
    void getRecipeTasteByIDCallback(OAIHttpRequestWorker *worker);
    void getSimilarRecipesCallback(OAIHttpRequestWorker *worker);
    void guessNutritionByDishNameCallback(OAIHttpRequestWorker *worker);
    void ingredientsByIDImageCallback(OAIHttpRequestWorker *worker);
    void parseIngredientsCallback(OAIHttpRequestWorker *worker);
    void priceBreakdownByIDImageCallback(OAIHttpRequestWorker *worker);
    void quickAnswerCallback(OAIHttpRequestWorker *worker);
    void recipeNutritionByIDImageCallback(OAIHttpRequestWorker *worker);
    void recipeNutritionLabelImageCallback(OAIHttpRequestWorker *worker);
    void recipeNutritionLabelWidgetCallback(OAIHttpRequestWorker *worker);
    void recipeTasteByIDImageCallback(OAIHttpRequestWorker *worker);
    void searchRecipesCallback(OAIHttpRequestWorker *worker);
    void searchRecipesByIngredientsCallback(OAIHttpRequestWorker *worker);
    void searchRecipesByNutrientsCallback(OAIHttpRequestWorker *worker);
    void summarizeRecipeCallback(OAIHttpRequestWorker *worker);
    void visualizeEquipmentCallback(OAIHttpRequestWorker *worker);
    void visualizePriceBreakdownCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipeEquipmentByIDCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipeIngredientsByIDCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipeNutritionCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipeNutritionByIDCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipePriceBreakdownByIDCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipeTasteCallback(OAIHttpRequestWorker *worker);
    void visualizeRecipeTasteByIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeARecipeSearchQuerySignal(OAIAnalyzeARecipeSearchQuery_200_response summary);
    void analyzeRecipeInstructionsSignal(OAIAnalyzeRecipeInstructions_200_response summary);
    void autocompleteRecipeSearchSignal(QSet<OAIAutocompleteRecipeSearch_200_response_inner> summary);
    void classifyCuisineSignal(OAIClassifyCuisine_200_response summary);
    void computeGlycemicLoadSignal(OAIComputeGlycemicLoad_200_response summary);
    void convertAmountsSignal(OAIConvertAmounts_200_response summary);
    void createRecipeCardSignal(OAICreateRecipeCard_200_response summary);
    void equipmentByIDImageSignal(OAIObject summary);
    void extractRecipeFromWebsiteSignal(OAIGetRecipeInformation_200_response summary);
    void getAnalyzedRecipeInstructionsSignal(OAIGetAnalyzedRecipeInstructions_200_response summary);
    void getRandomRecipesSignal(OAIGetRandomRecipes_200_response summary);
    void getRecipeEquipmentByIDSignal(OAIGetRecipeEquipmentByID_200_response summary);
    void getRecipeInformationSignal(OAIGetRecipeInformation_200_response summary);
    void getRecipeInformationBulkSignal(QSet<OAIGetRecipeInformationBulk_200_response_inner> summary);
    void getRecipeIngredientsByIDSignal(OAIGetRecipeIngredientsByID_200_response summary);
    void getRecipeNutritionWidgetByIDSignal(OAIGetRecipeNutritionWidgetByID_200_response summary);
    void getRecipePriceBreakdownByIDSignal(OAIGetRecipePriceBreakdownByID_200_response summary);
    void getRecipeTasteByIDSignal(OAIGetRecipeTasteByID_200_response summary);
    void getSimilarRecipesSignal(QSet<OAIGetSimilarRecipes_200_response_inner> summary);
    void guessNutritionByDishNameSignal(OAIGuessNutritionByDishName_200_response summary);
    void ingredientsByIDImageSignal(OAIObject summary);
    void parseIngredientsSignal(QSet<OAIParseIngredients_200_response_inner> summary);
    void priceBreakdownByIDImageSignal(OAIObject summary);
    void quickAnswerSignal(OAIQuickAnswer_200_response summary);
    void recipeNutritionByIDImageSignal(OAIObject summary);
    void recipeNutritionLabelImageSignal(OAIObject summary);
    void recipeNutritionLabelWidgetSignal(QString summary);
    void recipeTasteByIDImageSignal(OAIObject summary);
    void searchRecipesSignal(OAISearchRecipes_200_response summary);
    void searchRecipesByIngredientsSignal(QSet<OAISearchRecipesByIngredients_200_response_inner> summary);
    void searchRecipesByNutrientsSignal(QSet<OAISearchRecipesByNutrients_200_response_inner> summary);
    void summarizeRecipeSignal(OAISummarizeRecipe_200_response summary);
    void visualizeEquipmentSignal(QString summary);
    void visualizePriceBreakdownSignal(QString summary);
    void visualizeRecipeEquipmentByIDSignal(QString summary);
    void visualizeRecipeIngredientsByIDSignal(QString summary);
    void visualizeRecipeNutritionSignal(QString summary);
    void visualizeRecipeNutritionByIDSignal(QString summary);
    void visualizeRecipePriceBreakdownByIDSignal(QString summary);
    void visualizeRecipeTasteSignal(QString summary);
    void visualizeRecipeTasteByIDSignal(QString summary);

    void analyzeARecipeSearchQuerySignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeARecipeSearchQuery_200_response summary);
    void analyzeRecipeInstructionsSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeRecipeInstructions_200_response summary);
    void autocompleteRecipeSearchSignalFull(OAIHttpRequestWorker *worker, QSet<OAIAutocompleteRecipeSearch_200_response_inner> summary);
    void classifyCuisineSignalFull(OAIHttpRequestWorker *worker, OAIClassifyCuisine_200_response summary);
    void computeGlycemicLoadSignalFull(OAIHttpRequestWorker *worker, OAIComputeGlycemicLoad_200_response summary);
    void convertAmountsSignalFull(OAIHttpRequestWorker *worker, OAIConvertAmounts_200_response summary);
    void createRecipeCardSignalFull(OAIHttpRequestWorker *worker, OAICreateRecipeCard_200_response summary);
    void equipmentByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void extractRecipeFromWebsiteSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipeInformation_200_response summary);
    void getAnalyzedRecipeInstructionsSignalFull(OAIHttpRequestWorker *worker, OAIGetAnalyzedRecipeInstructions_200_response summary);
    void getRandomRecipesSignalFull(OAIHttpRequestWorker *worker, OAIGetRandomRecipes_200_response summary);
    void getRecipeEquipmentByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipeEquipmentByID_200_response summary);
    void getRecipeInformationSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipeInformation_200_response summary);
    void getRecipeInformationBulkSignalFull(OAIHttpRequestWorker *worker, QSet<OAIGetRecipeInformationBulk_200_response_inner> summary);
    void getRecipeIngredientsByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipeIngredientsByID_200_response summary);
    void getRecipeNutritionWidgetByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipeNutritionWidgetByID_200_response summary);
    void getRecipePriceBreakdownByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipePriceBreakdownByID_200_response summary);
    void getRecipeTasteByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetRecipeTasteByID_200_response summary);
    void getSimilarRecipesSignalFull(OAIHttpRequestWorker *worker, QSet<OAIGetSimilarRecipes_200_response_inner> summary);
    void guessNutritionByDishNameSignalFull(OAIHttpRequestWorker *worker, OAIGuessNutritionByDishName_200_response summary);
    void ingredientsByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void parseIngredientsSignalFull(OAIHttpRequestWorker *worker, QSet<OAIParseIngredients_200_response_inner> summary);
    void priceBreakdownByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void quickAnswerSignalFull(OAIHttpRequestWorker *worker, OAIQuickAnswer_200_response summary);
    void recipeNutritionByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void recipeNutritionLabelImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void recipeNutritionLabelWidgetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void recipeTasteByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void searchRecipesSignalFull(OAIHttpRequestWorker *worker, OAISearchRecipes_200_response summary);
    void searchRecipesByIngredientsSignalFull(OAIHttpRequestWorker *worker, QSet<OAISearchRecipesByIngredients_200_response_inner> summary);
    void searchRecipesByNutrientsSignalFull(OAIHttpRequestWorker *worker, QSet<OAISearchRecipesByNutrients_200_response_inner> summary);
    void summarizeRecipeSignalFull(OAIHttpRequestWorker *worker, OAISummarizeRecipe_200_response summary);
    void visualizeEquipmentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizePriceBreakdownSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipeEquipmentByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipeIngredientsByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipeNutritionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipeNutritionByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipePriceBreakdownByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipeTasteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void visualizeRecipeTasteByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use analyzeARecipeSearchQuerySignalError() instead")
    void analyzeARecipeSearchQuerySignalE(OAIAnalyzeARecipeSearchQuery_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeARecipeSearchQuerySignalError(OAIAnalyzeARecipeSearchQuery_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeRecipeInstructionsSignalError() instead")
    void analyzeRecipeInstructionsSignalE(OAIAnalyzeRecipeInstructions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeRecipeInstructionsSignalError(OAIAnalyzeRecipeInstructions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autocompleteRecipeSearchSignalError() instead")
    void autocompleteRecipeSearchSignalE(QSet<OAIAutocompleteRecipeSearch_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteRecipeSearchSignalError(QSet<OAIAutocompleteRecipeSearch_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyCuisineSignalError() instead")
    void classifyCuisineSignalE(OAIClassifyCuisine_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyCuisineSignalError(OAIClassifyCuisine_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeGlycemicLoadSignalError() instead")
    void computeGlycemicLoadSignalE(OAIComputeGlycemicLoad_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeGlycemicLoadSignalError(OAIComputeGlycemicLoad_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertAmountsSignalError() instead")
    void convertAmountsSignalE(OAIConvertAmounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertAmountsSignalError(OAIConvertAmounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRecipeCardSignalError() instead")
    void createRecipeCardSignalE(OAICreateRecipeCard_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRecipeCardSignalError(OAICreateRecipeCard_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use equipmentByIDImageSignalError() instead")
    void equipmentByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void equipmentByIDImageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractRecipeFromWebsiteSignalError() instead")
    void extractRecipeFromWebsiteSignalE(OAIGetRecipeInformation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractRecipeFromWebsiteSignalError(OAIGetRecipeInformation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzedRecipeInstructionsSignalError() instead")
    void getAnalyzedRecipeInstructionsSignalE(OAIGetAnalyzedRecipeInstructions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzedRecipeInstructionsSignalError(OAIGetAnalyzedRecipeInstructions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRandomRecipesSignalError() instead")
    void getRandomRecipesSignalE(OAIGetRandomRecipes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRandomRecipesSignalError(OAIGetRandomRecipes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeEquipmentByIDSignalError() instead")
    void getRecipeEquipmentByIDSignalE(OAIGetRecipeEquipmentByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeEquipmentByIDSignalError(OAIGetRecipeEquipmentByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeInformationSignalError() instead")
    void getRecipeInformationSignalE(OAIGetRecipeInformation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeInformationSignalError(OAIGetRecipeInformation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeInformationBulkSignalError() instead")
    void getRecipeInformationBulkSignalE(QSet<OAIGetRecipeInformationBulk_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeInformationBulkSignalError(QSet<OAIGetRecipeInformationBulk_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeIngredientsByIDSignalError() instead")
    void getRecipeIngredientsByIDSignalE(OAIGetRecipeIngredientsByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeIngredientsByIDSignalError(OAIGetRecipeIngredientsByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeNutritionWidgetByIDSignalError() instead")
    void getRecipeNutritionWidgetByIDSignalE(OAIGetRecipeNutritionWidgetByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeNutritionWidgetByIDSignalError(OAIGetRecipeNutritionWidgetByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipePriceBreakdownByIDSignalError() instead")
    void getRecipePriceBreakdownByIDSignalE(OAIGetRecipePriceBreakdownByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipePriceBreakdownByIDSignalError(OAIGetRecipePriceBreakdownByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeTasteByIDSignalError() instead")
    void getRecipeTasteByIDSignalE(OAIGetRecipeTasteByID_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeTasteByIDSignalError(OAIGetRecipeTasteByID_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarRecipesSignalError() instead")
    void getSimilarRecipesSignalE(QSet<OAIGetSimilarRecipes_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarRecipesSignalError(QSet<OAIGetSimilarRecipes_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use guessNutritionByDishNameSignalError() instead")
    void guessNutritionByDishNameSignalE(OAIGuessNutritionByDishName_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void guessNutritionByDishNameSignalError(OAIGuessNutritionByDishName_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ingredientsByIDImageSignalError() instead")
    void ingredientsByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ingredientsByIDImageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseIngredientsSignalError() instead")
    void parseIngredientsSignalE(QSet<OAIParseIngredients_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseIngredientsSignalError(QSet<OAIParseIngredients_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceBreakdownByIDImageSignalError() instead")
    void priceBreakdownByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void priceBreakdownByIDImageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quickAnswerSignalError() instead")
    void quickAnswerSignalE(OAIQuickAnswer_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quickAnswerSignalError(OAIQuickAnswer_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeNutritionByIDImageSignalError() instead")
    void recipeNutritionByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeNutritionByIDImageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeNutritionLabelImageSignalError() instead")
    void recipeNutritionLabelImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeNutritionLabelImageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeNutritionLabelWidgetSignalError() instead")
    void recipeNutritionLabelWidgetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeNutritionLabelWidgetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeTasteByIDImageSignalError() instead")
    void recipeTasteByIDImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeTasteByIDImageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesSignalError() instead")
    void searchRecipesSignalE(OAISearchRecipes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesSignalError(OAISearchRecipes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesByIngredientsSignalError() instead")
    void searchRecipesByIngredientsSignalE(QSet<OAISearchRecipesByIngredients_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesByIngredientsSignalError(QSet<OAISearchRecipesByIngredients_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesByNutrientsSignalError() instead")
    void searchRecipesByNutrientsSignalE(QSet<OAISearchRecipesByNutrients_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesByNutrientsSignalError(QSet<OAISearchRecipesByNutrients_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use summarizeRecipeSignalError() instead")
    void summarizeRecipeSignalE(OAISummarizeRecipe_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void summarizeRecipeSignalError(OAISummarizeRecipe_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeEquipmentSignalError() instead")
    void visualizeEquipmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeEquipmentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizePriceBreakdownSignalError() instead")
    void visualizePriceBreakdownSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizePriceBreakdownSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeEquipmentByIDSignalError() instead")
    void visualizeRecipeEquipmentByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeEquipmentByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeIngredientsByIDSignalError() instead")
    void visualizeRecipeIngredientsByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeIngredientsByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeNutritionSignalError() instead")
    void visualizeRecipeNutritionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeNutritionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeNutritionByIDSignalError() instead")
    void visualizeRecipeNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeNutritionByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipePriceBreakdownByIDSignalError() instead")
    void visualizeRecipePriceBreakdownByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipePriceBreakdownByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeTasteSignalError() instead")
    void visualizeRecipeTasteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeTasteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeTasteByIDSignalError() instead")
    void visualizeRecipeTasteByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeTasteByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeARecipeSearchQuerySignalErrorFull() instead")
    void analyzeARecipeSearchQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeARecipeSearchQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeRecipeInstructionsSignalErrorFull() instead")
    void analyzeRecipeInstructionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeRecipeInstructionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use autocompleteRecipeSearchSignalErrorFull() instead")
    void autocompleteRecipeSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteRecipeSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyCuisineSignalErrorFull() instead")
    void classifyCuisineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyCuisineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeGlycemicLoadSignalErrorFull() instead")
    void computeGlycemicLoadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeGlycemicLoadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertAmountsSignalErrorFull() instead")
    void convertAmountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertAmountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRecipeCardSignalErrorFull() instead")
    void createRecipeCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRecipeCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use equipmentByIDImageSignalErrorFull() instead")
    void equipmentByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void equipmentByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractRecipeFromWebsiteSignalErrorFull() instead")
    void extractRecipeFromWebsiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractRecipeFromWebsiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalyzedRecipeInstructionsSignalErrorFull() instead")
    void getAnalyzedRecipeInstructionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalyzedRecipeInstructionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRandomRecipesSignalErrorFull() instead")
    void getRandomRecipesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRandomRecipesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeEquipmentByIDSignalErrorFull() instead")
    void getRecipeEquipmentByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeEquipmentByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeInformationSignalErrorFull() instead")
    void getRecipeInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeInformationBulkSignalErrorFull() instead")
    void getRecipeInformationBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeInformationBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeIngredientsByIDSignalErrorFull() instead")
    void getRecipeIngredientsByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeIngredientsByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeNutritionWidgetByIDSignalErrorFull() instead")
    void getRecipeNutritionWidgetByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeNutritionWidgetByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipePriceBreakdownByIDSignalErrorFull() instead")
    void getRecipePriceBreakdownByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipePriceBreakdownByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecipeTasteByIDSignalErrorFull() instead")
    void getRecipeTasteByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecipeTasteByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarRecipesSignalErrorFull() instead")
    void getSimilarRecipesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarRecipesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use guessNutritionByDishNameSignalErrorFull() instead")
    void guessNutritionByDishNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void guessNutritionByDishNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ingredientsByIDImageSignalErrorFull() instead")
    void ingredientsByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ingredientsByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseIngredientsSignalErrorFull() instead")
    void parseIngredientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseIngredientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use priceBreakdownByIDImageSignalErrorFull() instead")
    void priceBreakdownByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void priceBreakdownByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quickAnswerSignalErrorFull() instead")
    void quickAnswerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quickAnswerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeNutritionByIDImageSignalErrorFull() instead")
    void recipeNutritionByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeNutritionByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeNutritionLabelImageSignalErrorFull() instead")
    void recipeNutritionLabelImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeNutritionLabelImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeNutritionLabelWidgetSignalErrorFull() instead")
    void recipeNutritionLabelWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeNutritionLabelWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recipeTasteByIDImageSignalErrorFull() instead")
    void recipeTasteByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recipeTasteByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesSignalErrorFull() instead")
    void searchRecipesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesByIngredientsSignalErrorFull() instead")
    void searchRecipesByIngredientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesByIngredientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesByNutrientsSignalErrorFull() instead")
    void searchRecipesByNutrientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesByNutrientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use summarizeRecipeSignalErrorFull() instead")
    void summarizeRecipeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void summarizeRecipeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeEquipmentSignalErrorFull() instead")
    void visualizeEquipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeEquipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizePriceBreakdownSignalErrorFull() instead")
    void visualizePriceBreakdownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizePriceBreakdownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeEquipmentByIDSignalErrorFull() instead")
    void visualizeRecipeEquipmentByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeEquipmentByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeIngredientsByIDSignalErrorFull() instead")
    void visualizeRecipeIngredientsByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeIngredientsByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeNutritionSignalErrorFull() instead")
    void visualizeRecipeNutritionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeNutritionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeNutritionByIDSignalErrorFull() instead")
    void visualizeRecipeNutritionByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeNutritionByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipePriceBreakdownByIDSignalErrorFull() instead")
    void visualizeRecipePriceBreakdownByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipePriceBreakdownByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeTasteSignalErrorFull() instead")
    void visualizeRecipeTasteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeTasteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeRecipeTasteByIDSignalErrorFull() instead")
    void visualizeRecipeTasteByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeRecipeTasteByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
