/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWineApi_H
#define OAI_OAIWineApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDishPairingForWine_200_response.h"
#include "OAIGetWineDescription_200_response.h"
#include "OAIGetWinePairing_200_response.h"
#include "OAIGetWineRecommendation_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWineApi : public QObject {
    Q_OBJECT

public:
    OAIWineApi(const int timeOut = 0);
    ~OAIWineApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  wine QString [required]
    */
    void getDishPairingForWine(const QString &wine);

    /**
    * @param[in]  wine QString [required]
    */
    void getWineDescription(const QString &wine);

    /**
    * @param[in]  food QString [required]
    * @param[in]  max_price double [optional]
    */
    void getWinePairing(const QString &food, const ::OpenAPI::OptionalParam<double> &max_price = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  wine QString [required]
    * @param[in]  max_price double [optional]
    * @param[in]  min_rating double [optional]
    * @param[in]  number double [optional]
    */
    void getWineRecommendation(const QString &wine, const ::OpenAPI::OptionalParam<double> &max_price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &number = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDishPairingForWineCallback(OAIHttpRequestWorker *worker);
    void getWineDescriptionCallback(OAIHttpRequestWorker *worker);
    void getWinePairingCallback(OAIHttpRequestWorker *worker);
    void getWineRecommendationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDishPairingForWineSignal(OAIGetDishPairingForWine_200_response summary);
    void getWineDescriptionSignal(OAIGetWineDescription_200_response summary);
    void getWinePairingSignal(OAIGetWinePairing_200_response summary);
    void getWineRecommendationSignal(OAIGetWineRecommendation_200_response summary);

    void getDishPairingForWineSignalFull(OAIHttpRequestWorker *worker, OAIGetDishPairingForWine_200_response summary);
    void getWineDescriptionSignalFull(OAIHttpRequestWorker *worker, OAIGetWineDescription_200_response summary);
    void getWinePairingSignalFull(OAIHttpRequestWorker *worker, OAIGetWinePairing_200_response summary);
    void getWineRecommendationSignalFull(OAIHttpRequestWorker *worker, OAIGetWineRecommendation_200_response summary);

    Q_DECL_DEPRECATED_X("Use getDishPairingForWineSignalError() instead")
    void getDishPairingForWineSignalE(OAIGetDishPairingForWine_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDishPairingForWineSignalError(OAIGetDishPairingForWine_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWineDescriptionSignalError() instead")
    void getWineDescriptionSignalE(OAIGetWineDescription_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWineDescriptionSignalError(OAIGetWineDescription_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWinePairingSignalError() instead")
    void getWinePairingSignalE(OAIGetWinePairing_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWinePairingSignalError(OAIGetWinePairing_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWineRecommendationSignalError() instead")
    void getWineRecommendationSignalE(OAIGetWineRecommendation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWineRecommendationSignalError(OAIGetWineRecommendation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDishPairingForWineSignalErrorFull() instead")
    void getDishPairingForWineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDishPairingForWineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWineDescriptionSignalErrorFull() instead")
    void getWineDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWineDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWinePairingSignalErrorFull() instead")
    void getWinePairingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWinePairingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWineRecommendationSignalErrorFull() instead")
    void getWineRecommendationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWineRecommendationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
