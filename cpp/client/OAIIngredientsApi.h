/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIngredientsApi_H
#define OAI_OAIIngredientsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutocompleteIngredientSearch_200_response_inner.h"
#include "OAIComputeIngredientAmount_200_response.h"
#include "OAIGetIngredientInformation_200_response.h"
#include "OAIGetIngredientSubstitutes_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAIIngredientSearch_200_response.h"
#include "OAIMapIngredientsToGroceryProducts_200_response_inner.h"
#include "OAIMapIngredientsToGroceryProducts_request.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIngredientsApi : public QObject {
    Q_OBJECT

public:
    OAIIngredientsApi(const int timeOut = 0);
    ~OAIIngredientsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  number qint32 [optional]
    * @param[in]  meta_information bool [optional]
    * @param[in]  intolerances QString [optional]
    * @param[in]  language QString [optional]
    */
    void autocompleteIngredientSearch(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &meta_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &intolerances = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [required]
    * @param[in]  nutrient QString [required]
    * @param[in]  target double [required]
    * @param[in]  unit QString [optional]
    */
    void computeIngredientAmount(const double &id, const QString &nutrient, const double &target, const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  amount double [optional]
    * @param[in]  unit QString [optional]
    */
    void getIngredientInformation(const qint32 &id, const ::OpenAPI::OptionalParam<double> &amount = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ingredient_name QString [required]
    */
    void getIngredientSubstitutes(const QString &ingredient_name);

    /**
    * @param[in]  id qint32 [required]
    */
    void getIngredientSubstitutesByID(const qint32 &id);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  add_children bool [optional]
    * @param[in]  min_protein_percent double [optional]
    * @param[in]  max_protein_percent double [optional]
    * @param[in]  min_fat_percent double [optional]
    * @param[in]  max_fat_percent double [optional]
    * @param[in]  min_carbs_percent double [optional]
    * @param[in]  max_carbs_percent double [optional]
    * @param[in]  meta_information bool [optional]
    * @param[in]  intolerances QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    * @param[in]  language QString [optional]
    */
    void ingredientSearch(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &add_children = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &min_protein_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_carbs_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &meta_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &intolerances = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [required]
    * @param[in]  measure QString [optional]
    */
    void ingredientsByIDImage(const double &id, const ::OpenAPI::OptionalParam<QString> &measure = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_map_ingredients_to_grocery_products_request OAIMapIngredientsToGroceryProducts_request [required]
    */
    void mapIngredientsToGroceryProducts(const OAIMapIngredientsToGroceryProducts_request &oai_map_ingredients_to_grocery_products_request);

    /**
    * @param[in]  ingredient_list QString [required]
    * @param[in]  servings double [required]
    * @param[in]  language QString [optional]
    * @param[in]  measure QString [optional]
    * @param[in]  view QString [optional]
    * @param[in]  default_css bool [optional]
    * @param[in]  show_backlink bool [optional]
    */
    void visualizeIngredients(const QString &ingredient_list, const double &servings, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &measure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_backlink = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autocompleteIngredientSearchCallback(OAIHttpRequestWorker *worker);
    void computeIngredientAmountCallback(OAIHttpRequestWorker *worker);
    void getIngredientInformationCallback(OAIHttpRequestWorker *worker);
    void getIngredientSubstitutesCallback(OAIHttpRequestWorker *worker);
    void getIngredientSubstitutesByIDCallback(OAIHttpRequestWorker *worker);
    void ingredientSearchCallback(OAIHttpRequestWorker *worker);
    void ingredientsByIDImageCallback(OAIHttpRequestWorker *worker);
    void mapIngredientsToGroceryProductsCallback(OAIHttpRequestWorker *worker);
    void visualizeIngredientsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autocompleteIngredientSearchSignal(QSet<OAIAutocompleteIngredientSearch_200_response_inner> summary);
    void computeIngredientAmountSignal(OAIComputeIngredientAmount_200_response summary);
    void getIngredientInformationSignal(OAIGetIngredientInformation_200_response summary);
    void getIngredientSubstitutesSignal(OAIGetIngredientSubstitutes_200_response summary);
    void getIngredientSubstitutesByIDSignal(OAIGetIngredientSubstitutes_200_response summary);
    void ingredientSearchSignal(OAIIngredientSearch_200_response summary);
    void ingredientsByIDImageSignal(OAIHttpFileElement summary);
    void mapIngredientsToGroceryProductsSignal(QSet<OAIMapIngredientsToGroceryProducts_200_response_inner> summary);
    void visualizeIngredientsSignal(QString summary);

    void autocompleteIngredientSearchSignalFull(OAIHttpRequestWorker *worker, QSet<OAIAutocompleteIngredientSearch_200_response_inner> summary);
    void computeIngredientAmountSignalFull(OAIHttpRequestWorker *worker, OAIComputeIngredientAmount_200_response summary);
    void getIngredientInformationSignalFull(OAIHttpRequestWorker *worker, OAIGetIngredientInformation_200_response summary);
    void getIngredientSubstitutesSignalFull(OAIHttpRequestWorker *worker, OAIGetIngredientSubstitutes_200_response summary);
    void getIngredientSubstitutesByIDSignalFull(OAIHttpRequestWorker *worker, OAIGetIngredientSubstitutes_200_response summary);
    void ingredientSearchSignalFull(OAIHttpRequestWorker *worker, OAIIngredientSearch_200_response summary);
    void ingredientsByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void mapIngredientsToGroceryProductsSignalFull(OAIHttpRequestWorker *worker, QSet<OAIMapIngredientsToGroceryProducts_200_response_inner> summary);
    void visualizeIngredientsSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use autocompleteIngredientSearchSignalError() instead")
    void autocompleteIngredientSearchSignalE(QSet<OAIAutocompleteIngredientSearch_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteIngredientSearchSignalError(QSet<OAIAutocompleteIngredientSearch_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeIngredientAmountSignalError() instead")
    void computeIngredientAmountSignalE(OAIComputeIngredientAmount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeIngredientAmountSignalError(OAIComputeIngredientAmount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIngredientInformationSignalError() instead")
    void getIngredientInformationSignalE(OAIGetIngredientInformation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIngredientInformationSignalError(OAIGetIngredientInformation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIngredientSubstitutesSignalError() instead")
    void getIngredientSubstitutesSignalE(OAIGetIngredientSubstitutes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIngredientSubstitutesSignalError(OAIGetIngredientSubstitutes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIngredientSubstitutesByIDSignalError() instead")
    void getIngredientSubstitutesByIDSignalE(OAIGetIngredientSubstitutes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIngredientSubstitutesByIDSignalError(OAIGetIngredientSubstitutes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ingredientSearchSignalError() instead")
    void ingredientSearchSignalE(OAIIngredientSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ingredientSearchSignalError(OAIIngredientSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ingredientsByIDImageSignalError() instead")
    void ingredientsByIDImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ingredientsByIDImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapIngredientsToGroceryProductsSignalError() instead")
    void mapIngredientsToGroceryProductsSignalE(QSet<OAIMapIngredientsToGroceryProducts_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mapIngredientsToGroceryProductsSignalError(QSet<OAIMapIngredientsToGroceryProducts_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeIngredientsSignalError() instead")
    void visualizeIngredientsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeIngredientsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autocompleteIngredientSearchSignalErrorFull() instead")
    void autocompleteIngredientSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteIngredientSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use computeIngredientAmountSignalErrorFull() instead")
    void computeIngredientAmountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeIngredientAmountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIngredientInformationSignalErrorFull() instead")
    void getIngredientInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIngredientInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIngredientSubstitutesSignalErrorFull() instead")
    void getIngredientSubstitutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIngredientSubstitutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIngredientSubstitutesByIDSignalErrorFull() instead")
    void getIngredientSubstitutesByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIngredientSubstitutesByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ingredientSearchSignalErrorFull() instead")
    void ingredientSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ingredientSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ingredientsByIDImageSignalErrorFull() instead")
    void ingredientsByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ingredientsByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapIngredientsToGroceryProductsSignalErrorFull() instead")
    void mapIngredientsToGroceryProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapIngredientsToGroceryProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeIngredientsSignalErrorFull() instead")
    void visualizeIngredientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeIngredientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
