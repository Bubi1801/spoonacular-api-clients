/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutocompleteProductSearch_200_response.h"
#include "OAIClassifyGroceryProductBulk_200_response_inner.h"
#include "OAIClassifyGroceryProductBulk_request_inner.h"
#include "OAIClassifyGroceryProduct_200_response.h"
#include "OAIClassifyGroceryProduct_request.h"
#include "OAIGetComparableProducts_200_response.h"
#include "OAIGetProductInformation_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAISearchGroceryProductsByUPC_200_response.h"
#include "OAISearchGroceryProducts_200_response.h"
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [required]
    * @param[in]  number qint32 [optional]
    */
    void autocompleteProductSearch(const QString &query, const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_classify_grocery_product_request OAIClassifyGroceryProduct_request [required]
    * @param[in]  locale QString [optional]
    */
    void classifyGroceryProduct(const OAIClassifyGroceryProduct_request &oai_classify_grocery_product_request, const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_classify_grocery_product_bulk_request_inner QSet<OAIClassifyGroceryProductBulk_request_inner> [required]
    * @param[in]  locale QString [optional]
    */
    void classifyGroceryProductBulk(const QSet<OAIClassifyGroceryProductBulk_request_inner> &oai_classify_grocery_product_bulk_request_inner, const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upc double [required]
    */
    void getComparableProducts(const double &upc);

    /**
    * @param[in]  id qint32 [required]
    */
    void getProductInformation(const qint32 &id);

    /**
    * @param[in]  id double [required]
    */
    void productNutritionByIDImage(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  show_optional_nutrients bool [optional]
    * @param[in]  show_zero_values bool [optional]
    * @param[in]  show_ingredients bool [optional]
    */
    void productNutritionLabelImage(const double &id, const ::OpenAPI::OptionalParam<bool> &show_optional_nutrients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_zero_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_ingredients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id double [required]
    * @param[in]  default_css bool [optional]
    * @param[in]  show_optional_nutrients bool [optional]
    * @param[in]  show_zero_values bool [optional]
    * @param[in]  show_ingredients bool [optional]
    */
    void productNutritionLabelWidget(const double &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_optional_nutrients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_zero_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_ingredients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  min_calories double [optional]
    * @param[in]  max_calories double [optional]
    * @param[in]  min_carbs double [optional]
    * @param[in]  max_carbs double [optional]
    * @param[in]  min_protein double [optional]
    * @param[in]  max_protein double [optional]
    * @param[in]  min_fat double [optional]
    * @param[in]  max_fat double [optional]
    * @param[in]  add_product_information bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    */
    void searchGroceryProducts(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &add_product_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  upc double [required]
    */
    void searchGroceryProductsByUPC(const double &upc);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  default_css bool [optional]
    */
    void visualizeProductNutritionByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autocompleteProductSearchCallback(OAIHttpRequestWorker *worker);
    void classifyGroceryProductCallback(OAIHttpRequestWorker *worker);
    void classifyGroceryProductBulkCallback(OAIHttpRequestWorker *worker);
    void getComparableProductsCallback(OAIHttpRequestWorker *worker);
    void getProductInformationCallback(OAIHttpRequestWorker *worker);
    void productNutritionByIDImageCallback(OAIHttpRequestWorker *worker);
    void productNutritionLabelImageCallback(OAIHttpRequestWorker *worker);
    void productNutritionLabelWidgetCallback(OAIHttpRequestWorker *worker);
    void searchGroceryProductsCallback(OAIHttpRequestWorker *worker);
    void searchGroceryProductsByUPCCallback(OAIHttpRequestWorker *worker);
    void visualizeProductNutritionByIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autocompleteProductSearchSignal(OAIAutocompleteProductSearch_200_response summary);
    void classifyGroceryProductSignal(OAIClassifyGroceryProduct_200_response summary);
    void classifyGroceryProductBulkSignal(QSet<OAIClassifyGroceryProductBulk_200_response_inner> summary);
    void getComparableProductsSignal(OAIGetComparableProducts_200_response summary);
    void getProductInformationSignal(OAIGetProductInformation_200_response summary);
    void productNutritionByIDImageSignal(OAIHttpFileElement summary);
    void productNutritionLabelImageSignal(OAIHttpFileElement summary);
    void productNutritionLabelWidgetSignal(QString summary);
    void searchGroceryProductsSignal(OAISearchGroceryProducts_200_response summary);
    void searchGroceryProductsByUPCSignal(OAISearchGroceryProductsByUPC_200_response summary);
    void visualizeProductNutritionByIDSignal(QString summary);

    void autocompleteProductSearchSignalFull(OAIHttpRequestWorker *worker, OAIAutocompleteProductSearch_200_response summary);
    void classifyGroceryProductSignalFull(OAIHttpRequestWorker *worker, OAIClassifyGroceryProduct_200_response summary);
    void classifyGroceryProductBulkSignalFull(OAIHttpRequestWorker *worker, QSet<OAIClassifyGroceryProductBulk_200_response_inner> summary);
    void getComparableProductsSignalFull(OAIHttpRequestWorker *worker, OAIGetComparableProducts_200_response summary);
    void getProductInformationSignalFull(OAIHttpRequestWorker *worker, OAIGetProductInformation_200_response summary);
    void productNutritionByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void productNutritionLabelImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void productNutritionLabelWidgetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void searchGroceryProductsSignalFull(OAIHttpRequestWorker *worker, OAISearchGroceryProducts_200_response summary);
    void searchGroceryProductsByUPCSignalFull(OAIHttpRequestWorker *worker, OAISearchGroceryProductsByUPC_200_response summary);
    void visualizeProductNutritionByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use autocompleteProductSearchSignalError() instead")
    void autocompleteProductSearchSignalE(OAIAutocompleteProductSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteProductSearchSignalError(OAIAutocompleteProductSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyGroceryProductSignalError() instead")
    void classifyGroceryProductSignalE(OAIClassifyGroceryProduct_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyGroceryProductSignalError(OAIClassifyGroceryProduct_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyGroceryProductBulkSignalError() instead")
    void classifyGroceryProductBulkSignalE(QSet<OAIClassifyGroceryProductBulk_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyGroceryProductBulkSignalError(QSet<OAIClassifyGroceryProductBulk_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComparableProductsSignalError() instead")
    void getComparableProductsSignalE(OAIGetComparableProducts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComparableProductsSignalError(OAIGetComparableProducts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductInformationSignalError() instead")
    void getProductInformationSignalE(OAIGetProductInformation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductInformationSignalError(OAIGetProductInformation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNutritionByIDImageSignalError() instead")
    void productNutritionByIDImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productNutritionByIDImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNutritionLabelImageSignalError() instead")
    void productNutritionLabelImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productNutritionLabelImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNutritionLabelWidgetSignalError() instead")
    void productNutritionLabelWidgetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productNutritionLabelWidgetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGroceryProductsSignalError() instead")
    void searchGroceryProductsSignalE(OAISearchGroceryProducts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGroceryProductsSignalError(OAISearchGroceryProducts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGroceryProductsByUPCSignalError() instead")
    void searchGroceryProductsByUPCSignalE(OAISearchGroceryProductsByUPC_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGroceryProductsByUPCSignalError(OAISearchGroceryProductsByUPC_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeProductNutritionByIDSignalError() instead")
    void visualizeProductNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeProductNutritionByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autocompleteProductSearchSignalErrorFull() instead")
    void autocompleteProductSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteProductSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyGroceryProductSignalErrorFull() instead")
    void classifyGroceryProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyGroceryProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use classifyGroceryProductBulkSignalErrorFull() instead")
    void classifyGroceryProductBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void classifyGroceryProductBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComparableProductsSignalErrorFull() instead")
    void getComparableProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComparableProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductInformationSignalErrorFull() instead")
    void getProductInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNutritionByIDImageSignalErrorFull() instead")
    void productNutritionByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productNutritionByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNutritionLabelImageSignalErrorFull() instead")
    void productNutritionLabelImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productNutritionLabelImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productNutritionLabelWidgetSignalErrorFull() instead")
    void productNutritionLabelWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productNutritionLabelWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGroceryProductsSignalErrorFull() instead")
    void searchGroceryProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGroceryProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGroceryProductsByUPCSignalErrorFull() instead")
    void searchGroceryProductsByUPCSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGroceryProductsByUPCSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeProductNutritionByIDSignalErrorFull() instead")
    void visualizeProductNutritionByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeProductNutritionByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
