/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITalkToChatbot_200_response_media_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITalkToChatbot_200_response_media_inner::OAITalkToChatbot_200_response_media_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITalkToChatbot_200_response_media_inner::OAITalkToChatbot_200_response_media_inner() {
    this->initializeModel();
}

OAITalkToChatbot_200_response_media_inner::~OAITalkToChatbot_200_response_media_inner() {}

void OAITalkToChatbot_200_response_media_inner::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;
}

void OAITalkToChatbot_200_response_media_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITalkToChatbot_200_response_media_inner::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;
}

QString OAITalkToChatbot_200_response_media_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITalkToChatbot_200_response_media_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    return obj;
}

QString OAITalkToChatbot_200_response_media_inner::getTitle() const {
    return m_title;
}
void OAITalkToChatbot_200_response_media_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITalkToChatbot_200_response_media_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAITalkToChatbot_200_response_media_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAITalkToChatbot_200_response_media_inner::getImage() const {
    return m_image;
}
void OAITalkToChatbot_200_response_media_inner::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAITalkToChatbot_200_response_media_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAITalkToChatbot_200_response_media_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAITalkToChatbot_200_response_media_inner::getLink() const {
    return m_link;
}
void OAITalkToChatbot_200_response_media_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAITalkToChatbot_200_response_media_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAITalkToChatbot_200_response_media_inner::is_link_Valid() const{
    return m_link_isValid;
}

bool OAITalkToChatbot_200_response_media_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITalkToChatbot_200_response_media_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
