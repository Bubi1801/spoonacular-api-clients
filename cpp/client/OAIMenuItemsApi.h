/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMenuItemsApi_H
#define OAI_OAIMenuItemsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutocompleteMenuItemSearch_200_response.h"
#include "OAIGetMenuItemInformation_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAISearchMenuItems_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMenuItemsApi : public QObject {
    Q_OBJECT

public:
    OAIMenuItemsApi(const int timeOut = 0);
    ~OAIMenuItemsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [required]
    * @param[in]  number double [optional]
    */
    void autocompleteMenuItemSearch(const QString &query, const ::OpenAPI::OptionalParam<double> &number = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id qint32 [required]
    */
    void getMenuItemInformation(const qint32 &id);

    /**
    * @param[in]  id double [required]
    */
    void menuItemNutritionByIDImage(const double &id);

    /**
    * @param[in]  id double [required]
    * @param[in]  show_optional_nutrients bool [optional]
    * @param[in]  show_zero_values bool [optional]
    * @param[in]  show_ingredients bool [optional]
    */
    void menuItemNutritionLabelImage(const double &id, const ::OpenAPI::OptionalParam<bool> &show_optional_nutrients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_zero_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_ingredients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id double [required]
    * @param[in]  default_css bool [optional]
    * @param[in]  show_optional_nutrients bool [optional]
    * @param[in]  show_zero_values bool [optional]
    * @param[in]  show_ingredients bool [optional]
    */
    void menuItemNutritionLabelWidget(const double &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_optional_nutrients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_zero_values = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_ingredients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  min_calories double [optional]
    * @param[in]  max_calories double [optional]
    * @param[in]  min_carbs double [optional]
    * @param[in]  max_carbs double [optional]
    * @param[in]  min_protein double [optional]
    * @param[in]  max_protein double [optional]
    * @param[in]  min_fat double [optional]
    * @param[in]  max_fat double [optional]
    * @param[in]  add_menu_item_information bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    */
    void searchMenuItems(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &add_menu_item_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  default_css bool [optional]
    */
    void visualizeMenuItemNutritionByID(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &default_css = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autocompleteMenuItemSearchCallback(OAIHttpRequestWorker *worker);
    void getMenuItemInformationCallback(OAIHttpRequestWorker *worker);
    void menuItemNutritionByIDImageCallback(OAIHttpRequestWorker *worker);
    void menuItemNutritionLabelImageCallback(OAIHttpRequestWorker *worker);
    void menuItemNutritionLabelWidgetCallback(OAIHttpRequestWorker *worker);
    void searchMenuItemsCallback(OAIHttpRequestWorker *worker);
    void visualizeMenuItemNutritionByIDCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autocompleteMenuItemSearchSignal(OAIAutocompleteMenuItemSearch_200_response summary);
    void getMenuItemInformationSignal(OAIGetMenuItemInformation_200_response summary);
    void menuItemNutritionByIDImageSignal(OAIHttpFileElement summary);
    void menuItemNutritionLabelImageSignal(OAIHttpFileElement summary);
    void menuItemNutritionLabelWidgetSignal(QString summary);
    void searchMenuItemsSignal(OAISearchMenuItems_200_response summary);
    void visualizeMenuItemNutritionByIDSignal(QString summary);

    void autocompleteMenuItemSearchSignalFull(OAIHttpRequestWorker *worker, OAIAutocompleteMenuItemSearch_200_response summary);
    void getMenuItemInformationSignalFull(OAIHttpRequestWorker *worker, OAIGetMenuItemInformation_200_response summary);
    void menuItemNutritionByIDImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void menuItemNutritionLabelImageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void menuItemNutritionLabelWidgetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void searchMenuItemsSignalFull(OAIHttpRequestWorker *worker, OAISearchMenuItems_200_response summary);
    void visualizeMenuItemNutritionByIDSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use autocompleteMenuItemSearchSignalError() instead")
    void autocompleteMenuItemSearchSignalE(OAIAutocompleteMenuItemSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteMenuItemSearchSignalError(OAIAutocompleteMenuItemSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMenuItemInformationSignalError() instead")
    void getMenuItemInformationSignalE(OAIGetMenuItemInformation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMenuItemInformationSignalError(OAIGetMenuItemInformation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use menuItemNutritionByIDImageSignalError() instead")
    void menuItemNutritionByIDImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void menuItemNutritionByIDImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use menuItemNutritionLabelImageSignalError() instead")
    void menuItemNutritionLabelImageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void menuItemNutritionLabelImageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use menuItemNutritionLabelWidgetSignalError() instead")
    void menuItemNutritionLabelWidgetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void menuItemNutritionLabelWidgetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMenuItemsSignalError() instead")
    void searchMenuItemsSignalE(OAISearchMenuItems_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMenuItemsSignalError(OAISearchMenuItems_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeMenuItemNutritionByIDSignalError() instead")
    void visualizeMenuItemNutritionByIDSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeMenuItemNutritionByIDSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autocompleteMenuItemSearchSignalErrorFull() instead")
    void autocompleteMenuItemSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autocompleteMenuItemSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMenuItemInformationSignalErrorFull() instead")
    void getMenuItemInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMenuItemInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use menuItemNutritionByIDImageSignalErrorFull() instead")
    void menuItemNutritionByIDImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void menuItemNutritionByIDImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use menuItemNutritionLabelImageSignalErrorFull() instead")
    void menuItemNutritionLabelImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void menuItemNutritionLabelImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use menuItemNutritionLabelWidgetSignalErrorFull() instead")
    void menuItemNutritionLabelWidgetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void menuItemNutritionLabelWidgetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMenuItemsSignalErrorFull() instead")
    void searchMenuItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMenuItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeMenuItemNutritionByIDSignalErrorFull() instead")
    void visualizeMenuItemNutritionByIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeMenuItemNutritionByIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
