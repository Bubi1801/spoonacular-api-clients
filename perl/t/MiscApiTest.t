=begin comment

spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More;
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::MiscApi');

my $api = WWW::OpenAPIClient::MiscApi->new();
isa_ok($api, 'WWW::OpenAPIClient::MiscApi');

#
# detect_food_in_text test
#
# uncomment below and update the test
#my $detect_food_in_text_content_type = undef; # replace NULL with a proper value
#my $detect_food_in_text_result = $api->detect_food_in_text(content_type => $detect_food_in_text_content_type);

#
# get_a_random_food_joke test
#
# uncomment below and update the test
#my $get_a_random_food_joke_result = $api->get_a_random_food_joke();

#
# get_conversation_suggests test
#
# uncomment below and update the test
#my $get_conversation_suggests_query = undef; # replace NULL with a proper value
#my $get_conversation_suggests_number = undef; # replace NULL with a proper value
#my $get_conversation_suggests_result = $api->get_conversation_suggests(query => $get_conversation_suggests_query, number => $get_conversation_suggests_number);

#
# get_random_food_trivia test
#
# uncomment below and update the test
#my $get_random_food_trivia_result = $api->get_random_food_trivia();

#
# image_analysis_by_url test
#
# uncomment below and update the test
#my $image_analysis_by_url_image_url = undef; # replace NULL with a proper value
#my $image_analysis_by_url_result = $api->image_analysis_by_url(image_url => $image_analysis_by_url_image_url);

#
# image_classification_by_url test
#
# uncomment below and update the test
#my $image_classification_by_url_image_url = undef; # replace NULL with a proper value
#my $image_classification_by_url_result = $api->image_classification_by_url(image_url => $image_classification_by_url_image_url);

#
# search_all_food test
#
# uncomment below and update the test
#my $search_all_food_query = undef; # replace NULL with a proper value
#my $search_all_food_offset = undef; # replace NULL with a proper value
#my $search_all_food_number = undef; # replace NULL with a proper value
#my $search_all_food_result = $api->search_all_food(query => $search_all_food_query, offset => $search_all_food_offset, number => $search_all_food_number);

#
# search_custom_foods test
#
# uncomment below and update the test
#my $search_custom_foods_username = undef; # replace NULL with a proper value
#my $search_custom_foods_hash = undef; # replace NULL with a proper value
#my $search_custom_foods_query = undef; # replace NULL with a proper value
#my $search_custom_foods_offset = undef; # replace NULL with a proper value
#my $search_custom_foods_number = undef; # replace NULL with a proper value
#my $search_custom_foods_result = $api->search_custom_foods(username => $search_custom_foods_username, hash => $search_custom_foods_hash, query => $search_custom_foods_query, offset => $search_custom_foods_offset, number => $search_custom_foods_number);

#
# search_food_videos test
#
# uncomment below and update the test
#my $search_food_videos_query = undef; # replace NULL with a proper value
#my $search_food_videos_type = undef; # replace NULL with a proper value
#my $search_food_videos_cuisine = undef; # replace NULL with a proper value
#my $search_food_videos_diet = undef; # replace NULL with a proper value
#my $search_food_videos_include_ingredients = undef; # replace NULL with a proper value
#my $search_food_videos_exclude_ingredients = undef; # replace NULL with a proper value
#my $search_food_videos_min_length = undef; # replace NULL with a proper value
#my $search_food_videos_max_length = undef; # replace NULL with a proper value
#my $search_food_videos_offset = undef; # replace NULL with a proper value
#my $search_food_videos_number = undef; # replace NULL with a proper value
#my $search_food_videos_result = $api->search_food_videos(query => $search_food_videos_query, type => $search_food_videos_type, cuisine => $search_food_videos_cuisine, diet => $search_food_videos_diet, include_ingredients => $search_food_videos_include_ingredients, exclude_ingredients => $search_food_videos_exclude_ingredients, min_length => $search_food_videos_min_length, max_length => $search_food_videos_max_length, offset => $search_food_videos_offset, number => $search_food_videos_number);

#
# search_site_content test
#
# uncomment below and update the test
#my $search_site_content_query = undef; # replace NULL with a proper value
#my $search_site_content_result = $api->search_site_content(query => $search_site_content_query);

#
# talk_to_chatbot test
#
# uncomment below and update the test
#my $talk_to_chatbot_text = undef; # replace NULL with a proper value
#my $talk_to_chatbot_context_id = undef; # replace NULL with a proper value
#my $talk_to_chatbot_result = $api->talk_to_chatbot(text => $talk_to_chatbot_text, context_id => $talk_to_chatbot_context_id);


done_testing();
