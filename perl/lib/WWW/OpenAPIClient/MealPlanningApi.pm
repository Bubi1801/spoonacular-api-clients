=begin comment

spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MealPlanningApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_meal_plan_template
#
# Add Meal Plan Template
#
# @param string $username The username. (required)
# @param string $hash The private hash for the username. (required)
# @param AddToMealPlanRequest $add_to_meal_plan_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'add_to_meal_plan_request' => {
        data_type => 'AddToMealPlanRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_meal_plan_template' } = {
        summary => 'Add Meal Plan Template',
        params => $params,
        returns => 'AddMealPlanTemplate200Response',
        };
}
# @return AddMealPlanTemplate200Response
#
sub add_meal_plan_template {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling add_meal_plan_template");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling add_meal_plan_template");
    }

    # verify the required parameter 'add_to_meal_plan_request' is set
    unless (exists $args{'add_to_meal_plan_request'}) {
      croak("Missing the required parameter 'add_to_meal_plan_request' when calling add_meal_plan_template");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/templates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_to_meal_plan_request'}) {
        $_body_data = $args{'add_to_meal_plan_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AddMealPlanTemplate200Response', $response);
    return $_response_object;
}

#
# add_to_meal_plan
#
# Add to Meal Plan
#
# @param string $username The username. (required)
# @param string $hash The private hash for the username. (required)
# @param AddToMealPlanRequest $add_to_meal_plan_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'add_to_meal_plan_request' => {
        data_type => 'AddToMealPlanRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_to_meal_plan' } = {
        summary => 'Add to Meal Plan',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub add_to_meal_plan {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling add_to_meal_plan");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling add_to_meal_plan");
    }

    # verify the required parameter 'add_to_meal_plan_request' is set
    unless (exists $args{'add_to_meal_plan_request'}) {
      croak("Missing the required parameter 'add_to_meal_plan_request' when calling add_to_meal_plan");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/items';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('', 'application/json');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_to_meal_plan_request'}) {
        $_body_data = $args{'add_to_meal_plan_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# add_to_shopping_list
#
# Add to Shopping List
#
# @param string $username The username. (required)
# @param string $hash The private hash for the username. (required)
# @param AddToMealPlanRequest $add_to_meal_plan_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'add_to_meal_plan_request' => {
        data_type => 'AddToMealPlanRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_to_shopping_list' } = {
        summary => 'Add to Shopping List',
        params => $params,
        returns => 'GenerateShoppingList200Response',
        };
}
# @return GenerateShoppingList200Response
#
sub add_to_shopping_list {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling add_to_shopping_list");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling add_to_shopping_list");
    }

    # verify the required parameter 'add_to_meal_plan_request' is set
    unless (exists $args{'add_to_meal_plan_request'}) {
      croak("Missing the required parameter 'add_to_meal_plan_request' when calling add_to_shopping_list");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/shopping-list/items';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('', 'application/json');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'add_to_meal_plan_request'}) {
        $_body_data = $args{'add_to_meal_plan_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateShoppingList200Response', $response);
    return $_response_object;
}

#
# clear_meal_plan_day
#
# Clear Meal Plan Day
#
# @param string $username The username. (required)
# @param string $date The date in the format yyyy-mm-dd. (required)
# @param string $hash The private hash for the username. (required)
# @param ClearMealPlanDayRequest $clear_meal_plan_day_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'date' => {
        data_type => 'string',
        description => 'The date in the format yyyy-mm-dd.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'clear_meal_plan_day_request' => {
        data_type => 'ClearMealPlanDayRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clear_meal_plan_day' } = {
        summary => 'Clear Meal Plan Day',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub clear_meal_plan_day {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling clear_meal_plan_day");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling clear_meal_plan_day");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling clear_meal_plan_day");
    }

    # verify the required parameter 'clear_meal_plan_day_request' is set
    unless (exists $args{'clear_meal_plan_day_request'}) {
      croak("Missing the required parameter 'clear_meal_plan_day_request' when calling clear_meal_plan_day");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/day/{date}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'date'}) {
        my $_base_variable = "{" . "date" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'date'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'clear_meal_plan_day_request'}) {
        $_body_data = $args{'clear_meal_plan_day_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# connect_user
#
# Connect User
#
# @param object $body  (required)
{
    my $params = {
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'connect_user' } = {
        summary => 'Connect User',
        params => $params,
        returns => 'ConnectUser200Response',
        };
}
# @return ConnectUser200Response
#
sub connect_user {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling connect_user");
    }

    # parse inputs
    my $_resource_path = '/users/connect';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('', 'application/json');

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectUser200Response', $response);
    return $_response_object;
}

#
# delete_from_meal_plan
#
# Delete from Meal Plan
#
# @param string $username The username. (required)
# @param double $id The shopping list item id. (required)
# @param string $hash The private hash for the username. (required)
# @param DeleteFromMealPlanRequest $delete_from_meal_plan_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'id' => {
        data_type => 'double',
        description => 'The shopping list item id.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'delete_from_meal_plan_request' => {
        data_type => 'DeleteFromMealPlanRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_from_meal_plan' } = {
        summary => 'Delete from Meal Plan',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub delete_from_meal_plan {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling delete_from_meal_plan");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_from_meal_plan");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling delete_from_meal_plan");
    }

    # verify the required parameter 'delete_from_meal_plan_request' is set
    unless (exists $args{'delete_from_meal_plan_request'}) {
      croak("Missing the required parameter 'delete_from_meal_plan_request' when calling delete_from_meal_plan");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/items/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_from_meal_plan_request'}) {
        $_body_data = $args{'delete_from_meal_plan_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# delete_from_shopping_list
#
# Delete from Shopping List
#
# @param string $username The username. (required)
# @param int $id The item&#39;s id. (required)
# @param string $hash The private hash for the username. (required)
# @param DeleteFromMealPlanRequest $delete_from_meal_plan_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'delete_from_meal_plan_request' => {
        data_type => 'DeleteFromMealPlanRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_from_shopping_list' } = {
        summary => 'Delete from Shopping List',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub delete_from_shopping_list {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling delete_from_shopping_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_from_shopping_list");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling delete_from_shopping_list");
    }

    # verify the required parameter 'delete_from_meal_plan_request' is set
    unless (exists $args{'delete_from_meal_plan_request'}) {
      croak("Missing the required parameter 'delete_from_meal_plan_request' when calling delete_from_shopping_list");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/shopping-list/items/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_from_meal_plan_request'}) {
        $_body_data = $args{'delete_from_meal_plan_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# delete_meal_plan_template
#
# Delete Meal Plan Template
#
# @param string $username The username. (required)
# @param int $id The item&#39;s id. (required)
# @param string $hash The private hash for the username. (required)
# @param DeleteFromMealPlanRequest $delete_from_meal_plan_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'delete_from_meal_plan_request' => {
        data_type => 'DeleteFromMealPlanRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_meal_plan_template' } = {
        summary => 'Delete Meal Plan Template',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub delete_meal_plan_template {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling delete_meal_plan_template");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_meal_plan_template");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling delete_meal_plan_template");
    }

    # verify the required parameter 'delete_from_meal_plan_request' is set
    unless (exists $args{'delete_from_meal_plan_request'}) {
      croak("Missing the required parameter 'delete_from_meal_plan_request' when calling delete_meal_plan_template");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/templates/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_from_meal_plan_request'}) {
        $_body_data = $args{'delete_from_meal_plan_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# generate_meal_plan
#
# Generate Meal Plan
#
# @param string $time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
# @param double $target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
# @param string $diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
# @param string $exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
{
    my $params = {
    'time_frame' => {
        data_type => 'string',
        description => 'Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.',
        required => '0',
    },
    'target_calories' => {
        data_type => 'double',
        description => 'What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'Enter a diet that the meal plan has to adhere to. See a full list of supported diets.',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'A comma-separated list of allergens or ingredients that must be excluded.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_meal_plan' } = {
        summary => 'Generate Meal Plan',
        params => $params,
        returns => 'GenerateMealPlan200Response',
        };
}
# @return GenerateMealPlan200Response
#
sub generate_meal_plan {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mealplanner/generate';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'time_frame'}) {
        $query_params->{'timeFrame'} = $self->{api_client}->to_query_value($args{'time_frame'});
    }

    # query params
    if ( exists $args{'target_calories'}) {
        $query_params->{'targetCalories'} = $self->{api_client}->to_query_value($args{'target_calories'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateMealPlan200Response', $response);
    return $_response_object;
}

#
# generate_shopping_list
#
# Generate Shopping List
#
# @param string $username The username. (required)
# @param string $start_date The start date in the format yyyy-mm-dd. (required)
# @param string $end_date The end date in the format yyyy-mm-dd. (required)
# @param string $hash The private hash for the username. (required)
# @param GenerateShoppingListRequest $generate_shopping_list_request  (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'start_date' => {
        data_type => 'string',
        description => 'The start date in the format yyyy-mm-dd.',
        required => '1',
    },
    'end_date' => {
        data_type => 'string',
        description => 'The end date in the format yyyy-mm-dd.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    'generate_shopping_list_request' => {
        data_type => 'GenerateShoppingListRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'generate_shopping_list' } = {
        summary => 'Generate Shopping List',
        params => $params,
        returns => 'GenerateShoppingList200Response',
        };
}
# @return GenerateShoppingList200Response
#
sub generate_shopping_list {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling generate_shopping_list");
    }

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling generate_shopping_list");
    }

    # verify the required parameter 'end_date' is set
    unless (exists $args{'end_date'}) {
      croak("Missing the required parameter 'end_date' when calling generate_shopping_list");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling generate_shopping_list");
    }

    # verify the required parameter 'generate_shopping_list_request' is set
    unless (exists $args{'generate_shopping_list_request'}) {
      croak("Missing the required parameter 'generate_shopping_list_request' when calling generate_shopping_list");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/shopping-list/{start-date}/{end-date}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('');

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'start_date'}) {
        my $_base_variable = "{" . "start-date" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'start_date'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'end_date'}) {
        my $_base_variable = "{" . "end-date" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'end_date'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'generate_shopping_list_request'}) {
        $_body_data = $args{'generate_shopping_list_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenerateShoppingList200Response', $response);
    return $_response_object;
}

#
# get_meal_plan_template
#
# Get Meal Plan Template
#
# @param string $username The username. (required)
# @param int $id The item&#39;s id. (required)
# @param string $hash The private hash for the username. (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_meal_plan_template' } = {
        summary => 'Get Meal Plan Template',
        params => $params,
        returns => 'GetMealPlanTemplate200Response',
        };
}
# @return GetMealPlanTemplate200Response
#
sub get_meal_plan_template {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling get_meal_plan_template");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_meal_plan_template");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling get_meal_plan_template");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/templates/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMealPlanTemplate200Response', $response);
    return $_response_object;
}

#
# get_meal_plan_templates
#
# Get Meal Plan Templates
#
# @param string $username The username. (required)
# @param string $hash The private hash for the username. (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_meal_plan_templates' } = {
        summary => 'Get Meal Plan Templates',
        params => $params,
        returns => 'GetMealPlanTemplates200Response',
        };
}
# @return GetMealPlanTemplates200Response
#
sub get_meal_plan_templates {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling get_meal_plan_templates");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling get_meal_plan_templates");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMealPlanTemplates200Response', $response);
    return $_response_object;
}

#
# get_meal_plan_week
#
# Get Meal Plan Week
#
# @param string $username The username. (required)
# @param string $start_date The start date of the meal planned week in the format yyyy-mm-dd. (required)
# @param string $hash The private hash for the username. (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'start_date' => {
        data_type => 'string',
        description => 'The start date of the meal planned week in the format yyyy-mm-dd.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_meal_plan_week' } = {
        summary => 'Get Meal Plan Week',
        params => $params,
        returns => 'GetMealPlanWeek200Response',
        };
}
# @return GetMealPlanWeek200Response
#
sub get_meal_plan_week {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling get_meal_plan_week");
    }

    # verify the required parameter 'start_date' is set
    unless (exists $args{'start_date'}) {
      croak("Missing the required parameter 'start_date' when calling get_meal_plan_week");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling get_meal_plan_week");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/week/{start-date}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'start_date'}) {
        my $_base_variable = "{" . "start-date" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'start_date'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMealPlanWeek200Response', $response);
    return $_response_object;
}

#
# get_shopping_list
#
# Get Shopping List
#
# @param string $username The username. (required)
# @param string $hash The private hash for the username. (required)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username.',
        required => '1',
    },
    'hash' => {
        data_type => 'string',
        description => 'The private hash for the username.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_shopping_list' } = {
        summary => 'Get Shopping List',
        params => $params,
        returns => 'GetShoppingList200Response',
        };
}
# @return GetShoppingList200Response
#
sub get_shopping_list {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling get_shopping_list");
    }

    # verify the required parameter 'hash' is set
    unless (exists $args{'hash'}) {
      croak("Missing the required parameter 'hash' when calling get_shopping_list");
    }

    # parse inputs
    my $_resource_path = '/mealplanner/{username}/shopping-list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'hash'}) {
        $query_params->{'hash'} = $self->{api_client}->to_query_value($args{'hash'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetShoppingList200Response', $response);
    return $_response_object;
}

1;
