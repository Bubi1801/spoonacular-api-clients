=begin comment

spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::RecipesApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# analyze_a_recipe_search_query
#
# Analyze a Recipe Search Query
#
# @param string $q The recipe search query. (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'The recipe search query.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'analyze_a_recipe_search_query' } = {
        summary => 'Analyze a Recipe Search Query',
        params => $params,
        returns => 'AnalyzeARecipeSearchQuery200Response',
        };
}
# @return AnalyzeARecipeSearchQuery200Response
#
sub analyze_a_recipe_search_query {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling analyze_a_recipe_search_query");
    }

    # parse inputs
    my $_resource_path = '/recipes/queries/analyze';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnalyzeARecipeSearchQuery200Response', $response);
    return $_response_object;
}

#
# analyze_recipe_instructions
#
# Analyze Recipe Instructions
#
# @param string $content_type The content type. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'analyze_recipe_instructions' } = {
        summary => 'Analyze Recipe Instructions',
        params => $params,
        returns => 'AnalyzeRecipeInstructions200Response',
        };
}
# @return AnalyzeRecipeInstructions200Response
#
sub analyze_recipe_instructions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/analyzeInstructions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnalyzeRecipeInstructions200Response', $response);
    return $_response_object;
}

#
# autocomplete_recipe_search
#
# Autocomplete Recipe Search
#
# @param string $query The (natural language) search query. (optional)
# @param int $number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The (natural language) search query.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The maximum number of items to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'autocomplete_recipe_search' } = {
        summary => 'Autocomplete Recipe Search',
        params => $params,
        returns => 'ARRAY[AutocompleteRecipeSearch200ResponseInner]',
        };
}
# @return ARRAY[AutocompleteRecipeSearch200ResponseInner]
#
sub autocomplete_recipe_search {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/autocomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AutocompleteRecipeSearch200ResponseInner]', $response);
    return $_response_object;
}

#
# classify_cuisine
#
# Classify Cuisine
#
# @param string $content_type The content type. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'classify_cuisine' } = {
        summary => 'Classify Cuisine',
        params => $params,
        returns => 'ClassifyCuisine200Response',
        };
}
# @return ClassifyCuisine200Response
#
sub classify_cuisine {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/cuisine';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ClassifyCuisine200Response', $response);
    return $_response_object;
}

#
# compute_glycemic_load
#
# Compute Glycemic Load
#
# @param ComputeGlycemicLoadRequest $compute_glycemic_load_request  (required)
# @param string $language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
{
    my $params = {
    'compute_glycemic_load_request' => {
        data_type => 'ComputeGlycemicLoadRequest',
        description => '',
        required => '1',
    },
    'language' => {
        data_type => 'string',
        description => 'The language of the input. Either &#39;en&#39; or &#39;de&#39;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'compute_glycemic_load' } = {
        summary => 'Compute Glycemic Load',
        params => $params,
        returns => 'ComputeGlycemicLoad200Response',
        };
}
# @return ComputeGlycemicLoad200Response
#
sub compute_glycemic_load {
    my ($self, %args) = @_;

    # verify the required parameter 'compute_glycemic_load_request' is set
    unless (exists $args{'compute_glycemic_load_request'}) {
      croak("Missing the required parameter 'compute_glycemic_load_request' when calling compute_glycemic_load");
    }

    # parse inputs
    my $_resource_path = '/food/ingredients/glycemicLoad';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'compute_glycemic_load_request'}) {
        $_body_data = $args{'compute_glycemic_load_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComputeGlycemicLoad200Response', $response);
    return $_response_object;
}

#
# convert_amounts
#
# Convert Amounts
#
# @param string $ingredient_name The ingredient which you want to convert. (required)
# @param double $source_amount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
# @param string $source_unit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
# @param string $target_unit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
{
    my $params = {
    'ingredient_name' => {
        data_type => 'string',
        description => 'The ingredient which you want to convert.',
        required => '1',
    },
    'source_amount' => {
        data_type => 'double',
        description => 'The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.',
        required => '1',
    },
    'source_unit' => {
        data_type => 'string',
        description => 'The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;',
        required => '1',
    },
    'target_unit' => {
        data_type => 'string',
        description => 'The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'convert_amounts' } = {
        summary => 'Convert Amounts',
        params => $params,
        returns => 'ConvertAmounts200Response',
        };
}
# @return ConvertAmounts200Response
#
sub convert_amounts {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredient_name' is set
    unless (exists $args{'ingredient_name'}) {
      croak("Missing the required parameter 'ingredient_name' when calling convert_amounts");
    }

    # verify the required parameter 'source_amount' is set
    unless (exists $args{'source_amount'}) {
      croak("Missing the required parameter 'source_amount' when calling convert_amounts");
    }

    # verify the required parameter 'source_unit' is set
    unless (exists $args{'source_unit'}) {
      croak("Missing the required parameter 'source_unit' when calling convert_amounts");
    }

    # verify the required parameter 'target_unit' is set
    unless (exists $args{'target_unit'}) {
      croak("Missing the required parameter 'target_unit' when calling convert_amounts");
    }

    # parse inputs
    my $_resource_path = '/recipes/convert';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ingredient_name'}) {
        $query_params->{'ingredientName'} = $self->{api_client}->to_query_value($args{'ingredient_name'});
    }

    # query params
    if ( exists $args{'source_amount'}) {
        $query_params->{'sourceAmount'} = $self->{api_client}->to_query_value($args{'source_amount'});
    }

    # query params
    if ( exists $args{'source_unit'}) {
        $query_params->{'sourceUnit'} = $self->{api_client}->to_query_value($args{'source_unit'});
    }

    # query params
    if ( exists $args{'target_unit'}) {
        $query_params->{'targetUnit'} = $self->{api_client}->to_query_value($args{'target_unit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConvertAmounts200Response', $response);
    return $_response_object;
}

#
# create_recipe_card
#
# Create Recipe Card
#
# @param string $content_type The content type. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_recipe_card' } = {
        summary => 'Create Recipe Card',
        params => $params,
        returns => 'CreateRecipeCard200Response',
        };
}
# @return CreateRecipeCard200Response
#
sub create_recipe_card {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/visualizeRecipe';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CreateRecipeCard200Response', $response);
    return $_response_object;
}

#
# equipment_by_id_image
#
# Equipment by ID Image
#
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'equipment_by_id_image' } = {
        summary => 'Equipment by ID Image',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub equipment_by_id_image {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling equipment_by_id_image");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/equipmentWidget.png';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('image/png');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# extract_recipe_from_website
#
# Extract Recipe from Website
#
# @param string $url The URL of the recipe page. (required)
# @param boolean $force_extraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
# @param boolean $analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
# @param boolean $include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
# @param boolean $include_taste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The URL of the recipe page.',
        required => '1',
    },
    'force_extraction' => {
        data_type => 'boolean',
        description => 'If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.',
        required => '0',
    },
    'analyze' => {
        data_type => 'boolean',
        description => 'If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.',
        required => '0',
    },
    'include_nutrition' => {
        data_type => 'boolean',
        description => 'Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.',
        required => '0',
    },
    'include_taste' => {
        data_type => 'boolean',
        description => 'Whether taste data should be added to correctly parsed ingredients.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_recipe_from_website' } = {
        summary => 'Extract Recipe from Website',
        params => $params,
        returns => 'GetRecipeInformation200Response',
        };
}
# @return GetRecipeInformation200Response
#
sub extract_recipe_from_website {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_recipe_from_website");
    }

    # parse inputs
    my $_resource_path = '/recipes/extract';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'force_extraction'}) {
        $query_params->{'forceExtraction'} = $self->{api_client}->to_query_value($args{'force_extraction'});
    }

    # query params
    if ( exists $args{'analyze'}) {
        $query_params->{'analyze'} = $self->{api_client}->to_query_value($args{'analyze'});
    }

    # query params
    if ( exists $args{'include_nutrition'}) {
        $query_params->{'includeNutrition'} = $self->{api_client}->to_query_value($args{'include_nutrition'});
    }

    # query params
    if ( exists $args{'include_taste'}) {
        $query_params->{'includeTaste'} = $self->{api_client}->to_query_value($args{'include_taste'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipeInformation200Response', $response);
    return $_response_object;
}

#
# get_analyzed_recipe_instructions
#
# Get Analyzed Recipe Instructions
#
# @param int $id The item&#39;s id. (required)
# @param boolean $step_breakdown Whether to break down the recipe steps even more. (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'step_breakdown' => {
        data_type => 'boolean',
        description => 'Whether to break down the recipe steps even more.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_analyzed_recipe_instructions' } = {
        summary => 'Get Analyzed Recipe Instructions',
        params => $params,
        returns => 'GetAnalyzedRecipeInstructions200Response',
        };
}
# @return GetAnalyzedRecipeInstructions200Response
#
sub get_analyzed_recipe_instructions {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_analyzed_recipe_instructions");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/analyzedInstructions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'step_breakdown'}) {
        $query_params->{'stepBreakdown'} = $self->{api_client}->to_query_value($args{'step_breakdown'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAnalyzedRecipeInstructions200Response', $response);
    return $_response_object;
}

#
# get_random_recipes
#
# Get Random Recipes
#
# @param boolean $limit_license Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
# @param string $tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
# @param int $number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
{
    my $params = {
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows display with proper attribution.',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The maximum number of items to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_random_recipes' } = {
        summary => 'Get Random Recipes',
        params => $params,
        returns => 'GetRandomRecipes200Response',
        };
}
# @return GetRandomRecipes200Response
#
sub get_random_recipes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/random';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRandomRecipes200Response', $response);
    return $_response_object;
}

#
# get_recipe_equipment_by_id
#
# Equipment by ID
#
# @param int $id The item&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_equipment_by_id' } = {
        summary => 'Equipment by ID',
        params => $params,
        returns => 'GetRecipeEquipmentByID200Response',
        };
}
# @return GetRecipeEquipmentByID200Response
#
sub get_recipe_equipment_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_equipment_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/equipmentWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipeEquipmentByID200Response', $response);
    return $_response_object;
}

#
# get_recipe_information
#
# Get Recipe Information
#
# @param int $id The item&#39;s id. (required)
# @param boolean $include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'include_nutrition' => {
        data_type => 'boolean',
        description => 'Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_information' } = {
        summary => 'Get Recipe Information',
        params => $params,
        returns => 'GetRecipeInformation200Response',
        };
}
# @return GetRecipeInformation200Response
#
sub get_recipe_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_information");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/information';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_nutrition'}) {
        $query_params->{'includeNutrition'} = $self->{api_client}->to_query_value($args{'include_nutrition'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipeInformation200Response', $response);
    return $_response_object;
}

#
# get_recipe_information_bulk
#
# Get Recipe Information Bulk
#
# @param string $ids A comma-separated list of recipe ids. (required)
# @param boolean $include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
{
    my $params = {
    'ids' => {
        data_type => 'string',
        description => 'A comma-separated list of recipe ids.',
        required => '1',
    },
    'include_nutrition' => {
        data_type => 'boolean',
        description => 'Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_information_bulk' } = {
        summary => 'Get Recipe Information Bulk',
        params => $params,
        returns => 'ARRAY[GetRecipeInformationBulk200ResponseInner]',
        };
}
# @return ARRAY[GetRecipeInformationBulk200ResponseInner]
#
sub get_recipe_information_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'ids' is set
    unless (exists $args{'ids'}) {
      croak("Missing the required parameter 'ids' when calling get_recipe_information_bulk");
    }

    # parse inputs
    my $_resource_path = '/recipes/informationBulk';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'include_nutrition'}) {
        $query_params->{'includeNutrition'} = $self->{api_client}->to_query_value($args{'include_nutrition'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetRecipeInformationBulk200ResponseInner]', $response);
    return $_response_object;
}

#
# get_recipe_ingredients_by_id
#
# Ingredients by ID
#
# @param int $id The item&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_ingredients_by_id' } = {
        summary => 'Ingredients by ID',
        params => $params,
        returns => 'GetRecipeIngredientsByID200Response',
        };
}
# @return GetRecipeIngredientsByID200Response
#
sub get_recipe_ingredients_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_ingredients_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/ingredientWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipeIngredientsByID200Response', $response);
    return $_response_object;
}

#
# get_recipe_nutrition_widget_by_id
#
# Nutrition by ID
#
# @param int $id The item&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_nutrition_widget_by_id' } = {
        summary => 'Nutrition by ID',
        params => $params,
        returns => 'GetRecipeNutritionWidgetByID200Response',
        };
}
# @return GetRecipeNutritionWidgetByID200Response
#
sub get_recipe_nutrition_widget_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_nutrition_widget_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipeNutritionWidgetByID200Response', $response);
    return $_response_object;
}

#
# get_recipe_price_breakdown_by_id
#
# Price Breakdown by ID
#
# @param int $id The item&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_price_breakdown_by_id' } = {
        summary => 'Price Breakdown by ID',
        params => $params,
        returns => 'GetRecipePriceBreakdownByID200Response',
        };
}
# @return GetRecipePriceBreakdownByID200Response
#
sub get_recipe_price_breakdown_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_price_breakdown_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/priceBreakdownWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipePriceBreakdownByID200Response', $response);
    return $_response_object;
}

#
# get_recipe_taste_by_id
#
# Taste by ID
#
# @param int $id The item&#39;s id. (required)
# @param boolean $normalize Normalize to the strongest taste. (optional, default to true)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'normalize' => {
        data_type => 'boolean',
        description => 'Normalize to the strongest taste.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_recipe_taste_by_id' } = {
        summary => 'Taste by ID',
        params => $params,
        returns => 'GetRecipeTasteByID200Response',
        };
}
# @return GetRecipeTasteByID200Response
#
sub get_recipe_taste_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_recipe_taste_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/tasteWidget.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'normalize'}) {
        $query_params->{'normalize'} = $self->{api_client}->to_query_value($args{'normalize'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetRecipeTasteByID200Response', $response);
    return $_response_object;
}

#
# get_similar_recipes
#
# Get Similar Recipes
#
# @param int $id The item&#39;s id. (required)
# @param int $number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
# @param boolean $limit_license Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'number' => {
        data_type => 'int',
        description => 'The maximum number of items to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows display with proper attribution.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_similar_recipes' } = {
        summary => 'Get Similar Recipes',
        params => $params,
        returns => 'ARRAY[GetSimilarRecipes200ResponseInner]',
        };
}
# @return ARRAY[GetSimilarRecipes200ResponseInner]
#
sub get_similar_recipes {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_similar_recipes");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/similar';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetSimilarRecipes200ResponseInner]', $response);
    return $_response_object;
}

#
# guess_nutrition_by_dish_name
#
# Guess Nutrition by Dish Name
#
# @param string $title The title of the dish. (required)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'The title of the dish.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'guess_nutrition_by_dish_name' } = {
        summary => 'Guess Nutrition by Dish Name',
        params => $params,
        returns => 'GuessNutritionByDishName200Response',
        };
}
# @return GuessNutritionByDishName200Response
#
sub guess_nutrition_by_dish_name {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling guess_nutrition_by_dish_name");
    }

    # parse inputs
    my $_resource_path = '/recipes/guessNutrition';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GuessNutritionByDishName200Response', $response);
    return $_response_object;
}

#
# ingredients_by_id_image
#
# Ingredients by ID Image
#
# @param double $id The recipe id. (required)
# @param string $measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'measure' => {
        data_type => 'string',
        description => 'Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ingredients_by_id_image' } = {
        summary => 'Ingredients by ID Image',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub ingredients_by_id_image {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling ingredients_by_id_image");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/ingredientWidget.png';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('image/png');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'measure'}) {
        $query_params->{'measure'} = $self->{api_client}->to_query_value($args{'measure'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# parse_ingredients
#
# Parse Ingredients
#
# @param string $content_type The content type. (optional)
# @param string $language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'The language of the input. Either &#39;en&#39; or &#39;de&#39;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'parse_ingredients' } = {
        summary => 'Parse Ingredients',
        params => $params,
        returns => 'ARRAY[ParseIngredients200ResponseInner]',
        };
}
# @return ARRAY[ParseIngredients200ResponseInner]
#
sub parse_ingredients {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/parseIngredients';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ParseIngredients200ResponseInner]', $response);
    return $_response_object;
}

#
# price_breakdown_by_id_image
#
# Price Breakdown by ID Image
#
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'price_breakdown_by_id_image' } = {
        summary => 'Price Breakdown by ID Image',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub price_breakdown_by_id_image {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling price_breakdown_by_id_image");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/priceBreakdownWidget.png';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('image/png');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# quick_answer
#
# Quick Answer
#
# @param string $q The nutrition related question. (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'The nutrition related question.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'quick_answer' } = {
        summary => 'Quick Answer',
        params => $params,
        returns => 'QuickAnswer200Response',
        };
}
# @return QuickAnswer200Response
#
sub quick_answer {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling quick_answer");
    }

    # parse inputs
    my $_resource_path = '/recipes/quickAnswer';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QuickAnswer200Response', $response);
    return $_response_object;
}

#
# recipe_nutrition_by_id_image
#
# Recipe Nutrition by ID Image
#
# @param double $id The recipe id. (required)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'recipe_nutrition_by_id_image' } = {
        summary => 'Recipe Nutrition by ID Image',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub recipe_nutrition_by_id_image {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling recipe_nutrition_by_id_image");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionWidget.png';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('image/png');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# recipe_nutrition_label_image
#
# Recipe Nutrition Label Image
#
# @param double $id The recipe id. (required)
# @param boolean $show_optional_nutrients Whether to show optional nutrients. (optional)
# @param boolean $show_zero_values Whether to show zero values. (optional)
# @param boolean $show_ingredients Whether to show a list of ingredients. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'show_optional_nutrients' => {
        data_type => 'boolean',
        description => 'Whether to show optional nutrients.',
        required => '0',
    },
    'show_zero_values' => {
        data_type => 'boolean',
        description => 'Whether to show zero values.',
        required => '0',
    },
    'show_ingredients' => {
        data_type => 'boolean',
        description => 'Whether to show a list of ingredients.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'recipe_nutrition_label_image' } = {
        summary => 'Recipe Nutrition Label Image',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub recipe_nutrition_label_image {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling recipe_nutrition_label_image");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionLabel.png';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('image/png');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'show_optional_nutrients'}) {
        $query_params->{'showOptionalNutrients'} = $self->{api_client}->to_query_value($args{'show_optional_nutrients'});
    }

    # query params
    if ( exists $args{'show_zero_values'}) {
        $query_params->{'showZeroValues'} = $self->{api_client}->to_query_value($args{'show_zero_values'});
    }

    # query params
    if ( exists $args{'show_ingredients'}) {
        $query_params->{'showIngredients'} = $self->{api_client}->to_query_value($args{'show_ingredients'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# recipe_nutrition_label_widget
#
# Recipe Nutrition Label Widget
#
# @param double $id The recipe id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional, default to true)
# @param boolean $show_optional_nutrients Whether to show optional nutrients. (optional)
# @param boolean $show_zero_values Whether to show zero values. (optional)
# @param boolean $show_ingredients Whether to show a list of ingredients. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'show_optional_nutrients' => {
        data_type => 'boolean',
        description => 'Whether to show optional nutrients.',
        required => '0',
    },
    'show_zero_values' => {
        data_type => 'boolean',
        description => 'Whether to show zero values.',
        required => '0',
    },
    'show_ingredients' => {
        data_type => 'boolean',
        description => 'Whether to show a list of ingredients.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'recipe_nutrition_label_widget' } = {
        summary => 'Recipe Nutrition Label Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub recipe_nutrition_label_widget {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling recipe_nutrition_label_widget");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionLabel';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # query params
    if ( exists $args{'show_optional_nutrients'}) {
        $query_params->{'showOptionalNutrients'} = $self->{api_client}->to_query_value($args{'show_optional_nutrients'});
    }

    # query params
    if ( exists $args{'show_zero_values'}) {
        $query_params->{'showZeroValues'} = $self->{api_client}->to_query_value($args{'show_zero_values'});
    }

    # query params
    if ( exists $args{'show_ingredients'}) {
        $query_params->{'showIngredients'} = $self->{api_client}->to_query_value($args{'show_ingredients'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# recipe_taste_by_id_image
#
# Recipe Taste by ID Image
#
# @param double $id The recipe id. (required)
# @param boolean $normalize Normalize to the strongest taste. (optional)
# @param string $rgb Red, green, blue values for the chart color. (optional)
{
    my $params = {
    'id' => {
        data_type => 'double',
        description => 'The recipe id.',
        required => '1',
    },
    'normalize' => {
        data_type => 'boolean',
        description => 'Normalize to the strongest taste.',
        required => '0',
    },
    'rgb' => {
        data_type => 'string',
        description => 'Red, green, blue values for the chart color.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'recipe_taste_by_id_image' } = {
        summary => 'Recipe Taste by ID Image',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub recipe_taste_by_id_image {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling recipe_taste_by_id_image");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/tasteWidget.png';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('image/png');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'normalize'}) {
        $query_params->{'normalize'} = $self->{api_client}->to_query_value($args{'normalize'});
    }

    # query params
    if ( exists $args{'rgb'}) {
        $query_params->{'rgb'} = $self->{api_client}->to_query_value($args{'rgb'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# search_recipes
#
# Search Recipes
#
# @param string $query The (natural language) search query. (optional)
# @param string $cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
# @param string $exclude_cuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
# @param string $diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
# @param string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
# @param string $equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
# @param string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
# @param string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
# @param string $type The type of recipe. See a full list of supported meal types. (optional)
# @param boolean $instructions_required Whether the recipes must have instructions. (optional)
# @param boolean $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
# @param boolean $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
# @param boolean $add_recipe_nutrition If set to true, you get nutritional information about each recipes returned. (optional)
# @param string $author The username of the recipe author. (optional)
# @param string $tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
# @param double $recipe_box_id The id of the recipe box to which the search should be limited to. (optional)
# @param string $title_match Enter text that must be found in the title of the recipes. (optional)
# @param double $max_ready_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
# @param boolean $ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
# @param string $sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
# @param string $sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
# @param double $min_carbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
# @param double $max_carbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
# @param double $min_protein The minimum amount of protein in grams the recipe must have. (optional)
# @param double $max_protein The maximum amount of protein in grams the recipe can have. (optional)
# @param double $min_calories The minimum amount of calories the recipe must have. (optional)
# @param double $max_calories The maximum amount of calories the recipe can have. (optional)
# @param double $min_fat The minimum amount of fat in grams the recipe must have. (optional)
# @param double $max_fat The maximum amount of fat in grams the recipe can have. (optional)
# @param double $min_alcohol The minimum amount of alcohol in grams the recipe must have. (optional)
# @param double $max_alcohol The maximum amount of alcohol in grams the recipe can have. (optional)
# @param double $min_caffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
# @param double $max_caffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
# @param double $min_copper The minimum amount of copper in milligrams the recipe must have. (optional)
# @param double $max_copper The maximum amount of copper in milligrams the recipe can have. (optional)
# @param double $min_calcium The minimum amount of calcium in milligrams the recipe must have. (optional)
# @param double $max_calcium The maximum amount of calcium in milligrams the recipe can have. (optional)
# @param double $min_choline The minimum amount of choline in milligrams the recipe must have. (optional)
# @param double $max_choline The maximum amount of choline in milligrams the recipe can have. (optional)
# @param double $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
# @param double $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
# @param double $min_fluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
# @param double $max_fluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
# @param double $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have. (optional)
# @param double $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have. (optional)
# @param double $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have. (optional)
# @param double $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have. (optional)
# @param double $min_vitamin_c The minimum amount of Vitamin C milligrams the recipe must have. (optional)
# @param double $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
# @param double $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
# @param double $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
# @param double $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
# @param double $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
# @param double $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
# @param double $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
# @param double $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
# @param double $max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
# @param double $min_fiber The minimum amount of fiber in grams the recipe must have. (optional)
# @param double $max_fiber The maximum amount of fiber in grams the recipe can have. (optional)
# @param double $min_folate The minimum amount of folate in micrograms the recipe must have. (optional)
# @param double $max_folate The maximum amount of folate in micrograms the recipe can have. (optional)
# @param double $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have. (optional)
# @param double $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have. (optional)
# @param double $min_iodine The minimum amount of iodine in micrograms the recipe must have. (optional)
# @param double $max_iodine The maximum amount of iodine in micrograms the recipe can have. (optional)
# @param double $min_iron The minimum amount of iron in milligrams the recipe must have. (optional)
# @param double $max_iron The maximum amount of iron in milligrams the recipe can have. (optional)
# @param double $min_magnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
# @param double $max_magnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
# @param double $min_manganese The minimum amount of manganese in milligrams the recipe must have. (optional)
# @param double $max_manganese The maximum amount of manganese in milligrams the recipe can have. (optional)
# @param double $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
# @param double $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
# @param double $min_potassium The minimum amount of potassium in milligrams the recipe must have. (optional)
# @param double $max_potassium The maximum amount of potassium in milligrams the recipe can have. (optional)
# @param double $min_selenium The minimum amount of selenium in micrograms the recipe must have. (optional)
# @param double $max_selenium The maximum amount of selenium in micrograms the recipe can have. (optional)
# @param double $min_sodium The minimum amount of sodium in milligrams the recipe must have. (optional)
# @param double $max_sodium The maximum amount of sodium in milligrams the recipe can have. (optional)
# @param double $min_sugar The minimum amount of sugar in grams the recipe must have. (optional)
# @param double $max_sugar The maximum amount of sugar in grams the recipe can have. (optional)
# @param double $min_zinc The minimum amount of zinc in milligrams the recipe must have. (optional)
# @param double $max_zinc The maximum amount of zinc in milligrams the recipe can have. (optional)
# @param int $offset The number of results to skip (between 0 and 900). (optional)
# @param int $number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
# @param boolean $limit_license Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The (natural language) search query.',
        required => '0',
    },
    'cuisine' => {
        data_type => 'string',
        description => 'The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.',
        required => '0',
    },
    'exclude_cuisine' => {
        data_type => 'string',
        description => 'The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'The diet for which the recipes must be suitable. See a full list of supported diets.',
        required => '0',
    },
    'intolerances' => {
        data_type => 'string',
        description => 'A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.',
        required => '0',
    },
    'equipment' => {
        data_type => 'string',
        description => 'The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.',
        required => '0',
    },
    'include_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients that should/must be used in the recipes.',
        required => '0',
    },
    'exclude_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients or ingredient types that the recipes must not contain.',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'The type of recipe. See a full list of supported meal types.',
        required => '0',
    },
    'instructions_required' => {
        data_type => 'boolean',
        description => 'Whether the recipes must have instructions.',
        required => '0',
    },
    'fill_ingredients' => {
        data_type => 'boolean',
        description => 'Add information about the ingredients and whether they are used or missing in relation to the query.',
        required => '0',
    },
    'add_recipe_information' => {
        data_type => 'boolean',
        description => 'If set to true, you get more information about the recipes returned.',
        required => '0',
    },
    'add_recipe_nutrition' => {
        data_type => 'boolean',
        description => 'If set to true, you get nutritional information about each recipes returned.',
        required => '0',
    },
    'author' => {
        data_type => 'string',
        description => 'The username of the recipe author.',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.',
        required => '0',
    },
    'recipe_box_id' => {
        data_type => 'double',
        description => 'The id of the recipe box to which the search should be limited to.',
        required => '0',
    },
    'title_match' => {
        data_type => 'string',
        description => 'Enter text that must be found in the title of the recipes.',
        required => '0',
    },
    'max_ready_time' => {
        data_type => 'double',
        description => 'The maximum time in minutes it should take to prepare and cook the recipe.',
        required => '0',
    },
    'ignore_pantry' => {
        data_type => 'boolean',
        description => 'Whether to ignore typical pantry items, such as water, salt, flour, etc.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The strategy to sort recipes by. See a full list of supported sorting options.',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).',
        required => '0',
    },
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum amount of carbohydrates in grams the recipe must have.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum amount of carbohydrates in grams the recipe can have.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum amount of protein in grams the recipe must have.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum amount of protein in grams the recipe can have.',
        required => '0',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum amount of calories the recipe must have.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum amount of calories the recipe can have.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum amount of fat in grams the recipe must have.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum amount of fat in grams the recipe can have.',
        required => '0',
    },
    'min_alcohol' => {
        data_type => 'double',
        description => 'The minimum amount of alcohol in grams the recipe must have.',
        required => '0',
    },
    'max_alcohol' => {
        data_type => 'double',
        description => 'The maximum amount of alcohol in grams the recipe can have.',
        required => '0',
    },
    'min_caffeine' => {
        data_type => 'double',
        description => 'The minimum amount of caffeine in milligrams the recipe must have.',
        required => '0',
    },
    'max_caffeine' => {
        data_type => 'double',
        description => 'The maximum amount of caffeine in milligrams the recipe can have.',
        required => '0',
    },
    'min_copper' => {
        data_type => 'double',
        description => 'The minimum amount of copper in milligrams the recipe must have.',
        required => '0',
    },
    'max_copper' => {
        data_type => 'double',
        description => 'The maximum amount of copper in milligrams the recipe can have.',
        required => '0',
    },
    'min_calcium' => {
        data_type => 'double',
        description => 'The minimum amount of calcium in milligrams the recipe must have.',
        required => '0',
    },
    'max_calcium' => {
        data_type => 'double',
        description => 'The maximum amount of calcium in milligrams the recipe can have.',
        required => '0',
    },
    'min_choline' => {
        data_type => 'double',
        description => 'The minimum amount of choline in milligrams the recipe must have.',
        required => '0',
    },
    'max_choline' => {
        data_type => 'double',
        description => 'The maximum amount of choline in milligrams the recipe can have.',
        required => '0',
    },
    'min_cholesterol' => {
        data_type => 'double',
        description => 'The minimum amount of cholesterol in milligrams the recipe must have.',
        required => '0',
    },
    'max_cholesterol' => {
        data_type => 'double',
        description => 'The maximum amount of cholesterol in milligrams the recipe can have.',
        required => '0',
    },
    'min_fluoride' => {
        data_type => 'double',
        description => 'The minimum amount of fluoride in milligrams the recipe must have.',
        required => '0',
    },
    'max_fluoride' => {
        data_type => 'double',
        description => 'The maximum amount of fluoride in milligrams the recipe can have.',
        required => '0',
    },
    'min_saturated_fat' => {
        data_type => 'double',
        description => 'The minimum amount of saturated fat in grams the recipe must have.',
        required => '0',
    },
    'max_saturated_fat' => {
        data_type => 'double',
        description => 'The maximum amount of saturated fat in grams the recipe can have.',
        required => '0',
    },
    'min_vitamin_a' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin A in IU the recipe must have.',
        required => '0',
    },
    'max_vitamin_a' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin A in IU the recipe can have.',
        required => '0',
    },
    'min_vitamin_c' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin C milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_c' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin C in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_d' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin D in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_d' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin D in micrograms the recipe can have.',
        required => '0',
    },
    'min_vitamin_e' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin E in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_e' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin E in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_k' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin K in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_k' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin K in micrograms the recipe can have.',
        required => '0',
    },
    'min_vitamin_b1' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B1 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b1' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B1 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b2' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B2 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b2' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B2 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b5' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B5 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b5' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B5 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b3' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B3 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b3' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B3 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b6' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B6 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b6' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B6 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b12' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B12 in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_b12' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B12 in micrograms the recipe can have.',
        required => '0',
    },
    'min_fiber' => {
        data_type => 'double',
        description => 'The minimum amount of fiber in grams the recipe must have.',
        required => '0',
    },
    'max_fiber' => {
        data_type => 'double',
        description => 'The maximum amount of fiber in grams the recipe can have.',
        required => '0',
    },
    'min_folate' => {
        data_type => 'double',
        description => 'The minimum amount of folate in micrograms the recipe must have.',
        required => '0',
    },
    'max_folate' => {
        data_type => 'double',
        description => 'The maximum amount of folate in micrograms the recipe can have.',
        required => '0',
    },
    'min_folic_acid' => {
        data_type => 'double',
        description => 'The minimum amount of folic acid in micrograms the recipe must have.',
        required => '0',
    },
    'max_folic_acid' => {
        data_type => 'double',
        description => 'The maximum amount of folic acid in micrograms the recipe can have.',
        required => '0',
    },
    'min_iodine' => {
        data_type => 'double',
        description => 'The minimum amount of iodine in micrograms the recipe must have.',
        required => '0',
    },
    'max_iodine' => {
        data_type => 'double',
        description => 'The maximum amount of iodine in micrograms the recipe can have.',
        required => '0',
    },
    'min_iron' => {
        data_type => 'double',
        description => 'The minimum amount of iron in milligrams the recipe must have.',
        required => '0',
    },
    'max_iron' => {
        data_type => 'double',
        description => 'The maximum amount of iron in milligrams the recipe can have.',
        required => '0',
    },
    'min_magnesium' => {
        data_type => 'double',
        description => 'The minimum amount of magnesium in milligrams the recipe must have.',
        required => '0',
    },
    'max_magnesium' => {
        data_type => 'double',
        description => 'The maximum amount of magnesium in milligrams the recipe can have.',
        required => '0',
    },
    'min_manganese' => {
        data_type => 'double',
        description => 'The minimum amount of manganese in milligrams the recipe must have.',
        required => '0',
    },
    'max_manganese' => {
        data_type => 'double',
        description => 'The maximum amount of manganese in milligrams the recipe can have.',
        required => '0',
    },
    'min_phosphorus' => {
        data_type => 'double',
        description => 'The minimum amount of phosphorus in milligrams the recipe must have.',
        required => '0',
    },
    'max_phosphorus' => {
        data_type => 'double',
        description => 'The maximum amount of phosphorus in milligrams the recipe can have.',
        required => '0',
    },
    'min_potassium' => {
        data_type => 'double',
        description => 'The minimum amount of potassium in milligrams the recipe must have.',
        required => '0',
    },
    'max_potassium' => {
        data_type => 'double',
        description => 'The maximum amount of potassium in milligrams the recipe can have.',
        required => '0',
    },
    'min_selenium' => {
        data_type => 'double',
        description => 'The minimum amount of selenium in micrograms the recipe must have.',
        required => '0',
    },
    'max_selenium' => {
        data_type => 'double',
        description => 'The maximum amount of selenium in micrograms the recipe can have.',
        required => '0',
    },
    'min_sodium' => {
        data_type => 'double',
        description => 'The minimum amount of sodium in milligrams the recipe must have.',
        required => '0',
    },
    'max_sodium' => {
        data_type => 'double',
        description => 'The maximum amount of sodium in milligrams the recipe can have.',
        required => '0',
    },
    'min_sugar' => {
        data_type => 'double',
        description => 'The minimum amount of sugar in grams the recipe must have.',
        required => '0',
    },
    'max_sugar' => {
        data_type => 'double',
        description => 'The maximum amount of sugar in grams the recipe can have.',
        required => '0',
    },
    'min_zinc' => {
        data_type => 'double',
        description => 'The minimum amount of zinc in milligrams the recipe must have.',
        required => '0',
    },
    'max_zinc' => {
        data_type => 'double',
        description => 'The maximum amount of zinc in milligrams the recipe can have.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of results to skip (between 0 and 900).',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The maximum number of items to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows display with proper attribution.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes' } = {
        summary => 'Search Recipes',
        params => $params,
        returns => 'SearchRecipes200Response',
        };
}
# @return SearchRecipes200Response
#
sub search_recipes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/complexSearch';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'cuisine'}) {
        $query_params->{'cuisine'} = $self->{api_client}->to_query_value($args{'cuisine'});
    }

    # query params
    if ( exists $args{'exclude_cuisine'}) {
        $query_params->{'excludeCuisine'} = $self->{api_client}->to_query_value($args{'exclude_cuisine'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'intolerances'}) {
        $query_params->{'intolerances'} = $self->{api_client}->to_query_value($args{'intolerances'});
    }

    # query params
    if ( exists $args{'equipment'}) {
        $query_params->{'equipment'} = $self->{api_client}->to_query_value($args{'equipment'});
    }

    # query params
    if ( exists $args{'include_ingredients'}) {
        $query_params->{'includeIngredients'} = $self->{api_client}->to_query_value($args{'include_ingredients'});
    }

    # query params
    if ( exists $args{'exclude_ingredients'}) {
        $query_params->{'excludeIngredients'} = $self->{api_client}->to_query_value($args{'exclude_ingredients'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'instructions_required'}) {
        $query_params->{'instructionsRequired'} = $self->{api_client}->to_query_value($args{'instructions_required'});
    }

    # query params
    if ( exists $args{'fill_ingredients'}) {
        $query_params->{'fillIngredients'} = $self->{api_client}->to_query_value($args{'fill_ingredients'});
    }

    # query params
    if ( exists $args{'add_recipe_information'}) {
        $query_params->{'addRecipeInformation'} = $self->{api_client}->to_query_value($args{'add_recipe_information'});
    }

    # query params
    if ( exists $args{'add_recipe_nutrition'}) {
        $query_params->{'addRecipeNutrition'} = $self->{api_client}->to_query_value($args{'add_recipe_nutrition'});
    }

    # query params
    if ( exists $args{'author'}) {
        $query_params->{'author'} = $self->{api_client}->to_query_value($args{'author'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'recipe_box_id'}) {
        $query_params->{'recipeBoxId'} = $self->{api_client}->to_query_value($args{'recipe_box_id'});
    }

    # query params
    if ( exists $args{'title_match'}) {
        $query_params->{'titleMatch'} = $self->{api_client}->to_query_value($args{'title_match'});
    }

    # query params
    if ( exists $args{'max_ready_time'}) {
        $query_params->{'maxReadyTime'} = $self->{api_client}->to_query_value($args{'max_ready_time'});
    }

    # query params
    if ( exists $args{'ignore_pantry'}) {
        $query_params->{'ignorePantry'} = $self->{api_client}->to_query_value($args{'ignore_pantry'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sortDirection'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'minCarbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'maxCarbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'minProtein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'maxProtein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'minCalories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'maxCalories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'minFat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'maxFat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'min_alcohol'}) {
        $query_params->{'minAlcohol'} = $self->{api_client}->to_query_value($args{'min_alcohol'});
    }

    # query params
    if ( exists $args{'max_alcohol'}) {
        $query_params->{'maxAlcohol'} = $self->{api_client}->to_query_value($args{'max_alcohol'});
    }

    # query params
    if ( exists $args{'min_caffeine'}) {
        $query_params->{'minCaffeine'} = $self->{api_client}->to_query_value($args{'min_caffeine'});
    }

    # query params
    if ( exists $args{'max_caffeine'}) {
        $query_params->{'maxCaffeine'} = $self->{api_client}->to_query_value($args{'max_caffeine'});
    }

    # query params
    if ( exists $args{'min_copper'}) {
        $query_params->{'minCopper'} = $self->{api_client}->to_query_value($args{'min_copper'});
    }

    # query params
    if ( exists $args{'max_copper'}) {
        $query_params->{'maxCopper'} = $self->{api_client}->to_query_value($args{'max_copper'});
    }

    # query params
    if ( exists $args{'min_calcium'}) {
        $query_params->{'minCalcium'} = $self->{api_client}->to_query_value($args{'min_calcium'});
    }

    # query params
    if ( exists $args{'max_calcium'}) {
        $query_params->{'maxCalcium'} = $self->{api_client}->to_query_value($args{'max_calcium'});
    }

    # query params
    if ( exists $args{'min_choline'}) {
        $query_params->{'minCholine'} = $self->{api_client}->to_query_value($args{'min_choline'});
    }

    # query params
    if ( exists $args{'max_choline'}) {
        $query_params->{'maxCholine'} = $self->{api_client}->to_query_value($args{'max_choline'});
    }

    # query params
    if ( exists $args{'min_cholesterol'}) {
        $query_params->{'minCholesterol'} = $self->{api_client}->to_query_value($args{'min_cholesterol'});
    }

    # query params
    if ( exists $args{'max_cholesterol'}) {
        $query_params->{'maxCholesterol'} = $self->{api_client}->to_query_value($args{'max_cholesterol'});
    }

    # query params
    if ( exists $args{'min_fluoride'}) {
        $query_params->{'minFluoride'} = $self->{api_client}->to_query_value($args{'min_fluoride'});
    }

    # query params
    if ( exists $args{'max_fluoride'}) {
        $query_params->{'maxFluoride'} = $self->{api_client}->to_query_value($args{'max_fluoride'});
    }

    # query params
    if ( exists $args{'min_saturated_fat'}) {
        $query_params->{'minSaturatedFat'} = $self->{api_client}->to_query_value($args{'min_saturated_fat'});
    }

    # query params
    if ( exists $args{'max_saturated_fat'}) {
        $query_params->{'maxSaturatedFat'} = $self->{api_client}->to_query_value($args{'max_saturated_fat'});
    }

    # query params
    if ( exists $args{'min_vitamin_a'}) {
        $query_params->{'minVitaminA'} = $self->{api_client}->to_query_value($args{'min_vitamin_a'});
    }

    # query params
    if ( exists $args{'max_vitamin_a'}) {
        $query_params->{'maxVitaminA'} = $self->{api_client}->to_query_value($args{'max_vitamin_a'});
    }

    # query params
    if ( exists $args{'min_vitamin_c'}) {
        $query_params->{'minVitaminC'} = $self->{api_client}->to_query_value($args{'min_vitamin_c'});
    }

    # query params
    if ( exists $args{'max_vitamin_c'}) {
        $query_params->{'maxVitaminC'} = $self->{api_client}->to_query_value($args{'max_vitamin_c'});
    }

    # query params
    if ( exists $args{'min_vitamin_d'}) {
        $query_params->{'minVitaminD'} = $self->{api_client}->to_query_value($args{'min_vitamin_d'});
    }

    # query params
    if ( exists $args{'max_vitamin_d'}) {
        $query_params->{'maxVitaminD'} = $self->{api_client}->to_query_value($args{'max_vitamin_d'});
    }

    # query params
    if ( exists $args{'min_vitamin_e'}) {
        $query_params->{'minVitaminE'} = $self->{api_client}->to_query_value($args{'min_vitamin_e'});
    }

    # query params
    if ( exists $args{'max_vitamin_e'}) {
        $query_params->{'maxVitaminE'} = $self->{api_client}->to_query_value($args{'max_vitamin_e'});
    }

    # query params
    if ( exists $args{'min_vitamin_k'}) {
        $query_params->{'minVitaminK'} = $self->{api_client}->to_query_value($args{'min_vitamin_k'});
    }

    # query params
    if ( exists $args{'max_vitamin_k'}) {
        $query_params->{'maxVitaminK'} = $self->{api_client}->to_query_value($args{'max_vitamin_k'});
    }

    # query params
    if ( exists $args{'min_vitamin_b1'}) {
        $query_params->{'minVitaminB1'} = $self->{api_client}->to_query_value($args{'min_vitamin_b1'});
    }

    # query params
    if ( exists $args{'max_vitamin_b1'}) {
        $query_params->{'maxVitaminB1'} = $self->{api_client}->to_query_value($args{'max_vitamin_b1'});
    }

    # query params
    if ( exists $args{'min_vitamin_b2'}) {
        $query_params->{'minVitaminB2'} = $self->{api_client}->to_query_value($args{'min_vitamin_b2'});
    }

    # query params
    if ( exists $args{'max_vitamin_b2'}) {
        $query_params->{'maxVitaminB2'} = $self->{api_client}->to_query_value($args{'max_vitamin_b2'});
    }

    # query params
    if ( exists $args{'min_vitamin_b5'}) {
        $query_params->{'minVitaminB5'} = $self->{api_client}->to_query_value($args{'min_vitamin_b5'});
    }

    # query params
    if ( exists $args{'max_vitamin_b5'}) {
        $query_params->{'maxVitaminB5'} = $self->{api_client}->to_query_value($args{'max_vitamin_b5'});
    }

    # query params
    if ( exists $args{'min_vitamin_b3'}) {
        $query_params->{'minVitaminB3'} = $self->{api_client}->to_query_value($args{'min_vitamin_b3'});
    }

    # query params
    if ( exists $args{'max_vitamin_b3'}) {
        $query_params->{'maxVitaminB3'} = $self->{api_client}->to_query_value($args{'max_vitamin_b3'});
    }

    # query params
    if ( exists $args{'min_vitamin_b6'}) {
        $query_params->{'minVitaminB6'} = $self->{api_client}->to_query_value($args{'min_vitamin_b6'});
    }

    # query params
    if ( exists $args{'max_vitamin_b6'}) {
        $query_params->{'maxVitaminB6'} = $self->{api_client}->to_query_value($args{'max_vitamin_b6'});
    }

    # query params
    if ( exists $args{'min_vitamin_b12'}) {
        $query_params->{'minVitaminB12'} = $self->{api_client}->to_query_value($args{'min_vitamin_b12'});
    }

    # query params
    if ( exists $args{'max_vitamin_b12'}) {
        $query_params->{'maxVitaminB12'} = $self->{api_client}->to_query_value($args{'max_vitamin_b12'});
    }

    # query params
    if ( exists $args{'min_fiber'}) {
        $query_params->{'minFiber'} = $self->{api_client}->to_query_value($args{'min_fiber'});
    }

    # query params
    if ( exists $args{'max_fiber'}) {
        $query_params->{'maxFiber'} = $self->{api_client}->to_query_value($args{'max_fiber'});
    }

    # query params
    if ( exists $args{'min_folate'}) {
        $query_params->{'minFolate'} = $self->{api_client}->to_query_value($args{'min_folate'});
    }

    # query params
    if ( exists $args{'max_folate'}) {
        $query_params->{'maxFolate'} = $self->{api_client}->to_query_value($args{'max_folate'});
    }

    # query params
    if ( exists $args{'min_folic_acid'}) {
        $query_params->{'minFolicAcid'} = $self->{api_client}->to_query_value($args{'min_folic_acid'});
    }

    # query params
    if ( exists $args{'max_folic_acid'}) {
        $query_params->{'maxFolicAcid'} = $self->{api_client}->to_query_value($args{'max_folic_acid'});
    }

    # query params
    if ( exists $args{'min_iodine'}) {
        $query_params->{'minIodine'} = $self->{api_client}->to_query_value($args{'min_iodine'});
    }

    # query params
    if ( exists $args{'max_iodine'}) {
        $query_params->{'maxIodine'} = $self->{api_client}->to_query_value($args{'max_iodine'});
    }

    # query params
    if ( exists $args{'min_iron'}) {
        $query_params->{'minIron'} = $self->{api_client}->to_query_value($args{'min_iron'});
    }

    # query params
    if ( exists $args{'max_iron'}) {
        $query_params->{'maxIron'} = $self->{api_client}->to_query_value($args{'max_iron'});
    }

    # query params
    if ( exists $args{'min_magnesium'}) {
        $query_params->{'minMagnesium'} = $self->{api_client}->to_query_value($args{'min_magnesium'});
    }

    # query params
    if ( exists $args{'max_magnesium'}) {
        $query_params->{'maxMagnesium'} = $self->{api_client}->to_query_value($args{'max_magnesium'});
    }

    # query params
    if ( exists $args{'min_manganese'}) {
        $query_params->{'minManganese'} = $self->{api_client}->to_query_value($args{'min_manganese'});
    }

    # query params
    if ( exists $args{'max_manganese'}) {
        $query_params->{'maxManganese'} = $self->{api_client}->to_query_value($args{'max_manganese'});
    }

    # query params
    if ( exists $args{'min_phosphorus'}) {
        $query_params->{'minPhosphorus'} = $self->{api_client}->to_query_value($args{'min_phosphorus'});
    }

    # query params
    if ( exists $args{'max_phosphorus'}) {
        $query_params->{'maxPhosphorus'} = $self->{api_client}->to_query_value($args{'max_phosphorus'});
    }

    # query params
    if ( exists $args{'min_potassium'}) {
        $query_params->{'minPotassium'} = $self->{api_client}->to_query_value($args{'min_potassium'});
    }

    # query params
    if ( exists $args{'max_potassium'}) {
        $query_params->{'maxPotassium'} = $self->{api_client}->to_query_value($args{'max_potassium'});
    }

    # query params
    if ( exists $args{'min_selenium'}) {
        $query_params->{'minSelenium'} = $self->{api_client}->to_query_value($args{'min_selenium'});
    }

    # query params
    if ( exists $args{'max_selenium'}) {
        $query_params->{'maxSelenium'} = $self->{api_client}->to_query_value($args{'max_selenium'});
    }

    # query params
    if ( exists $args{'min_sodium'}) {
        $query_params->{'minSodium'} = $self->{api_client}->to_query_value($args{'min_sodium'});
    }

    # query params
    if ( exists $args{'max_sodium'}) {
        $query_params->{'maxSodium'} = $self->{api_client}->to_query_value($args{'max_sodium'});
    }

    # query params
    if ( exists $args{'min_sugar'}) {
        $query_params->{'minSugar'} = $self->{api_client}->to_query_value($args{'min_sugar'});
    }

    # query params
    if ( exists $args{'max_sugar'}) {
        $query_params->{'maxSugar'} = $self->{api_client}->to_query_value($args{'max_sugar'});
    }

    # query params
    if ( exists $args{'min_zinc'}) {
        $query_params->{'minZinc'} = $self->{api_client}->to_query_value($args{'min_zinc'});
    }

    # query params
    if ( exists $args{'max_zinc'}) {
        $query_params->{'maxZinc'} = $self->{api_client}->to_query_value($args{'max_zinc'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchRecipes200Response', $response);
    return $_response_object;
}

#
# search_recipes_by_ingredients
#
# Search Recipes by Ingredients
#
# @param string $ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
# @param int $number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
# @param boolean $limit_license Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
# @param double $ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
# @param boolean $ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
{
    my $params = {
    'ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients that the recipes should contain.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The maximum number of items to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows display with proper attribution.',
        required => '0',
    },
    'ranking' => {
        data_type => 'double',
        description => 'Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.',
        required => '0',
    },
    'ignore_pantry' => {
        data_type => 'boolean',
        description => 'Whether to ignore typical pantry items, such as water, salt, flour, etc.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes_by_ingredients' } = {
        summary => 'Search Recipes by Ingredients',
        params => $params,
        returns => 'ARRAY[SearchRecipesByIngredients200ResponseInner]',
        };
}
# @return ARRAY[SearchRecipesByIngredients200ResponseInner]
#
sub search_recipes_by_ingredients {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/findByIngredients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ingredients'}) {
        $query_params->{'ingredients'} = $self->{api_client}->to_query_value($args{'ingredients'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    # query params
    if ( exists $args{'ranking'}) {
        $query_params->{'ranking'} = $self->{api_client}->to_query_value($args{'ranking'});
    }

    # query params
    if ( exists $args{'ignore_pantry'}) {
        $query_params->{'ignorePantry'} = $self->{api_client}->to_query_value($args{'ignore_pantry'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchRecipesByIngredients200ResponseInner]', $response);
    return $_response_object;
}

#
# search_recipes_by_nutrients
#
# Search Recipes by Nutrients
#
# @param double $min_carbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
# @param double $max_carbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
# @param double $min_protein The minimum amount of protein in grams the recipe must have. (optional)
# @param double $max_protein The maximum amount of protein in grams the recipe can have. (optional)
# @param double $min_calories The minimum amount of calories the recipe must have. (optional)
# @param double $max_calories The maximum amount of calories the recipe can have. (optional)
# @param double $min_fat The minimum amount of fat in grams the recipe must have. (optional)
# @param double $max_fat The maximum amount of fat in grams the recipe can have. (optional)
# @param double $min_alcohol The minimum amount of alcohol in grams the recipe must have. (optional)
# @param double $max_alcohol The maximum amount of alcohol in grams the recipe can have. (optional)
# @param double $min_caffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
# @param double $max_caffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
# @param double $min_copper The minimum amount of copper in milligrams the recipe must have. (optional)
# @param double $max_copper The maximum amount of copper in milligrams the recipe can have. (optional)
# @param double $min_calcium The minimum amount of calcium in milligrams the recipe must have. (optional)
# @param double $max_calcium The maximum amount of calcium in milligrams the recipe can have. (optional)
# @param double $min_choline The minimum amount of choline in milligrams the recipe must have. (optional)
# @param double $max_choline The maximum amount of choline in milligrams the recipe can have. (optional)
# @param double $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
# @param double $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
# @param double $min_fluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
# @param double $max_fluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
# @param double $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have. (optional)
# @param double $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have. (optional)
# @param double $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have. (optional)
# @param double $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have. (optional)
# @param double $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
# @param double $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
# @param double $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
# @param double $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
# @param double $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
# @param double $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
# @param double $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
# @param double $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
# @param double $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
# @param double $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
# @param double $min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
# @param double $max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
# @param double $min_fiber The minimum amount of fiber in grams the recipe must have. (optional)
# @param double $max_fiber The maximum amount of fiber in grams the recipe can have. (optional)
# @param double $min_folate The minimum amount of folate in micrograms the recipe must have. (optional)
# @param double $max_folate The maximum amount of folate in micrograms the recipe can have. (optional)
# @param double $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have. (optional)
# @param double $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have. (optional)
# @param double $min_iodine The minimum amount of iodine in micrograms the recipe must have. (optional)
# @param double $max_iodine The maximum amount of iodine in micrograms the recipe can have. (optional)
# @param double $min_iron The minimum amount of iron in milligrams the recipe must have. (optional)
# @param double $max_iron The maximum amount of iron in milligrams the recipe can have. (optional)
# @param double $min_magnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
# @param double $max_magnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
# @param double $min_manganese The minimum amount of manganese in milligrams the recipe must have. (optional)
# @param double $max_manganese The maximum amount of manganese in milligrams the recipe can have. (optional)
# @param double $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
# @param double $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
# @param double $min_potassium The minimum amount of potassium in milligrams the recipe must have. (optional)
# @param double $max_potassium The maximum amount of potassium in milligrams the recipe can have. (optional)
# @param double $min_selenium The minimum amount of selenium in micrograms the recipe must have. (optional)
# @param double $max_selenium The maximum amount of selenium in micrograms the recipe can have. (optional)
# @param double $min_sodium The minimum amount of sodium in milligrams the recipe must have. (optional)
# @param double $max_sodium The maximum amount of sodium in milligrams the recipe can have. (optional)
# @param double $min_sugar The minimum amount of sugar in grams the recipe must have. (optional)
# @param double $max_sugar The maximum amount of sugar in grams the recipe can have. (optional)
# @param double $min_zinc The minimum amount of zinc in milligrams the recipe must have. (optional)
# @param double $max_zinc The maximum amount of zinc in milligrams the recipe can have. (optional)
# @param int $offset The number of results to skip (between 0 and 900). (optional)
# @param int $number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
# @param boolean $random If true, every request will give you a random set of recipes within the requested limits. (optional)
# @param boolean $limit_license Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
{
    my $params = {
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum amount of carbohydrates in grams the recipe must have.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum amount of carbohydrates in grams the recipe can have.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum amount of protein in grams the recipe must have.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum amount of protein in grams the recipe can have.',
        required => '0',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum amount of calories the recipe must have.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum amount of calories the recipe can have.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum amount of fat in grams the recipe must have.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum amount of fat in grams the recipe can have.',
        required => '0',
    },
    'min_alcohol' => {
        data_type => 'double',
        description => 'The minimum amount of alcohol in grams the recipe must have.',
        required => '0',
    },
    'max_alcohol' => {
        data_type => 'double',
        description => 'The maximum amount of alcohol in grams the recipe can have.',
        required => '0',
    },
    'min_caffeine' => {
        data_type => 'double',
        description => 'The minimum amount of caffeine in milligrams the recipe must have.',
        required => '0',
    },
    'max_caffeine' => {
        data_type => 'double',
        description => 'The maximum amount of caffeine in milligrams the recipe can have.',
        required => '0',
    },
    'min_copper' => {
        data_type => 'double',
        description => 'The minimum amount of copper in milligrams the recipe must have.',
        required => '0',
    },
    'max_copper' => {
        data_type => 'double',
        description => 'The maximum amount of copper in milligrams the recipe can have.',
        required => '0',
    },
    'min_calcium' => {
        data_type => 'double',
        description => 'The minimum amount of calcium in milligrams the recipe must have.',
        required => '0',
    },
    'max_calcium' => {
        data_type => 'double',
        description => 'The maximum amount of calcium in milligrams the recipe can have.',
        required => '0',
    },
    'min_choline' => {
        data_type => 'double',
        description => 'The minimum amount of choline in milligrams the recipe must have.',
        required => '0',
    },
    'max_choline' => {
        data_type => 'double',
        description => 'The maximum amount of choline in milligrams the recipe can have.',
        required => '0',
    },
    'min_cholesterol' => {
        data_type => 'double',
        description => 'The minimum amount of cholesterol in milligrams the recipe must have.',
        required => '0',
    },
    'max_cholesterol' => {
        data_type => 'double',
        description => 'The maximum amount of cholesterol in milligrams the recipe can have.',
        required => '0',
    },
    'min_fluoride' => {
        data_type => 'double',
        description => 'The minimum amount of fluoride in milligrams the recipe must have.',
        required => '0',
    },
    'max_fluoride' => {
        data_type => 'double',
        description => 'The maximum amount of fluoride in milligrams the recipe can have.',
        required => '0',
    },
    'min_saturated_fat' => {
        data_type => 'double',
        description => 'The minimum amount of saturated fat in grams the recipe must have.',
        required => '0',
    },
    'max_saturated_fat' => {
        data_type => 'double',
        description => 'The maximum amount of saturated fat in grams the recipe can have.',
        required => '0',
    },
    'min_vitamin_a' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin A in IU the recipe must have.',
        required => '0',
    },
    'max_vitamin_a' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin A in IU the recipe can have.',
        required => '0',
    },
    'min_vitamin_c' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin C in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_c' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin C in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_d' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin D in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_d' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin D in micrograms the recipe can have.',
        required => '0',
    },
    'min_vitamin_e' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin E in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_e' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin E in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_k' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin K in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_k' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin K in micrograms the recipe can have.',
        required => '0',
    },
    'min_vitamin_b1' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B1 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b1' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B1 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b2' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B2 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b2' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B2 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b5' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B5 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b5' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B5 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b3' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B3 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b3' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B3 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b6' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B6 in milligrams the recipe must have.',
        required => '0',
    },
    'max_vitamin_b6' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B6 in milligrams the recipe can have.',
        required => '0',
    },
    'min_vitamin_b12' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B12 in micrograms the recipe must have.',
        required => '0',
    },
    'max_vitamin_b12' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B12 in micrograms the recipe can have.',
        required => '0',
    },
    'min_fiber' => {
        data_type => 'double',
        description => 'The minimum amount of fiber in grams the recipe must have.',
        required => '0',
    },
    'max_fiber' => {
        data_type => 'double',
        description => 'The maximum amount of fiber in grams the recipe can have.',
        required => '0',
    },
    'min_folate' => {
        data_type => 'double',
        description => 'The minimum amount of folate in micrograms the recipe must have.',
        required => '0',
    },
    'max_folate' => {
        data_type => 'double',
        description => 'The maximum amount of folate in micrograms the recipe can have.',
        required => '0',
    },
    'min_folic_acid' => {
        data_type => 'double',
        description => 'The minimum amount of folic acid in micrograms the recipe must have.',
        required => '0',
    },
    'max_folic_acid' => {
        data_type => 'double',
        description => 'The maximum amount of folic acid in micrograms the recipe can have.',
        required => '0',
    },
    'min_iodine' => {
        data_type => 'double',
        description => 'The minimum amount of iodine in micrograms the recipe must have.',
        required => '0',
    },
    'max_iodine' => {
        data_type => 'double',
        description => 'The maximum amount of iodine in micrograms the recipe can have.',
        required => '0',
    },
    'min_iron' => {
        data_type => 'double',
        description => 'The minimum amount of iron in milligrams the recipe must have.',
        required => '0',
    },
    'max_iron' => {
        data_type => 'double',
        description => 'The maximum amount of iron in milligrams the recipe can have.',
        required => '0',
    },
    'min_magnesium' => {
        data_type => 'double',
        description => 'The minimum amount of magnesium in milligrams the recipe must have.',
        required => '0',
    },
    'max_magnesium' => {
        data_type => 'double',
        description => 'The maximum amount of magnesium in milligrams the recipe can have.',
        required => '0',
    },
    'min_manganese' => {
        data_type => 'double',
        description => 'The minimum amount of manganese in milligrams the recipe must have.',
        required => '0',
    },
    'max_manganese' => {
        data_type => 'double',
        description => 'The maximum amount of manganese in milligrams the recipe can have.',
        required => '0',
    },
    'min_phosphorus' => {
        data_type => 'double',
        description => 'The minimum amount of phosphorus in milligrams the recipe must have.',
        required => '0',
    },
    'max_phosphorus' => {
        data_type => 'double',
        description => 'The maximum amount of phosphorus in milligrams the recipe can have.',
        required => '0',
    },
    'min_potassium' => {
        data_type => 'double',
        description => 'The minimum amount of potassium in milligrams the recipe must have.',
        required => '0',
    },
    'max_potassium' => {
        data_type => 'double',
        description => 'The maximum amount of potassium in milligrams the recipe can have.',
        required => '0',
    },
    'min_selenium' => {
        data_type => 'double',
        description => 'The minimum amount of selenium in micrograms the recipe must have.',
        required => '0',
    },
    'max_selenium' => {
        data_type => 'double',
        description => 'The maximum amount of selenium in micrograms the recipe can have.',
        required => '0',
    },
    'min_sodium' => {
        data_type => 'double',
        description => 'The minimum amount of sodium in milligrams the recipe must have.',
        required => '0',
    },
    'max_sodium' => {
        data_type => 'double',
        description => 'The maximum amount of sodium in milligrams the recipe can have.',
        required => '0',
    },
    'min_sugar' => {
        data_type => 'double',
        description => 'The minimum amount of sugar in grams the recipe must have.',
        required => '0',
    },
    'max_sugar' => {
        data_type => 'double',
        description => 'The maximum amount of sugar in grams the recipe can have.',
        required => '0',
    },
    'min_zinc' => {
        data_type => 'double',
        description => 'The minimum amount of zinc in milligrams the recipe must have.',
        required => '0',
    },
    'max_zinc' => {
        data_type => 'double',
        description => 'The maximum amount of zinc in milligrams the recipe can have.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of results to skip (between 0 and 900).',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The maximum number of items to return (between 1 and 100). Defaults to 10.',
        required => '0',
    },
    'random' => {
        data_type => 'boolean',
        description => 'If true, every request will give you a random set of recipes within the requested limits.',
        required => '0',
    },
    'limit_license' => {
        data_type => 'boolean',
        description => 'Whether the recipes should have an open license that allows display with proper attribution.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes_by_nutrients' } = {
        summary => 'Search Recipes by Nutrients',
        params => $params,
        returns => 'ARRAY[SearchRecipesByNutrients200ResponseInner]',
        };
}
# @return ARRAY[SearchRecipesByNutrients200ResponseInner]
#
sub search_recipes_by_nutrients {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/findByNutrients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'minCarbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'maxCarbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'minProtein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'maxProtein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'minCalories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'maxCalories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'minFat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'maxFat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'min_alcohol'}) {
        $query_params->{'minAlcohol'} = $self->{api_client}->to_query_value($args{'min_alcohol'});
    }

    # query params
    if ( exists $args{'max_alcohol'}) {
        $query_params->{'maxAlcohol'} = $self->{api_client}->to_query_value($args{'max_alcohol'});
    }

    # query params
    if ( exists $args{'min_caffeine'}) {
        $query_params->{'minCaffeine'} = $self->{api_client}->to_query_value($args{'min_caffeine'});
    }

    # query params
    if ( exists $args{'max_caffeine'}) {
        $query_params->{'maxCaffeine'} = $self->{api_client}->to_query_value($args{'max_caffeine'});
    }

    # query params
    if ( exists $args{'min_copper'}) {
        $query_params->{'minCopper'} = $self->{api_client}->to_query_value($args{'min_copper'});
    }

    # query params
    if ( exists $args{'max_copper'}) {
        $query_params->{'maxCopper'} = $self->{api_client}->to_query_value($args{'max_copper'});
    }

    # query params
    if ( exists $args{'min_calcium'}) {
        $query_params->{'minCalcium'} = $self->{api_client}->to_query_value($args{'min_calcium'});
    }

    # query params
    if ( exists $args{'max_calcium'}) {
        $query_params->{'maxCalcium'} = $self->{api_client}->to_query_value($args{'max_calcium'});
    }

    # query params
    if ( exists $args{'min_choline'}) {
        $query_params->{'minCholine'} = $self->{api_client}->to_query_value($args{'min_choline'});
    }

    # query params
    if ( exists $args{'max_choline'}) {
        $query_params->{'maxCholine'} = $self->{api_client}->to_query_value($args{'max_choline'});
    }

    # query params
    if ( exists $args{'min_cholesterol'}) {
        $query_params->{'minCholesterol'} = $self->{api_client}->to_query_value($args{'min_cholesterol'});
    }

    # query params
    if ( exists $args{'max_cholesterol'}) {
        $query_params->{'maxCholesterol'} = $self->{api_client}->to_query_value($args{'max_cholesterol'});
    }

    # query params
    if ( exists $args{'min_fluoride'}) {
        $query_params->{'minFluoride'} = $self->{api_client}->to_query_value($args{'min_fluoride'});
    }

    # query params
    if ( exists $args{'max_fluoride'}) {
        $query_params->{'maxFluoride'} = $self->{api_client}->to_query_value($args{'max_fluoride'});
    }

    # query params
    if ( exists $args{'min_saturated_fat'}) {
        $query_params->{'minSaturatedFat'} = $self->{api_client}->to_query_value($args{'min_saturated_fat'});
    }

    # query params
    if ( exists $args{'max_saturated_fat'}) {
        $query_params->{'maxSaturatedFat'} = $self->{api_client}->to_query_value($args{'max_saturated_fat'});
    }

    # query params
    if ( exists $args{'min_vitamin_a'}) {
        $query_params->{'minVitaminA'} = $self->{api_client}->to_query_value($args{'min_vitamin_a'});
    }

    # query params
    if ( exists $args{'max_vitamin_a'}) {
        $query_params->{'maxVitaminA'} = $self->{api_client}->to_query_value($args{'max_vitamin_a'});
    }

    # query params
    if ( exists $args{'min_vitamin_c'}) {
        $query_params->{'minVitaminC'} = $self->{api_client}->to_query_value($args{'min_vitamin_c'});
    }

    # query params
    if ( exists $args{'max_vitamin_c'}) {
        $query_params->{'maxVitaminC'} = $self->{api_client}->to_query_value($args{'max_vitamin_c'});
    }

    # query params
    if ( exists $args{'min_vitamin_d'}) {
        $query_params->{'minVitaminD'} = $self->{api_client}->to_query_value($args{'min_vitamin_d'});
    }

    # query params
    if ( exists $args{'max_vitamin_d'}) {
        $query_params->{'maxVitaminD'} = $self->{api_client}->to_query_value($args{'max_vitamin_d'});
    }

    # query params
    if ( exists $args{'min_vitamin_e'}) {
        $query_params->{'minVitaminE'} = $self->{api_client}->to_query_value($args{'min_vitamin_e'});
    }

    # query params
    if ( exists $args{'max_vitamin_e'}) {
        $query_params->{'maxVitaminE'} = $self->{api_client}->to_query_value($args{'max_vitamin_e'});
    }

    # query params
    if ( exists $args{'min_vitamin_k'}) {
        $query_params->{'minVitaminK'} = $self->{api_client}->to_query_value($args{'min_vitamin_k'});
    }

    # query params
    if ( exists $args{'max_vitamin_k'}) {
        $query_params->{'maxVitaminK'} = $self->{api_client}->to_query_value($args{'max_vitamin_k'});
    }

    # query params
    if ( exists $args{'min_vitamin_b1'}) {
        $query_params->{'minVitaminB1'} = $self->{api_client}->to_query_value($args{'min_vitamin_b1'});
    }

    # query params
    if ( exists $args{'max_vitamin_b1'}) {
        $query_params->{'maxVitaminB1'} = $self->{api_client}->to_query_value($args{'max_vitamin_b1'});
    }

    # query params
    if ( exists $args{'min_vitamin_b2'}) {
        $query_params->{'minVitaminB2'} = $self->{api_client}->to_query_value($args{'min_vitamin_b2'});
    }

    # query params
    if ( exists $args{'max_vitamin_b2'}) {
        $query_params->{'maxVitaminB2'} = $self->{api_client}->to_query_value($args{'max_vitamin_b2'});
    }

    # query params
    if ( exists $args{'min_vitamin_b5'}) {
        $query_params->{'minVitaminB5'} = $self->{api_client}->to_query_value($args{'min_vitamin_b5'});
    }

    # query params
    if ( exists $args{'max_vitamin_b5'}) {
        $query_params->{'maxVitaminB5'} = $self->{api_client}->to_query_value($args{'max_vitamin_b5'});
    }

    # query params
    if ( exists $args{'min_vitamin_b3'}) {
        $query_params->{'minVitaminB3'} = $self->{api_client}->to_query_value($args{'min_vitamin_b3'});
    }

    # query params
    if ( exists $args{'max_vitamin_b3'}) {
        $query_params->{'maxVitaminB3'} = $self->{api_client}->to_query_value($args{'max_vitamin_b3'});
    }

    # query params
    if ( exists $args{'min_vitamin_b6'}) {
        $query_params->{'minVitaminB6'} = $self->{api_client}->to_query_value($args{'min_vitamin_b6'});
    }

    # query params
    if ( exists $args{'max_vitamin_b6'}) {
        $query_params->{'maxVitaminB6'} = $self->{api_client}->to_query_value($args{'max_vitamin_b6'});
    }

    # query params
    if ( exists $args{'min_vitamin_b12'}) {
        $query_params->{'minVitaminB12'} = $self->{api_client}->to_query_value($args{'min_vitamin_b12'});
    }

    # query params
    if ( exists $args{'max_vitamin_b12'}) {
        $query_params->{'maxVitaminB12'} = $self->{api_client}->to_query_value($args{'max_vitamin_b12'});
    }

    # query params
    if ( exists $args{'min_fiber'}) {
        $query_params->{'minFiber'} = $self->{api_client}->to_query_value($args{'min_fiber'});
    }

    # query params
    if ( exists $args{'max_fiber'}) {
        $query_params->{'maxFiber'} = $self->{api_client}->to_query_value($args{'max_fiber'});
    }

    # query params
    if ( exists $args{'min_folate'}) {
        $query_params->{'minFolate'} = $self->{api_client}->to_query_value($args{'min_folate'});
    }

    # query params
    if ( exists $args{'max_folate'}) {
        $query_params->{'maxFolate'} = $self->{api_client}->to_query_value($args{'max_folate'});
    }

    # query params
    if ( exists $args{'min_folic_acid'}) {
        $query_params->{'minFolicAcid'} = $self->{api_client}->to_query_value($args{'min_folic_acid'});
    }

    # query params
    if ( exists $args{'max_folic_acid'}) {
        $query_params->{'maxFolicAcid'} = $self->{api_client}->to_query_value($args{'max_folic_acid'});
    }

    # query params
    if ( exists $args{'min_iodine'}) {
        $query_params->{'minIodine'} = $self->{api_client}->to_query_value($args{'min_iodine'});
    }

    # query params
    if ( exists $args{'max_iodine'}) {
        $query_params->{'maxIodine'} = $self->{api_client}->to_query_value($args{'max_iodine'});
    }

    # query params
    if ( exists $args{'min_iron'}) {
        $query_params->{'minIron'} = $self->{api_client}->to_query_value($args{'min_iron'});
    }

    # query params
    if ( exists $args{'max_iron'}) {
        $query_params->{'maxIron'} = $self->{api_client}->to_query_value($args{'max_iron'});
    }

    # query params
    if ( exists $args{'min_magnesium'}) {
        $query_params->{'minMagnesium'} = $self->{api_client}->to_query_value($args{'min_magnesium'});
    }

    # query params
    if ( exists $args{'max_magnesium'}) {
        $query_params->{'maxMagnesium'} = $self->{api_client}->to_query_value($args{'max_magnesium'});
    }

    # query params
    if ( exists $args{'min_manganese'}) {
        $query_params->{'minManganese'} = $self->{api_client}->to_query_value($args{'min_manganese'});
    }

    # query params
    if ( exists $args{'max_manganese'}) {
        $query_params->{'maxManganese'} = $self->{api_client}->to_query_value($args{'max_manganese'});
    }

    # query params
    if ( exists $args{'min_phosphorus'}) {
        $query_params->{'minPhosphorus'} = $self->{api_client}->to_query_value($args{'min_phosphorus'});
    }

    # query params
    if ( exists $args{'max_phosphorus'}) {
        $query_params->{'maxPhosphorus'} = $self->{api_client}->to_query_value($args{'max_phosphorus'});
    }

    # query params
    if ( exists $args{'min_potassium'}) {
        $query_params->{'minPotassium'} = $self->{api_client}->to_query_value($args{'min_potassium'});
    }

    # query params
    if ( exists $args{'max_potassium'}) {
        $query_params->{'maxPotassium'} = $self->{api_client}->to_query_value($args{'max_potassium'});
    }

    # query params
    if ( exists $args{'min_selenium'}) {
        $query_params->{'minSelenium'} = $self->{api_client}->to_query_value($args{'min_selenium'});
    }

    # query params
    if ( exists $args{'max_selenium'}) {
        $query_params->{'maxSelenium'} = $self->{api_client}->to_query_value($args{'max_selenium'});
    }

    # query params
    if ( exists $args{'min_sodium'}) {
        $query_params->{'minSodium'} = $self->{api_client}->to_query_value($args{'min_sodium'});
    }

    # query params
    if ( exists $args{'max_sodium'}) {
        $query_params->{'maxSodium'} = $self->{api_client}->to_query_value($args{'max_sodium'});
    }

    # query params
    if ( exists $args{'min_sugar'}) {
        $query_params->{'minSugar'} = $self->{api_client}->to_query_value($args{'min_sugar'});
    }

    # query params
    if ( exists $args{'max_sugar'}) {
        $query_params->{'maxSugar'} = $self->{api_client}->to_query_value($args{'max_sugar'});
    }

    # query params
    if ( exists $args{'min_zinc'}) {
        $query_params->{'minZinc'} = $self->{api_client}->to_query_value($args{'min_zinc'});
    }

    # query params
    if ( exists $args{'max_zinc'}) {
        $query_params->{'maxZinc'} = $self->{api_client}->to_query_value($args{'max_zinc'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    # query params
    if ( exists $args{'random'}) {
        $query_params->{'random'} = $self->{api_client}->to_query_value($args{'random'});
    }

    # query params
    if ( exists $args{'limit_license'}) {
        $query_params->{'limitLicense'} = $self->{api_client}->to_query_value($args{'limit_license'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SearchRecipesByNutrients200ResponseInner]', $response);
    return $_response_object;
}

#
# summarize_recipe
#
# Summarize Recipe
#
# @param int $id The item&#39;s id. (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'summarize_recipe' } = {
        summary => 'Summarize Recipe',
        params => $params,
        returns => 'SummarizeRecipe200Response',
        };
}
# @return SummarizeRecipe200Response
#
sub summarize_recipe {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling summarize_recipe");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/summary';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SummarizeRecipe200Response', $response);
    return $_response_object;
}

#
# visualize_equipment
#
# Equipment Widget
#
# @param string $content_type The content type. (optional)
# @param string $accept Accept header. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Accept header.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_equipment' } = {
        summary => 'Equipment Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_equipment {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/visualizeEquipment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_price_breakdown
#
# Price Breakdown Widget
#
# @param string $content_type The content type. (optional)
# @param string $accept Accept header. (optional)
# @param string $language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Accept header.',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'The language of the input. Either &#39;en&#39; or &#39;de&#39;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_price_breakdown' } = {
        summary => 'Price Breakdown Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_price_breakdown {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/visualizePriceEstimator';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_equipment_by_id
#
# Equipment by ID Widget
#
# @param int $id The item&#39;s id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional, default to true)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_equipment_by_id' } = {
        summary => 'Equipment by ID Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_equipment_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_equipment_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/equipmentWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_ingredients_by_id
#
# Ingredients by ID Widget
#
# @param int $id The item&#39;s id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional, default to true)
# @param string $measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'measure' => {
        data_type => 'string',
        description => 'Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_ingredients_by_id' } = {
        summary => 'Ingredients by ID Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_ingredients_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_ingredients_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/ingredientWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # query params
    if ( exists $args{'measure'}) {
        $query_params->{'measure'} = $self->{api_client}->to_query_value($args{'measure'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_nutrition
#
# Recipe Nutrition Widget
#
# @param string $content_type The content type. (optional)
# @param string $accept Accept header. (optional)
# @param string $language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
{
    my $params = {
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Accept header.',
        required => '0',
    },
    'language' => {
        data_type => 'string',
        description => 'The language of the input. Either &#39;en&#39; or &#39;de&#39;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_nutrition' } = {
        summary => 'Recipe Nutrition Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_nutrition {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/visualizeNutrition';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_nutrition_by_id
#
# Recipe Nutrition by ID Widget
#
# @param int $id The item&#39;s id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional, default to true)
# @param string $accept Accept header. (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Accept header.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_nutrition_by_id' } = {
        summary => 'Recipe Nutrition by ID Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_nutrition_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_nutrition_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/nutritionWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_price_breakdown_by_id
#
# Price Breakdown by ID Widget
#
# @param int $id The item&#39;s id. (required)
# @param boolean $default_css Whether the default CSS should be added to the response. (optional, default to true)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'default_css' => {
        data_type => 'boolean',
        description => 'Whether the default CSS should be added to the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_price_breakdown_by_id' } = {
        summary => 'Price Breakdown by ID Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_price_breakdown_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_price_breakdown_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/priceBreakdownWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'default_css'}) {
        $query_params->{'defaultCss'} = $self->{api_client}->to_query_value($args{'default_css'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_taste
#
# Recipe Taste Widget
#
# @param string $language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
# @param string $content_type The content type. (optional)
# @param string $accept Accept header. (optional)
# @param boolean $normalize Whether to normalize to the strongest taste. (optional)
# @param string $rgb Red, green, blue values for the chart color. (optional)
{
    my $params = {
    'language' => {
        data_type => 'string',
        description => 'The language of the input. Either &#39;en&#39; or &#39;de&#39;.',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => 'The content type.',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Accept header.',
        required => '0',
    },
    'normalize' => {
        data_type => 'boolean',
        description => 'Whether to normalize to the strongest taste.',
        required => '0',
    },
    'rgb' => {
        data_type => 'string',
        description => 'Red, green, blue values for the chart color.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_taste' } = {
        summary => 'Recipe Taste Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_taste {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/recipes/visualizeTaste';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded');

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    # query params
    if ( exists $args{'normalize'}) {
        $query_params->{'normalize'} = $self->{api_client}->to_query_value($args{'normalize'});
    }

    # query params
    if ( exists $args{'rgb'}) {
        $query_params->{'rgb'} = $self->{api_client}->to_query_value($args{'rgb'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# visualize_recipe_taste_by_id
#
# Recipe Taste by ID Widget
#
# @param int $id The item&#39;s id. (required)
# @param boolean $normalize Whether to normalize to the strongest taste. (optional, default to true)
# @param string $rgb Red, green, blue values for the chart color. (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The item&#39;s id.',
        required => '1',
    },
    'normalize' => {
        data_type => 'boolean',
        description => 'Whether to normalize to the strongest taste.',
        required => '0',
    },
    'rgb' => {
        data_type => 'string',
        description => 'Red, green, blue values for the chart color.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'visualize_recipe_taste_by_id' } = {
        summary => 'Recipe Taste by ID Widget',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub visualize_recipe_taste_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling visualize_recipe_taste_by_id");
    }

    # parse inputs
    my $_resource_path = '/recipes/{id}/tasteWidget';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/html');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'normalize'}) {
        $query_params->{'normalize'} = $self->{api_client}->to_query_value($args{'normalize'});
    }

    # query params
    if ( exists $args{'rgb'}) {
        $query_params->{'rgb'} = $self->{api_client}->to_query_value($args{'rgb'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyScheme )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
